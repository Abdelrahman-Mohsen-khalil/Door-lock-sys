
HMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000360a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  0000360a  0000369e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800104  00800104  00003742  2**0
                  ALLOC
  3 .stab         00003150  00000000  00000000  00003744  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012af  00000000  00000000  00006894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a927  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b6d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b834  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c28f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 08 	call	0x11cc	; 0x11cc <main>
      8a:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ee       	ldi	r26, 0xEF	; 239
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ee       	ldi	r24, 0xEF	; 239
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Create_password>:
uint8 temp;
//uint8 i=0;
/* funcion that create a password
 *  and repeated password and
 *  save it in 2 arrs[]*/
void Create_password(uint8 pass[], uint8 pass2[]){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ee 97       	sbiw	r28, 0x3e	; 62
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9c af       	std	Y+60, r25	; 0x3c
     b5c:	8b af       	std	Y+59, r24	; 0x3b
     b5e:	7e af       	std	Y+62, r23	; 0x3e
     b60:	6d af       	std	Y+61, r22	; 0x3d

	LCD_clearScreen();
     b62:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a8 e4       	ldi	r26, 0x48	; 72
     b6c:	b3 e4       	ldi	r27, 0x43	; 67
     b6e:	8d ab       	std	Y+53, r24	; 0x35
     b70:	9e ab       	std	Y+54, r25	; 0x36
     b72:	af ab       	std	Y+55, r26	; 0x37
     b74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	6d a9       	ldd	r22, Y+53	; 0x35
     b78:	7e a9       	ldd	r23, Y+54	; 0x36
     b7a:	8f a9       	ldd	r24, Y+55	; 0x37
     b7c:	98 ad       	ldd	r25, Y+56	; 0x38
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	4a ef       	ldi	r20, 0xFA	; 250
     b84:	54 e4       	ldi	r21, 0x44	; 68
     b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	89 ab       	std	Y+49, r24	; 0x31
     b90:	9a ab       	std	Y+50, r25	; 0x32
     b92:	ab ab       	std	Y+51, r26	; 0x33
     b94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     b96:	69 a9       	ldd	r22, Y+49	; 0x31
     b98:	7a a9       	ldd	r23, Y+50	; 0x32
     b9a:	8b a9       	ldd	r24, Y+51	; 0x33
     b9c:	9c a9       	ldd	r25, Y+52	; 0x34
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     baa:	88 23       	and	r24, r24
     bac:	2c f4       	brge	.+10     	; 0xbb8 <Create_password+0x72>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	98 ab       	std	Y+48, r25	; 0x30
     bb4:	8f a7       	std	Y+47, r24	; 0x2f
     bb6:	3f c0       	rjmp	.+126    	; 0xc36 <Create_password+0xf0>
	else if (__tmp > 65535)
     bb8:	69 a9       	ldd	r22, Y+49	; 0x31
     bba:	7a a9       	ldd	r23, Y+50	; 0x32
     bbc:	8b a9       	ldd	r24, Y+51	; 0x33
     bbe:	9c a9       	ldd	r25, Y+52	; 0x34
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	3f ef       	ldi	r19, 0xFF	; 255
     bc4:	4f e7       	ldi	r20, 0x7F	; 127
     bc6:	57 e4       	ldi	r21, 0x47	; 71
     bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bcc:	18 16       	cp	r1, r24
     bce:	4c f5       	brge	.+82     	; 0xc22 <Create_password+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd0:	6d a9       	ldd	r22, Y+53	; 0x35
     bd2:	7e a9       	ldd	r23, Y+54	; 0x36
     bd4:	8f a9       	ldd	r24, Y+55	; 0x37
     bd6:	98 ad       	ldd	r25, Y+56	; 0x38
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e2       	ldi	r20, 0x20	; 32
     bde:	51 e4       	ldi	r21, 0x41	; 65
     be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	98 ab       	std	Y+48, r25	; 0x30
     bf6:	8f a7       	std	Y+47, r24	; 0x2f
     bf8:	0f c0       	rjmp	.+30     	; 0xc18 <Create_password+0xd2>
     bfa:	88 ec       	ldi	r24, 0xC8	; 200
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9e a7       	std	Y+46, r25	; 0x2e
     c00:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c02:	8d a5       	ldd	r24, Y+45	; 0x2d
     c04:	9e a5       	ldd	r25, Y+46	; 0x2e
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <Create_password+0xc0>
     c0a:	9e a7       	std	Y+46, r25	; 0x2e
     c0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c10:	98 a9       	ldd	r25, Y+48	; 0x30
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	98 ab       	std	Y+48, r25	; 0x30
     c16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c18:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1a:	98 a9       	ldd	r25, Y+48	; 0x30
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	69 f7       	brne	.-38     	; 0xbfa <Create_password+0xb4>
     c20:	14 c0       	rjmp	.+40     	; 0xc4a <Create_password+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c22:	69 a9       	ldd	r22, Y+49	; 0x31
     c24:	7a a9       	ldd	r23, Y+50	; 0x32
     c26:	8b a9       	ldd	r24, Y+51	; 0x33
     c28:	9c a9       	ldd	r25, Y+52	; 0x34
     c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	98 ab       	std	Y+48, r25	; 0x30
     c34:	8f a7       	std	Y+47, r24	; 0x2f
     c36:	8f a5       	ldd	r24, Y+47	; 0x2f
     c38:	98 a9       	ldd	r25, Y+48	; 0x30
     c3a:	9c a7       	std	Y+44, r25	; 0x2c
     c3c:	8b a7       	std	Y+43, r24	; 0x2b
     c3e:	8b a5       	ldd	r24, Y+43	; 0x2b
     c40:	9c a5       	ldd	r25, Y+44	; 0x2c
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <Create_password+0xfc>
     c46:	9c a7       	std	Y+44, r25	; 0x2c
     c48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	LCD_displayString("Plz enter Pass: ");
     c4a:	80 e6       	ldi	r24, 0x60	; 96
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
	LCD_moveCursor(1,0);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	0e 94 01 18 	call	0x3002	; 0x3002 <LCD_moveCursor>

//	 temp=KEYPAD_getPressedKey();
	for(uint8 i=0;i<5;)
     c5a:	1a ae       	std	Y+58, r1	; 0x3a
     c5c:	8c c0       	rjmp	.+280    	; 0xd76 <Create_password+0x230>
	{
		temp=KEYPAD_getPressedKey();
     c5e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
     c62:	80 93 0c 01 	sts	0x010C, r24
		if( (temp>= 0 && temp<= 9) )
     c66:	80 91 0c 01 	lds	r24, 0x010C
     c6a:	8a 30       	cpi	r24, 0x0A	; 10
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <Create_password+0x12a>
     c6e:	83 c0       	rjmp	.+262    	; 0xd76 <Create_password+0x230>
		{

				pass[i]=temp;
     c70:	8a ad       	ldd	r24, Y+58	; 0x3a
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	8b ad       	ldd	r24, Y+59	; 0x3b
     c78:	9c ad       	ldd	r25, Y+60	; 0x3c
     c7a:	fc 01       	movw	r30, r24
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	80 91 0c 01 	lds	r24, 0x010C
     c84:	80 83       	st	Z, r24
//				LCD_intgerToString(pass[i]);
				LCD_displayCharacter('*');
     c86:	8a e2       	ldi	r24, 0x2A	; 42
     c88:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_displayCharacter>
				i++;
     c8c:	8a ad       	ldd	r24, Y+58	; 0x3a
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	8a af       	std	Y+58, r24	; 0x3a
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	aa ef       	ldi	r26, 0xFA	; 250
     c98:	b3 e4       	ldi	r27, 0x43	; 67
     c9a:	8f a3       	std	Y+39, r24	; 0x27
     c9c:	98 a7       	std	Y+40, r25	; 0x28
     c9e:	a9 a7       	std	Y+41, r26	; 0x29
     ca0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca2:	6f a1       	ldd	r22, Y+39	; 0x27
     ca4:	78 a5       	ldd	r23, Y+40	; 0x28
     ca6:	89 a5       	ldd	r24, Y+41	; 0x29
     ca8:	9a a5       	ldd	r25, Y+42	; 0x2a
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a ef       	ldi	r20, 0xFA	; 250
     cb0:	54 e4       	ldi	r21, 0x44	; 68
     cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8b a3       	std	Y+35, r24	; 0x23
     cbc:	9c a3       	std	Y+36, r25	; 0x24
     cbe:	ad a3       	std	Y+37, r26	; 0x25
     cc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cc2:	6b a1       	ldd	r22, Y+35	; 0x23
     cc4:	7c a1       	ldd	r23, Y+36	; 0x24
     cc6:	8d a1       	ldd	r24, Y+37	; 0x25
     cc8:	9e a1       	ldd	r25, Y+38	; 0x26
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	2c f4       	brge	.+10     	; 0xce4 <Create_password+0x19e>
		__ticks = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9a a3       	std	Y+34, r25	; 0x22
     ce0:	89 a3       	std	Y+33, r24	; 0x21
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <Create_password+0x21c>
	else if (__tmp > 65535)
     ce4:	6b a1       	ldd	r22, Y+35	; 0x23
     ce6:	7c a1       	ldd	r23, Y+36	; 0x24
     ce8:	8d a1       	ldd	r24, Y+37	; 0x25
     cea:	9e a1       	ldd	r25, Y+38	; 0x26
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	57 e4       	ldi	r21, 0x47	; 71
     cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf8:	18 16       	cp	r1, r24
     cfa:	4c f5       	brge	.+82     	; 0xd4e <Create_password+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfc:	6f a1       	ldd	r22, Y+39	; 0x27
     cfe:	78 a5       	ldd	r23, Y+40	; 0x28
     d00:	89 a5       	ldd	r24, Y+41	; 0x29
     d02:	9a a5       	ldd	r25, Y+42	; 0x2a
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9a a3       	std	Y+34, r25	; 0x22
     d22:	89 a3       	std	Y+33, r24	; 0x21
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <Create_password+0x1fe>
     d26:	88 ec       	ldi	r24, 0xC8	; 200
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	98 a3       	std	Y+32, r25	; 0x20
     d2c:	8f 8f       	std	Y+31, r24	; 0x1f
     d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d30:	98 a1       	ldd	r25, Y+32	; 0x20
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <Create_password+0x1ec>
     d36:	98 a3       	std	Y+32, r25	; 0x20
     d38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3a:	89 a1       	ldd	r24, Y+33	; 0x21
     d3c:	9a a1       	ldd	r25, Y+34	; 0x22
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9a a3       	std	Y+34, r25	; 0x22
     d42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	89 a1       	ldd	r24, Y+33	; 0x21
     d46:	9a a1       	ldd	r25, Y+34	; 0x22
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	69 f7       	brne	.-38     	; 0xd26 <Create_password+0x1e0>
     d4c:	14 c0       	rjmp	.+40     	; 0xd76 <Create_password+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4e:	6b a1       	ldd	r22, Y+35	; 0x23
     d50:	7c a1       	ldd	r23, Y+36	; 0x24
     d52:	8d a1       	ldd	r24, Y+37	; 0x25
     d54:	9e a1       	ldd	r25, Y+38	; 0x26
     d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9a a3       	std	Y+34, r25	; 0x22
     d60:	89 a3       	std	Y+33, r24	; 0x21
     d62:	89 a1       	ldd	r24, Y+33	; 0x21
     d64:	9a a1       	ldd	r25, Y+34	; 0x22
     d66:	9e 8f       	std	Y+30, r25	; 0x1e
     d68:	8d 8f       	std	Y+29, r24	; 0x1d
     d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <Create_password+0x228>
     d72:	9e 8f       	std	Y+30, r25	; 0x1e
     d74:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	LCD_displayString("Plz enter Pass: ");
	LCD_moveCursor(1,0);

//	 temp=KEYPAD_getPressedKey();
	for(uint8 i=0;i<5;)
     d76:	8a ad       	ldd	r24, Y+58	; 0x3a
     d78:	85 30       	cpi	r24, 0x05	; 5
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <Create_password+0x238>
     d7c:	70 cf       	rjmp	.-288    	; 0xc5e <Create_password+0x118>
				LCD_displayCharacter('*');
				i++;

			_delay_ms(500);
		}
	}while(KEYPAD_getPressedKey()!='=');
     d7e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
     d82:	8d 33       	cpi	r24, 0x3D	; 61
     d84:	e1 f7       	brne	.-8      	; 0xd7e <Create_password+0x238>
//	c=0;

	LCD_clearScreen();
     d86:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a8 e4       	ldi	r26, 0x48	; 72
     d90:	b3 e4       	ldi	r27, 0x43	; 67
     d92:	89 8f       	std	Y+25, r24	; 0x19
     d94:	9a 8f       	std	Y+26, r25	; 0x1a
     d96:	ab 8f       	std	Y+27, r26	; 0x1b
     d98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9a:	69 8d       	ldd	r22, Y+25	; 0x19
     d9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a ef       	ldi	r20, 0xFA	; 250
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	8d 8b       	std	Y+21, r24	; 0x15
     db4:	9e 8b       	std	Y+22, r25	; 0x16
     db6:	af 8b       	std	Y+23, r26	; 0x17
     db8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dba:	6d 89       	ldd	r22, Y+21	; 0x15
     dbc:	7e 89       	ldd	r23, Y+22	; 0x16
     dbe:	8f 89       	ldd	r24, Y+23	; 0x17
     dc0:	98 8d       	ldd	r25, Y+24	; 0x18
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dce:	88 23       	and	r24, r24
     dd0:	2c f4       	brge	.+10     	; 0xddc <Create_password+0x296>
		__ticks = 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9c 8b       	std	Y+20, r25	; 0x14
     dd8:	8b 8b       	std	Y+19, r24	; 0x13
     dda:	3f c0       	rjmp	.+126    	; 0xe5a <Create_password+0x314>
	else if (__tmp > 65535)
     ddc:	6d 89       	ldd	r22, Y+21	; 0x15
     dde:	7e 89       	ldd	r23, Y+22	; 0x16
     de0:	8f 89       	ldd	r24, Y+23	; 0x17
     de2:	98 8d       	ldd	r25, Y+24	; 0x18
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	3f ef       	ldi	r19, 0xFF	; 255
     de8:	4f e7       	ldi	r20, 0x7F	; 127
     dea:	57 e4       	ldi	r21, 0x47	; 71
     dec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df0:	18 16       	cp	r1, r24
     df2:	4c f5       	brge	.+82     	; 0xe46 <Create_password+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df4:	69 8d       	ldd	r22, Y+25	; 0x19
     df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	9c 8b       	std	Y+20, r25	; 0x14
     e1a:	8b 8b       	std	Y+19, r24	; 0x13
     e1c:	0f c0       	rjmp	.+30     	; 0xe3c <Create_password+0x2f6>
     e1e:	88 ec       	ldi	r24, 0xC8	; 200
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9a 8b       	std	Y+18, r25	; 0x12
     e24:	89 8b       	std	Y+17, r24	; 0x11
     e26:	89 89       	ldd	r24, Y+17	; 0x11
     e28:	9a 89       	ldd	r25, Y+18	; 0x12
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <Create_password+0x2e4>
     e2e:	9a 8b       	std	Y+18, r25	; 0x12
     e30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e32:	8b 89       	ldd	r24, Y+19	; 0x13
     e34:	9c 89       	ldd	r25, Y+20	; 0x14
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	9c 8b       	std	Y+20, r25	; 0x14
     e3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	9c 89       	ldd	r25, Y+20	; 0x14
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	69 f7       	brne	.-38     	; 0xe1e <Create_password+0x2d8>
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <Create_password+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e46:	6d 89       	ldd	r22, Y+21	; 0x15
     e48:	7e 89       	ldd	r23, Y+22	; 0x16
     e4a:	8f 89       	ldd	r24, Y+23	; 0x17
     e4c:	98 8d       	ldd	r25, Y+24	; 0x18
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9c 8b       	std	Y+20, r25	; 0x14
     e58:	8b 8b       	std	Y+19, r24	; 0x13
     e5a:	8b 89       	ldd	r24, Y+19	; 0x13
     e5c:	9c 89       	ldd	r25, Y+20	; 0x14
     e5e:	98 8b       	std	Y+16, r25	; 0x10
     e60:	8f 87       	std	Y+15, r24	; 0x0f
     e62:	8f 85       	ldd	r24, Y+15	; 0x0f
     e64:	98 89       	ldd	r25, Y+16	; 0x10
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <Create_password+0x320>
     e6a:	98 8b       	std	Y+16, r25	; 0x10
     e6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	LCD_displayString("Plz re-enter the ");
     e6e:	81 e7       	ldi	r24, 0x71	; 113
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
	LCD_moveCursor(1, 0);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	0e 94 01 18 	call	0x3002	; 0x3002 <LCD_moveCursor>
	LCD_displayString("same pass:");
     e7e:	83 e8       	ldi	r24, 0x83	; 131
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>


//	temp=KEYPAD_getPressedKey();
	for(uint8 i=0;i<5;)
     e86:	19 ae       	std	Y+57, r1	; 0x39
     e88:	8c c0       	rjmp	.+280    	; 0xfa2 <Create_password+0x45c>
	{
		temp=KEYPAD_getPressedKey();
     e8a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
     e8e:	80 93 0c 01 	sts	0x010C, r24
		if( (temp>= 0 && temp<= 9) )
     e92:	80 91 0c 01 	lds	r24, 0x010C
     e96:	8a 30       	cpi	r24, 0x0A	; 10
     e98:	08 f0       	brcs	.+2      	; 0xe9c <Create_password+0x356>
     e9a:	83 c0       	rjmp	.+262    	; 0xfa2 <Create_password+0x45c>
		{

				pass2[i]=temp;
     e9c:	89 ad       	ldd	r24, Y+57	; 0x39
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	8d ad       	ldd	r24, Y+61	; 0x3d
     ea4:	9e ad       	ldd	r25, Y+62	; 0x3e
     ea6:	fc 01       	movw	r30, r24
     ea8:	e2 0f       	add	r30, r18
     eaa:	f3 1f       	adc	r31, r19
     eac:	80 91 0c 01 	lds	r24, 0x010C
     eb0:	80 83       	st	Z, r24
//				LCD_intgerToString(pass2[i]);
				LCD_displayCharacter('*');
     eb2:	8a e2       	ldi	r24, 0x2A	; 42
     eb4:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_displayCharacter>

				i++;
     eb8:	89 ad       	ldd	r24, Y+57	; 0x39
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	89 af       	std	Y+57, r24	; 0x39
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	aa ef       	ldi	r26, 0xFA	; 250
     ec4:	b3 e4       	ldi	r27, 0x43	; 67
     ec6:	8b 87       	std	Y+11, r24	; 0x0b
     ec8:	9c 87       	std	Y+12, r25	; 0x0c
     eca:	ad 87       	std	Y+13, r26	; 0x0d
     ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ece:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4a ef       	ldi	r20, 0xFA	; 250
     edc:	54 e4       	ldi	r21, 0x44	; 68
     ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	8f 83       	std	Y+7, r24	; 0x07
     ee8:	98 87       	std	Y+8, r25	; 0x08
     eea:	a9 87       	std	Y+9, r26	; 0x09
     eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eee:	6f 81       	ldd	r22, Y+7	; 0x07
     ef0:	78 85       	ldd	r23, Y+8	; 0x08
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f02:	88 23       	and	r24, r24
     f04:	2c f4       	brge	.+10     	; 0xf10 <Create_password+0x3ca>
		__ticks = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9e 83       	std	Y+6, r25	; 0x06
     f0c:	8d 83       	std	Y+5, r24	; 0x05
     f0e:	3f c0       	rjmp	.+126    	; 0xf8e <Create_password+0x448>
	else if (__tmp > 65535)
     f10:	6f 81       	ldd	r22, Y+7	; 0x07
     f12:	78 85       	ldd	r23, Y+8	; 0x08
     f14:	89 85       	ldd	r24, Y+9	; 0x09
     f16:	9a 85       	ldd	r25, Y+10	; 0x0a
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	3f ef       	ldi	r19, 0xFF	; 255
     f1c:	4f e7       	ldi	r20, 0x7F	; 127
     f1e:	57 e4       	ldi	r21, 0x47	; 71
     f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f24:	18 16       	cp	r1, r24
     f26:	4c f5       	brge	.+82     	; 0xf7a <Create_password+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f28:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9e 83       	std	Y+6, r25	; 0x06
     f4e:	8d 83       	std	Y+5, r24	; 0x05
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <Create_password+0x42a>
     f52:	88 ec       	ldi	r24, 0xC8	; 200
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9c 83       	std	Y+4, r25	; 0x04
     f58:	8b 83       	std	Y+3, r24	; 0x03
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <Create_password+0x418>
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	9e 81       	ldd	r25, Y+6	; 0x06
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	69 f7       	brne	.-38     	; 0xf52 <Create_password+0x40c>
     f78:	14 c0       	rjmp	.+40     	; 0xfa2 <Create_password+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7a:	6f 81       	ldd	r22, Y+7	; 0x07
     f7c:	78 85       	ldd	r23, Y+8	; 0x08
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	8d 83       	std	Y+5, r24	; 0x05
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <Create_password+0x454>
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass:");


//	temp=KEYPAD_getPressedKey();
	for(uint8 i=0;i<5;)
     fa2:	89 ad       	ldd	r24, Y+57	; 0x39
     fa4:	85 30       	cpi	r24, 0x05	; 5
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <Create_password+0x464>
     fa8:	70 cf       	rjmp	.-288    	; 0xe8a <Create_password+0x344>

				i++;

			_delay_ms(500);
		}
	}while(KEYPAD_getPressedKey()!='=');
     faa:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
     fae:	8d 33       	cpi	r24, 0x3D	; 61
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <Create_password+0x464>
//	c=0;

	LCD_clearScreen();
     fb2:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
}
     fb6:	ee 96       	adiw	r28, 0x3e	; 62
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <send_password>:

/* send to arrays to mcu controller
 by using uart to check two pass are same to
 save it in rom if they are same */
void send_password(uint8 pass[], uint8 pass2[]){
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <send_password+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <send_password+0x8>
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <send_password+0xa>
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	9c 83       	std	Y+4, r25	; 0x04
     fd8:	8b 83       	std	Y+3, r24	; 0x03
     fda:	7e 83       	std	Y+6, r23	; 0x06
     fdc:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i =0;
     fde:	1a 82       	std	Y+2, r1	; 0x02
	uint8 status;
	for( i =0;i<5;i++){
     fe0:	1a 82       	std	Y+2, r1	; 0x02
     fe2:	0e c0       	rjmp	.+28     	; 0x1000 <send_password+0x38>
		UART_sendByte(pass[i]);
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	fc 01       	movw	r30, r24
     ff0:	e2 0f       	add	r30, r18
     ff2:	f3 1f       	adc	r31, r19
     ff4:	80 81       	ld	r24, Z
     ff6:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>
 by using uart to check two pass are same to
 save it in rom if they are same */
void send_password(uint8 pass[], uint8 pass2[]){
	uint8 i =0;
	uint8 status;
	for( i =0;i<5;i++){
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	85 30       	cpi	r24, 0x05	; 5
    1004:	78 f3       	brcs	.-34     	; 0xfe4 <send_password+0x1c>
		UART_sendByte(pass[i]);
	}
	for( i =0;i<5;i++){
    1006:	1a 82       	std	Y+2, r1	; 0x02
    1008:	0e c0       	rjmp	.+28     	; 0x1026 <send_password+0x5e>
		UART_sendByte(pass2[i]);
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	fc 01       	movw	r30, r24
    1016:	e2 0f       	add	r30, r18
    1018:	f3 1f       	adc	r31, r19
    101a:	80 81       	ld	r24, Z
    101c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>
	uint8 i =0;
	uint8 status;
	for( i =0;i<5;i++){
		UART_sendByte(pass[i]);
	}
	for( i =0;i<5;i++){
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	8a 83       	std	Y+2, r24	; 0x02
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	85 30       	cpi	r24, 0x05	; 5
    102a:	78 f3       	brcs	.-34     	; 0x100a <send_password+0x42>





}
    102c:	26 96       	adiw	r28, 0x06	; 6
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <check_password>:
/*
 *func to check the pass that enterd == eeprom
 * */
void check_password(uint8 pass[]){
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <check_password+0x6>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    104e:	19 82       	std	Y+1, r1	; 0x01
	UART_sendByte(Checkpass);
    1050:	84 e0       	ldi	r24, 0x04	; 4
    1052:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>
	for( i =0;i<5;i++){
    1056:	19 82       	std	Y+1, r1	; 0x01
    1058:	0e c0       	rjmp	.+28     	; 0x1076 <check_password+0x38>

		UART_sendByte(pass[i]);
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	fc 01       	movw	r30, r24
    1066:	e2 0f       	add	r30, r18
    1068:	f3 1f       	adc	r31, r19
    106a:	80 81       	ld	r24, Z
    106c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>
 *func to check the pass that enterd == eeprom
 * */
void check_password(uint8 pass[]){
	uint8 i =0;
	UART_sendByte(Checkpass);
	for( i =0;i<5;i++){
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	8f 5f       	subi	r24, 0xFF	; 255
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	85 30       	cpi	r24, 0x05	; 5
    107a:	78 f3       	brcs	.-34     	; 0x105a <check_password+0x1c>

		UART_sendByte(pass[i]);
	}

}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <sec_18>:


void sec_18(){
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	count++;
    1090:	80 91 04 01 	lds	r24, 0x0104
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	80 93 04 01 	sts	0x0104, r24
	if(count==18){
    109a:	80 91 04 01 	lds	r24, 0x0104
    109e:	82 31       	cpi	r24, 0x12	; 18
    10a0:	41 f4       	brne	.+16     	; 0x10b2 <sec_18+0x2a>
		Timer1_deInit();
    10a2:	0e 94 40 19 	call	0x3280	; 0x3280 <Timer1_deInit>

		LCD_clearScreen();
    10a6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>

		LCD_displayString("Door is locking");
    10aa:	8e e8       	ldi	r24, 0x8E	; 142
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
	}
}
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <sec_15>:

void sec_15(){
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
	count++;
    10c0:	80 91 04 01 	lds	r24, 0x0104
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	80 93 04 01 	sts	0x0104, r24
	if(count==15){
    10ca:	80 91 04 01 	lds	r24, 0x0104
    10ce:	8f 30       	cpi	r24, 0x0F	; 15
    10d0:	21 f4       	brne	.+8      	; 0x10da <sec_15+0x22>
		Timer1_deInit();
    10d2:	0e 94 40 19 	call	0x3280	; 0x3280 <Timer1_deInit>

		LCD_clearScreen();
    10d6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
	}
}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <sec_60>:

/*
 * for buzzer
 * */
void sec_60(){
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	count++;
    10e8:	80 91 04 01 	lds	r24, 0x0104
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	80 93 04 01 	sts	0x0104, r24
	if(count==60){
    10f2:	80 91 04 01 	lds	r24, 0x0104
    10f6:	8c 33       	cpi	r24, 0x3C	; 60
    10f8:	39 f4       	brne	.+14     	; 0x1108 <sec_60+0x28>
		Timer1_deInit();
    10fa:	0e 94 40 19 	call	0x3280	; 0x3280 <Timer1_deInit>

		LCD_clearScreen();
    10fe:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>

		UART_sendByte(buzzeroff);
    1102:	88 e0       	ldi	r24, 0x08	; 8
    1104:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>

	}
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <timer1delay>:

/*
 * set the call bace func of timer1
 * */
void timer1delay(uint8 sec){
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2e 97       	sbiw	r28, 0x0e	; 14
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	8f 83       	std	Y+7, r24	; 0x07

	count =0;
    1124:	10 92 04 01 	sts	0x0104, r1
	Timer1_ConfigType config_t1={0,31250,FCPU_256,CTC}; //this config count one second
    1128:	9e 01       	movw	r18, r28
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	3b 87       	std	Y+11, r19	; 0x0b
    1130:	2a 87       	std	Y+10, r18	; 0x0a
    1132:	87 ef       	ldi	r24, 0xF7	; 247
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9d 87       	std	Y+13, r25	; 0x0d
    1138:	8c 87       	std	Y+12, r24	; 0x0c
    113a:	96 e0       	ldi	r25, 0x06	; 6
    113c:	9e 87       	std	Y+14, r25	; 0x0e
    113e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1140:	fd 85       	ldd	r31, Y+13	; 0x0d
    1142:	00 80       	ld	r0, Z
    1144:	2c 85       	ldd	r18, Y+12	; 0x0c
    1146:	3d 85       	ldd	r19, Y+13	; 0x0d
    1148:	2f 5f       	subi	r18, 0xFF	; 255
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	3d 87       	std	Y+13, r19	; 0x0d
    114e:	2c 87       	std	Y+12, r18	; 0x0c
    1150:	ea 85       	ldd	r30, Y+10	; 0x0a
    1152:	fb 85       	ldd	r31, Y+11	; 0x0b
    1154:	00 82       	st	Z, r0
    1156:	2a 85       	ldd	r18, Y+10	; 0x0a
    1158:	3b 85       	ldd	r19, Y+11	; 0x0b
    115a:	2f 5f       	subi	r18, 0xFF	; 255
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	3b 87       	std	Y+11, r19	; 0x0b
    1160:	2a 87       	std	Y+10, r18	; 0x0a
    1162:	3e 85       	ldd	r19, Y+14	; 0x0e
    1164:	31 50       	subi	r19, 0x01	; 1
    1166:	3e 87       	std	Y+14, r19	; 0x0e
    1168:	8e 85       	ldd	r24, Y+14	; 0x0e
    116a:	88 23       	and	r24, r24
    116c:	41 f7       	brne	.-48     	; 0x113e <timer1delay+0x30>
	Timer1_init(&config_t1);
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	0e 94 ef 18 	call	0x31de	; 0x31de <Timer1_init>

	switch (sec){
    1176:	8f 81       	ldd	r24, Y+7	; 0x07
    1178:	e8 2f       	mov	r30, r24
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	f9 87       	std	Y+9, r31	; 0x09
    117e:	e8 87       	std	Y+8, r30	; 0x08
    1180:	28 85       	ldd	r18, Y+8	; 0x08
    1182:	39 85       	ldd	r19, Y+9	; 0x09
    1184:	22 31       	cpi	r18, 0x12	; 18
    1186:	31 05       	cpc	r19, r1
    1188:	79 f0       	breq	.+30     	; 0x11a8 <timer1delay+0x9a>
    118a:	88 85       	ldd	r24, Y+8	; 0x08
    118c:	99 85       	ldd	r25, Y+9	; 0x09
    118e:	8c 33       	cpi	r24, 0x3C	; 60
    1190:	91 05       	cpc	r25, r1
    1192:	79 f0       	breq	.+30     	; 0x11b2 <timer1delay+0xa4>
    1194:	e8 85       	ldd	r30, Y+8	; 0x08
    1196:	f9 85       	ldd	r31, Y+9	; 0x09
    1198:	ef 30       	cpi	r30, 0x0F	; 15
    119a:	f1 05       	cpc	r31, r1
    119c:	71 f4       	brne	.+28     	; 0x11ba <timer1delay+0xac>
	case 15:
		Timer1_setCallBack(sec_15);
    119e:	8c e5       	ldi	r24, 0x5C	; 92
    11a0:	98 e0       	ldi	r25, 0x08	; 8
    11a2:	0e 94 58 19 	call	0x32b0	; 0x32b0 <Timer1_setCallBack>
    11a6:	09 c0       	rjmp	.+18     	; 0x11ba <timer1delay+0xac>
		break;
	case 18:
		Timer1_setCallBack(sec_18);
    11a8:	84 e4       	ldi	r24, 0x44	; 68
    11aa:	98 e0       	ldi	r25, 0x08	; 8
    11ac:	0e 94 58 19 	call	0x32b0	; 0x32b0 <Timer1_setCallBack>
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <timer1delay+0xac>
		break;
	case 60:
		Timer1_setCallBack(sec_60);
    11b2:	80 e7       	ldi	r24, 0x70	; 112
    11b4:	98 e0       	ldi	r25, 0x08	; 8
    11b6:	0e 94 58 19 	call	0x32b0	; 0x32b0 <Timer1_setCallBack>
		break;

	}

}
    11ba:	2e 96       	adiw	r28, 0x0e	; 14
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <main>:

int main(){
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	c5 57       	subi	r28, 0x75	; 117
    11da:	d0 40       	sbci	r29, 0x00	; 0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61

	SREG|=(1<<7);
    11e6:	af e5       	ldi	r26, 0x5F	; 95
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ef e5       	ldi	r30, 0x5F	; 95
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	8c 93       	st	X, r24

	LCD_init();
    11f4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_init>

	UART_ConfigType config={d_8bit,disable,one_bit,9600};
    11f8:	ce 01       	movw	r24, r28
    11fa:	86 59       	subi	r24, 0x96	; 150
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	e3 96       	adiw	r28, 0x33	; 51
    1200:	9f af       	std	Y+63, r25	; 0x3f
    1202:	8e af       	std	Y+62, r24	; 0x3e
    1204:	e3 97       	sbiw	r28, 0x33	; 51
    1206:	8d ef       	ldi	r24, 0xFD	; 253
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	e5 96       	adiw	r28, 0x35	; 53
    120c:	9f af       	std	Y+63, r25	; 0x3f
    120e:	8e af       	std	Y+62, r24	; 0x3e
    1210:	e5 97       	sbiw	r28, 0x35	; 53
    1212:	97 e0       	ldi	r25, 0x07	; 7
    1214:	e6 96       	adiw	r28, 0x36	; 54
    1216:	9f af       	std	Y+63, r25	; 0x3f
    1218:	e6 97       	sbiw	r28, 0x36	; 54
    121a:	e5 96       	adiw	r28, 0x35	; 53
    121c:	ee ad       	ldd	r30, Y+62	; 0x3e
    121e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1220:	e5 97       	sbiw	r28, 0x35	; 53
    1222:	00 80       	ld	r0, Z
    1224:	e5 96       	adiw	r28, 0x35	; 53
    1226:	8e ad       	ldd	r24, Y+62	; 0x3e
    1228:	9f ad       	ldd	r25, Y+63	; 0x3f
    122a:	e5 97       	sbiw	r28, 0x35	; 53
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	e5 96       	adiw	r28, 0x35	; 53
    1230:	9f af       	std	Y+63, r25	; 0x3f
    1232:	8e af       	std	Y+62, r24	; 0x3e
    1234:	e5 97       	sbiw	r28, 0x35	; 53
    1236:	e3 96       	adiw	r28, 0x33	; 51
    1238:	ee ad       	ldd	r30, Y+62	; 0x3e
    123a:	ff ad       	ldd	r31, Y+63	; 0x3f
    123c:	e3 97       	sbiw	r28, 0x33	; 51
    123e:	00 82       	st	Z, r0
    1240:	e3 96       	adiw	r28, 0x33	; 51
    1242:	8e ad       	ldd	r24, Y+62	; 0x3e
    1244:	9f ad       	ldd	r25, Y+63	; 0x3f
    1246:	e3 97       	sbiw	r28, 0x33	; 51
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	e3 96       	adiw	r28, 0x33	; 51
    124c:	9f af       	std	Y+63, r25	; 0x3f
    124e:	8e af       	std	Y+62, r24	; 0x3e
    1250:	e3 97       	sbiw	r28, 0x33	; 51
    1252:	e6 96       	adiw	r28, 0x36	; 54
    1254:	9f ad       	ldd	r25, Y+63	; 0x3f
    1256:	e6 97       	sbiw	r28, 0x36	; 54
    1258:	91 50       	subi	r25, 0x01	; 1
    125a:	e6 96       	adiw	r28, 0x36	; 54
    125c:	9f af       	std	Y+63, r25	; 0x3f
    125e:	e6 97       	sbiw	r28, 0x36	; 54
    1260:	e6 96       	adiw	r28, 0x36	; 54
    1262:	ef ad       	ldd	r30, Y+63	; 0x3f
    1264:	e6 97       	sbiw	r28, 0x36	; 54
    1266:	ee 23       	and	r30, r30
    1268:	c1 f6       	brne	.-80     	; 0x121a <main+0x4e>

	UART_init(&config);
    126a:	ce 01       	movw	r24, r28
    126c:	86 59       	subi	r24, 0x96	; 150
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_init>

	uint8 status=failed;
    1274:	fe 01       	movw	r30, r28
    1276:	e7 59       	subi	r30, 0x97	; 151
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	10 82       	st	Z, r1
		uint8 choose;
		uint8 f=0;
    127c:	fe 01       	movw	r30, r28
    127e:	e9 59       	subi	r30, 0x99	; 153
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	10 82       	st	Z, r1
		uint8 state;
		uint8 i=0;
    1284:	fe 01       	movw	r30, r28
    1286:	eb 59       	subi	r30, 0x9B	; 155
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	10 82       	st	Z, r1
		 uint8 statx ;
		 uint8 staty=failed;
    128c:	fe 01       	movw	r30, r28
    128e:	ed 59       	subi	r30, 0x9D	; 157
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	10 82       	st	Z, r1
    1294:	d4 c0       	rjmp	.+424    	; 0x143e <main+0x272>

/*
 * to create pass*/
	while(status== failed){

		Create_password(pass, pass2);
    1296:	87 e0       	ldi	r24, 0x07	; 7
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	2d e0       	ldi	r18, 0x0D	; 13
    129c:	31 e0       	ldi	r19, 0x01	; 1
    129e:	b9 01       	movw	r22, r18
    12a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Create_password>

		send_password(pass, pass2);
    12a4:	87 e0       	ldi	r24, 0x07	; 7
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	2d e0       	ldi	r18, 0x0D	; 13
    12aa:	31 e0       	ldi	r19, 0x01	; 1
    12ac:	b9 01       	movw	r22, r18
    12ae:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <send_password>
		status=UART_recieveByte();
    12b2:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <UART_recieveByte>
    12b6:	fe 01       	movw	r30, r28
    12b8:	e7 59       	subi	r30, 0x97	; 151
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 83       	st	Z, r24


		if (status == failed){
    12be:	fe 01       	movw	r30, r28
    12c0:	e7 59       	subi	r30, 0x97	; 151
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	80 81       	ld	r24, Z
    12c6:	88 23       	and	r24, r24
    12c8:	09 f0       	breq	.+2      	; 0x12cc <main+0x100>
    12ca:	b9 c0       	rjmp	.+370    	; 0x143e <main+0x272>

			LCD_displayString("unMatched");
    12cc:	8e e9       	ldi	r24, 0x9E	; 158
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
    12d4:	fe 01       	movw	r30, r28
    12d6:	e1 5a       	subi	r30, 0xA1	; 161
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e8       	ldi	r25, 0x80	; 128
    12de:	ab eb       	ldi	r26, 0xBB	; 187
    12e0:	b4 e4       	ldi	r27, 0x44	; 68
    12e2:	80 83       	st	Z, r24
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	a2 83       	std	Z+2, r26	; 0x02
    12e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ea:	8e 01       	movw	r16, r28
    12ec:	05 5a       	subi	r16, 0xA5	; 165
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	fe 01       	movw	r30, r28
    12f2:	e1 5a       	subi	r30, 0xA1	; 161
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	60 81       	ld	r22, Z
    12f8:	71 81       	ldd	r23, Z+1	; 0x01
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	4a ef       	ldi	r20, 0xFA	; 250
    1304:	54 e4       	ldi	r21, 0x44	; 68
    1306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	f8 01       	movw	r30, r16
    1310:	80 83       	st	Z, r24
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	a2 83       	std	Z+2, r26	; 0x02
    1316:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1318:	fe 01       	movw	r30, r28
    131a:	e5 5a       	subi	r30, 0xA5	; 165
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	60 81       	ld	r22, Z
    1320:	71 81       	ldd	r23, Z+1	; 0x01
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1332:	88 23       	and	r24, r24
    1334:	44 f4       	brge	.+16     	; 0x1346 <main+0x17a>
		__ticks = 1;
    1336:	fe 01       	movw	r30, r28
    1338:	e7 5a       	subi	r30, 0xA7	; 167
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
    1344:	64 c0       	rjmp	.+200    	; 0x140e <main+0x242>
	else if (__tmp > 65535)
    1346:	fe 01       	movw	r30, r28
    1348:	e5 5a       	subi	r30, 0xA5	; 165
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	3f ef       	ldi	r19, 0xFF	; 255
    1358:	4f e7       	ldi	r20, 0x7F	; 127
    135a:	57 e4       	ldi	r21, 0x47	; 71
    135c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1360:	18 16       	cp	r1, r24
    1362:	0c f0       	brlt	.+2      	; 0x1366 <main+0x19a>
    1364:	43 c0       	rjmp	.+134    	; 0x13ec <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1366:	fe 01       	movw	r30, r28
    1368:	e1 5a       	subi	r30, 0xA1	; 161
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	93 81       	ldd	r25, Z+3	; 0x03
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e2       	ldi	r20, 0x20	; 32
    137a:	51 e4       	ldi	r21, 0x41	; 65
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	8e 01       	movw	r16, r28
    1386:	07 5a       	subi	r16, 0xA7	; 167
    1388:	1f 4f       	sbci	r17, 0xFF	; 255
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	f8 01       	movw	r30, r16
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
    139c:	1f c0       	rjmp	.+62     	; 0x13dc <main+0x210>
    139e:	fe 01       	movw	r30, r28
    13a0:	e9 5a       	subi	r30, 0xA9	; 169
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	88 ec       	ldi	r24, 0xC8	; 200
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
    13ac:	fe 01       	movw	r30, r28
    13ae:	e9 5a       	subi	r30, 0xA9	; 169
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <main+0x1ea>
    13ba:	fe 01       	movw	r30, r28
    13bc:	e9 5a       	subi	r30, 0xA9	; 169
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	91 83       	std	Z+1, r25	; 0x01
    13c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c4:	de 01       	movw	r26, r28
    13c6:	a7 5a       	subi	r26, 0xA7	; 167
    13c8:	bf 4f       	sbci	r27, 0xFF	; 255
    13ca:	fe 01       	movw	r30, r28
    13cc:	e7 5a       	subi	r30, 0xA7	; 167
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	9c 93       	st	X, r25
    13da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13dc:	fe 01       	movw	r30, r28
    13de:	e7 5a       	subi	r30, 0xA7	; 167
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	d1 f6       	brne	.-76     	; 0x139e <main+0x1d2>
    13ea:	27 c0       	rjmp	.+78     	; 0x143a <main+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ec:	8e 01       	movw	r16, r28
    13ee:	07 5a       	subi	r16, 0xA7	; 167
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	fe 01       	movw	r30, r28
    13f4:	e5 5a       	subi	r30, 0xA5	; 165
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	f8 01       	movw	r30, r16
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
    140e:	de 01       	movw	r26, r28
    1410:	ab 5a       	subi	r26, 0xAB	; 171
    1412:	bf 4f       	sbci	r27, 0xFF	; 255
    1414:	fe 01       	movw	r30, r28
    1416:	e7 5a       	subi	r30, 0xA7	; 167
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	8d 93       	st	X+, r24
    1420:	9c 93       	st	X, r25
    1422:	fe 01       	movw	r30, r28
    1424:	eb 5a       	subi	r30, 0xAB	; 171
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	f1 f7       	brne	.-4      	; 0x142c <main+0x260>
    1430:	fe 01       	movw	r30, r28
    1432:	eb 5a       	subi	r30, 0xAB	; 171
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24


			_delay_ms(1500);

			LCD_clearScreen();
    143a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
		 uint8 statx ;
		 uint8 staty=failed;

/*
 * to create pass*/
	while(status== failed){
    143e:	fe 01       	movw	r30, r28
    1440:	e7 59       	subi	r30, 0x97	; 151
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	80 81       	ld	r24, Z
    1446:	88 23       	and	r24, r24
    1448:	09 f4       	brne	.+2      	; 0x144c <main+0x280>
    144a:	25 cf       	rjmp	.-438    	; 0x1296 <main+0xca>

	}


	while(1){
		LCD_clearScreen();
    144c:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
    1450:	88 ea       	ldi	r24, 0xA8	; 168
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    1458:	26 eb       	ldi	r18, 0xB6	; 182
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	a9 01       	movw	r20, r18
    1462:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_displayStringRowColumn>
		choose = KEYPAD_getPressedKey();
    1466:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
    146a:	fe 01       	movw	r30, r28
    146c:	e8 59       	subi	r30, 0x98	; 152
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 83       	st	Z, r24

		if(choose=='+'){
    1472:	fe 01       	movw	r30, r28
    1474:	e8 59       	subi	r30, 0x98	; 152
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	8b 32       	cpi	r24, 0x2B	; 43
    147c:	09 f0       	breq	.+2      	; 0x1480 <main+0x2b4>
    147e:	d6 c1       	rjmp	.+940    	; 0x182c <main+0x660>

			f=0;
    1480:	fe 01       	movw	r30, r28
    1482:	e9 59       	subi	r30, 0x99	; 153
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	10 82       	st	Z, r1
    1488:	ae c1       	rjmp	.+860    	; 0x17e6 <main+0x61a>
			while(f<3){

				LCD_clearScreen();
    148a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
    148e:	fe 01       	movw	r30, r28
    1490:	ef 5a       	subi	r30, 0xAF	; 175
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a8 e4       	ldi	r26, 0x48	; 72
    149a:	b3 e4       	ldi	r27, 0x43	; 67
    149c:	80 83       	st	Z, r24
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	a2 83       	std	Z+2, r26	; 0x02
    14a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	8e 01       	movw	r16, r28
    14a6:	03 5b       	subi	r16, 0xB3	; 179
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	fe 01       	movw	r30, r28
    14ac:	ef 5a       	subi	r30, 0xAF	; 175
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	4a ef       	ldi	r20, 0xFA	; 250
    14be:	54 e4       	ldi	r21, 0x44	; 68
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	f8 01       	movw	r30, r16
    14ca:	80 83       	st	Z, r24
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	a2 83       	std	Z+2, r26	; 0x02
    14d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d2:	fe 01       	movw	r30, r28
    14d4:	e3 5b       	subi	r30, 0xB3	; 179
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	60 81       	ld	r22, Z
    14da:	71 81       	ldd	r23, Z+1	; 0x01
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	44 f4       	brge	.+16     	; 0x1500 <main+0x334>
		__ticks = 1;
    14f0:	fe 01       	movw	r30, r28
    14f2:	e5 5b       	subi	r30, 0xB5	; 181
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	80 83       	st	Z, r24
    14fe:	64 c0       	rjmp	.+200    	; 0x15c8 <main+0x3fc>
	else if (__tmp > 65535)
    1500:	fe 01       	movw	r30, r28
    1502:	e3 5b       	subi	r30, 0xB3	; 179
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	82 81       	ldd	r24, Z+2	; 0x02
    150c:	93 81       	ldd	r25, Z+3	; 0x03
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	3f ef       	ldi	r19, 0xFF	; 255
    1512:	4f e7       	ldi	r20, 0x7F	; 127
    1514:	57 e4       	ldi	r21, 0x47	; 71
    1516:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    151a:	18 16       	cp	r1, r24
    151c:	0c f0       	brlt	.+2      	; 0x1520 <main+0x354>
    151e:	43 c0       	rjmp	.+134    	; 0x15a6 <main+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	fe 01       	movw	r30, r28
    1522:	ef 5a       	subi	r30, 0xAF	; 175
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e2       	ldi	r20, 0x20	; 32
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8e 01       	movw	r16, r28
    1540:	05 5b       	subi	r16, 0xB5	; 181
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	f8 01       	movw	r30, r16
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	1f c0       	rjmp	.+62     	; 0x1596 <main+0x3ca>
    1558:	fe 01       	movw	r30, r28
    155a:	e7 5b       	subi	r30, 0xB7	; 183
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	88 ec       	ldi	r24, 0xC8	; 200
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    1566:	fe 01       	movw	r30, r28
    1568:	e7 5b       	subi	r30, 0xB7	; 183
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <main+0x3a4>
    1574:	fe 01       	movw	r30, r28
    1576:	e7 5b       	subi	r30, 0xB7	; 183
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157e:	de 01       	movw	r26, r28
    1580:	a5 5b       	subi	r26, 0xB5	; 181
    1582:	bf 4f       	sbci	r27, 0xFF	; 255
    1584:	fe 01       	movw	r30, r28
    1586:	e5 5b       	subi	r30, 0xB5	; 181
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	11 96       	adiw	r26, 0x01	; 1
    1592:	9c 93       	st	X, r25
    1594:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1596:	fe 01       	movw	r30, r28
    1598:	e5 5b       	subi	r30, 0xB5	; 181
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	d1 f6       	brne	.-76     	; 0x1558 <main+0x38c>
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <main+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a6:	8e 01       	movw	r16, r28
    15a8:	05 5b       	subi	r16, 0xB5	; 181
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	fe 01       	movw	r30, r28
    15ae:	e3 5b       	subi	r30, 0xB3	; 179
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	f8 01       	movw	r30, r16
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	80 83       	st	Z, r24
    15c8:	de 01       	movw	r26, r28
    15ca:	a9 5b       	subi	r26, 0xB9	; 185
    15cc:	bf 4f       	sbci	r27, 0xFF	; 255
    15ce:	fe 01       	movw	r30, r28
    15d0:	e5 5b       	subi	r30, 0xB5	; 181
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	8d 93       	st	X+, r24
    15da:	9c 93       	st	X, r25
    15dc:	fe 01       	movw	r30, r28
    15de:	e9 5b       	subi	r30, 0xB9	; 185
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <main+0x41a>
    15ea:	fe 01       	movw	r30, r28
    15ec:	e9 5b       	subi	r30, 0xB9	; 185
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
				_delay_ms(200);
				LCD_displayString("plz enter Pass: ");
    15f4:	86 ec       	ldi	r24, 0xC6	; 198
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
				LCD_moveCursor(1, 0);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	0e 94 01 18 	call	0x3002	; 0x3002 <LCD_moveCursor>
		//		 temp=KEYPAD_getPressedKey();

					for( i=0;i<5;)
    1604:	fe 01       	movw	r30, r28
    1606:	eb 59       	subi	r30, 0x9B	; 155
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	10 82       	st	Z, r1
    160c:	a6 c0       	rjmp	.+332    	; 0x175a <main+0x58e>
					{
						temp=KEYPAD_getPressedKey();
    160e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
    1612:	80 93 0c 01 	sts	0x010C, r24
						if( (temp>= 0 && temp<= 9) )
    1616:	80 91 0c 01 	lds	r24, 0x010C
    161a:	8a 30       	cpi	r24, 0x0A	; 10
    161c:	08 f0       	brcs	.+2      	; 0x1620 <main+0x454>
    161e:	9d c0       	rjmp	.+314    	; 0x175a <main+0x58e>
						{

								pass[i]=temp;
    1620:	fe 01       	movw	r30, r28
    1622:	eb 59       	subi	r30, 0x9B	; 155
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	80 81       	ld	r24, Z
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	20 91 0c 01 	lds	r18, 0x010C
    1630:	fc 01       	movw	r30, r24
    1632:	e9 5f       	subi	r30, 0xF9	; 249
    1634:	fe 4f       	sbci	r31, 0xFE	; 254
    1636:	20 83       	st	Z, r18
//								LCD_intgerToString(pass[i]);
								LCD_displayCharacter('*');
    1638:	8a e2       	ldi	r24, 0x2A	; 42
    163a:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_displayCharacter>

								i++;
    163e:	de 01       	movw	r26, r28
    1640:	ab 59       	subi	r26, 0x9B	; 155
    1642:	bf 4f       	sbci	r27, 0xFF	; 255
    1644:	fe 01       	movw	r30, r28
    1646:	eb 59       	subi	r30, 0x9B	; 155
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	8c 93       	st	X, r24
    1650:	fe 01       	movw	r30, r28
    1652:	ed 5b       	subi	r30, 0xBD	; 189
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	aa ef       	ldi	r26, 0xFA	; 250
    165c:	b3 e4       	ldi	r27, 0x43	; 67
    165e:	80 83       	st	Z, r24
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	a2 83       	std	Z+2, r26	; 0x02
    1664:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	8e 01       	movw	r16, r28
    1668:	01 5c       	subi	r16, 0xC1	; 193
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	fe 01       	movw	r30, r28
    166e:	ed 5b       	subi	r30, 0xBD	; 189
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4a ef       	ldi	r20, 0xFA	; 250
    1680:	54 e4       	ldi	r21, 0x44	; 68
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	f8 01       	movw	r30, r16
    168c:	80 83       	st	Z, r24
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	a2 83       	std	Z+2, r26	; 0x02
    1692:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1694:	fe 01       	movw	r30, r28
    1696:	ff 96       	adiw	r30, 0x3f	; 63
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <main+0x4ee>
		__ticks = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9e af       	std	Y+62, r25	; 0x3e
    16b6:	8d af       	std	Y+61, r24	; 0x3d
    16b8:	46 c0       	rjmp	.+140    	; 0x1746 <main+0x57a>
	else if (__tmp > 65535)
    16ba:	fe 01       	movw	r30, r28
    16bc:	ff 96       	adiw	r30, 0x3f	; 63
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	64 f5       	brge	.+88     	; 0x172e <main+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	fe 01       	movw	r30, r28
    16d8:	ed 5b       	subi	r30, 0xBD	; 189
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9e af       	std	Y+62, r25	; 0x3e
    1702:	8d af       	std	Y+61, r24	; 0x3d
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <main+0x558>
    1706:	88 ec       	ldi	r24, 0xC8	; 200
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9c af       	std	Y+60, r25	; 0x3c
    170c:	8b af       	std	Y+59, r24	; 0x3b
    170e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1710:	9c ad       	ldd	r25, Y+60	; 0x3c
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <main+0x546>
    1716:	9c af       	std	Y+60, r25	; 0x3c
    1718:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	8d ad       	ldd	r24, Y+61	; 0x3d
    171c:	9e ad       	ldd	r25, Y+62	; 0x3e
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9e af       	std	Y+62, r25	; 0x3e
    1722:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	8d ad       	ldd	r24, Y+61	; 0x3d
    1726:	9e ad       	ldd	r25, Y+62	; 0x3e
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f7       	brne	.-38     	; 0x1706 <main+0x53a>
    172c:	16 c0       	rjmp	.+44     	; 0x175a <main+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	fe 01       	movw	r30, r28
    1730:	ff 96       	adiw	r30, 0x3f	; 63
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e af       	std	Y+62, r25	; 0x3e
    1744:	8d af       	std	Y+61, r24	; 0x3d
    1746:	8d ad       	ldd	r24, Y+61	; 0x3d
    1748:	9e ad       	ldd	r25, Y+62	; 0x3e
    174a:	9a af       	std	Y+58, r25	; 0x3a
    174c:	89 af       	std	Y+57, r24	; 0x39
    174e:	89 ad       	ldd	r24, Y+57	; 0x39
    1750:	9a ad       	ldd	r25, Y+58	; 0x3a
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <main+0x586>
    1756:	9a af       	std	Y+58, r25	; 0x3a
    1758:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(200);
				LCD_displayString("plz enter Pass: ");
				LCD_moveCursor(1, 0);
		//		 temp=KEYPAD_getPressedKey();

					for( i=0;i<5;)
    175a:	fe 01       	movw	r30, r28
    175c:	eb 59       	subi	r30, 0x9B	; 155
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	85 30       	cpi	r24, 0x05	; 5
    1764:	08 f4       	brcc	.+2      	; 0x1768 <main+0x59c>
    1766:	53 cf       	rjmp	.-346    	; 0x160e <main+0x442>

								i++;

							_delay_ms(500);
						}
					}while(KEYPAD_getPressedKey()!='=');
    1768:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
    176c:	8d 33       	cpi	r24, 0x3D	; 61
    176e:	e1 f7       	brne	.-8      	; 0x1768 <main+0x59c>
		//		c=0;
		        /* status bit to same the the pass condition if right pass or wrong */
					check_password(pass);
    1770:	87 e0       	ldi	r24, 0x07	; 7
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	0e 94 1f 08 	call	0x103e	; 0x103e <check_password>
					state = UART_recieveByte();
    1778:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <UART_recieveByte>
    177c:	fe 01       	movw	r30, r28
    177e:	ea 59       	subi	r30, 0x9A	; 154
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	80 83       	st	Z, r24

				if (state == right_pass )
    1784:	fe 01       	movw	r30, r28
    1786:	ea 59       	subi	r30, 0x9A	; 154
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	83 30       	cpi	r24, 0x03	; 3
    178e:	11 f5       	brne	.+68     	; 0x17d4 <main+0x608>
				{

					LCD_clearScreen();
    1790:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 5, "Door is");
    1794:	27 ed       	ldi	r18, 0xD7	; 215
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	65 e0       	ldi	r22, 0x05	; 5
    179c:	a9 01       	movw	r20, r18
    179e:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 4, "unlocking");
    17a2:	2f ed       	ldi	r18, 0xDF	; 223
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	64 e0       	ldi	r22, 0x04	; 4
    17aa:	a9 01       	movw	r20, r18
    17ac:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_displayStringRowColumn>

					UART_sendByte(open);
    17b0:	86 e0       	ldi	r24, 0x06	; 6
    17b2:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>
					/*send by uart to rotate the motor */
					timer1delay(18);
    17b6:	82 e1       	ldi	r24, 0x12	; 18
    17b8:	0e 94 87 08 	call	0x110e	; 0x110e <timer1delay>
					/*waiting until count reach to 18*/
					while(count!=18){}
    17bc:	80 91 04 01 	lds	r24, 0x0104
    17c0:	82 31       	cpi	r24, 0x12	; 18
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <main+0x5f0>
					timer1delay(15);
    17c4:	8f e0       	ldi	r24, 0x0F	; 15
    17c6:	0e 94 87 08 	call	0x110e	; 0x110e <timer1delay>
					/*waiting until count reach to 15*/

					while(count!=15){}
    17ca:	80 91 04 01 	lds	r24, 0x0104
    17ce:	8f 30       	cpi	r24, 0x0F	; 15
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <main+0x5fe>
    17d2:	10 c0       	rjmp	.+32     	; 0x17f4 <main+0x628>
					break;
				}
				else
				{
					f++; // increment it tell reaching 3
    17d4:	de 01       	movw	r26, r28
    17d6:	a9 59       	subi	r26, 0x99	; 153
    17d8:	bf 4f       	sbci	r27, 0xFF	; 255
    17da:	fe 01       	movw	r30, r28
    17dc:	e9 59       	subi	r30, 0x99	; 153
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	8c 93       	st	X, r24
		choose = KEYPAD_getPressedKey();

		if(choose=='+'){

			f=0;
			while(f<3){
    17e6:	fe 01       	movw	r30, r28
    17e8:	e9 59       	subi	r30, 0x99	; 153
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 81       	ld	r24, Z
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <main+0x628>
    17f2:	4b ce       	rjmp	.-874    	; 0x148a <main+0x2be>
				else
				{
					f++; // increment it tell reaching 3
				}
			}
			if(f==3){
    17f4:	fe 01       	movw	r30, r28
    17f6:	e9 59       	subi	r30, 0x99	; 153
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	83 30       	cpi	r24, 0x03	; 3
    17fe:	09 f0       	breq	.+2      	; 0x1802 <main+0x636>
    1800:	25 ce       	rjmp	.-950    	; 0x144c <main+0x280>
                 f=0;
    1802:	fe 01       	movw	r30, r28
    1804:	e9 59       	subi	r30, 0x99	; 153
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	10 82       	st	Z, r1
				LCD_clearScreen();
    180a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
				LCD_displayString("ERROR");
    180e:	89 ee       	ldi	r24, 0xE9	; 233
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
				UART_sendByte(buzzeron);
    1816:	87 e0       	ldi	r24, 0x07	; 7
    1818:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>
				timer1delay(60);
    181c:	8c e3       	ldi	r24, 0x3C	; 60
    181e:	0e 94 87 08 	call	0x110e	; 0x110e <timer1delay>
				while(count!=60){}
    1822:	80 91 04 01 	lds	r24, 0x0104
    1826:	8c 33       	cpi	r24, 0x3C	; 60
    1828:	e1 f7       	brne	.-8      	; 0x1822 <main+0x656>
    182a:	10 ce       	rjmp	.-992    	; 0x144c <main+0x280>
			}
		}

		else if(choose=='-'){
    182c:	fe 01       	movw	r30, r28
    182e:	e8 59       	subi	r30, 0x98	; 152
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	8d 32       	cpi	r24, 0x2D	; 45
    1836:	09 f0       	breq	.+2      	; 0x183a <main+0x66e>
    1838:	09 ce       	rjmp	.-1006   	; 0x144c <main+0x280>
			f=0;
    183a:	fe 01       	movw	r30, r28
    183c:	e9 59       	subi	r30, 0x99	; 153
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	10 82       	st	Z, r1
    1842:	50 c2       	rjmp	.+1184   	; 0x1ce4 <main+0xb18>
		// temp=KEYPAD_getPressedKey();

			while(f<3){

				LCD_clearScreen();
    1844:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a8 e4       	ldi	r26, 0x48	; 72
    184e:	b3 e4       	ldi	r27, 0x43	; 67
    1850:	8d ab       	std	Y+53, r24	; 0x35
    1852:	9e ab       	std	Y+54, r25	; 0x36
    1854:	af ab       	std	Y+55, r26	; 0x37
    1856:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	6d a9       	ldd	r22, Y+53	; 0x35
    185a:	7e a9       	ldd	r23, Y+54	; 0x36
    185c:	8f a9       	ldd	r24, Y+55	; 0x37
    185e:	98 ad       	ldd	r25, Y+56	; 0x38
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a ef       	ldi	r20, 0xFA	; 250
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	89 ab       	std	Y+49, r24	; 0x31
    1872:	9a ab       	std	Y+50, r25	; 0x32
    1874:	ab ab       	std	Y+51, r26	; 0x33
    1876:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1878:	69 a9       	ldd	r22, Y+49	; 0x31
    187a:	7a a9       	ldd	r23, Y+50	; 0x32
    187c:	8b a9       	ldd	r24, Y+51	; 0x33
    187e:	9c a9       	ldd	r25, Y+52	; 0x34
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <main+0x6ce>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	98 ab       	std	Y+48, r25	; 0x30
    1896:	8f a7       	std	Y+47, r24	; 0x2f
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <main+0x74c>
	else if (__tmp > 65535)
    189a:	69 a9       	ldd	r22, Y+49	; 0x31
    189c:	7a a9       	ldd	r23, Y+50	; 0x32
    189e:	8b a9       	ldd	r24, Y+51	; 0x33
    18a0:	9c a9       	ldd	r25, Y+52	; 0x34
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <main+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	6d a9       	ldd	r22, Y+53	; 0x35
    18b4:	7e a9       	ldd	r23, Y+54	; 0x36
    18b6:	8f a9       	ldd	r24, Y+55	; 0x37
    18b8:	98 ad       	ldd	r25, Y+56	; 0x38
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	98 ab       	std	Y+48, r25	; 0x30
    18d8:	8f a7       	std	Y+47, r24	; 0x2f
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <main+0x72e>
    18dc:	88 ec       	ldi	r24, 0xC8	; 200
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9e a7       	std	Y+46, r25	; 0x2e
    18e2:	8d a7       	std	Y+45, r24	; 0x2d
    18e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    18e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <main+0x71c>
    18ec:	9e a7       	std	Y+46, r25	; 0x2e
    18ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f2:	98 a9       	ldd	r25, Y+48	; 0x30
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	98 ab       	std	Y+48, r25	; 0x30
    18f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18fc:	98 a9       	ldd	r25, Y+48	; 0x30
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <main+0x710>
    1902:	14 c0       	rjmp	.+40     	; 0x192c <main+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	69 a9       	ldd	r22, Y+49	; 0x31
    1906:	7a a9       	ldd	r23, Y+50	; 0x32
    1908:	8b a9       	ldd	r24, Y+51	; 0x33
    190a:	9c a9       	ldd	r25, Y+52	; 0x34
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	98 ab       	std	Y+48, r25	; 0x30
    1916:	8f a7       	std	Y+47, r24	; 0x2f
    1918:	8f a5       	ldd	r24, Y+47	; 0x2f
    191a:	98 a9       	ldd	r25, Y+48	; 0x30
    191c:	9c a7       	std	Y+44, r25	; 0x2c
    191e:	8b a7       	std	Y+43, r24	; 0x2b
    1920:	8b a5       	ldd	r24, Y+43	; 0x2b
    1922:	9c a5       	ldd	r25, Y+44	; 0x2c
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <main+0x758>
    1928:	9c a7       	std	Y+44, r25	; 0x2c
    192a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(200);
				LCD_displayString("plz enter Pass: ");
    192c:	86 ec       	ldi	r24, 0xC6	; 198
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	0e 94 01 18 	call	0x3002	; 0x3002 <LCD_moveCursor>

				for( i=0;i<5;)
    193c:	fe 01       	movw	r30, r28
    193e:	eb 59       	subi	r30, 0x9B	; 155
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	10 82       	st	Z, r1
    1944:	93 c0       	rjmp	.+294    	; 0x1a6c <main+0x8a0>
				{
					temp=KEYPAD_getPressedKey();
    1946:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
    194a:	80 93 0c 01 	sts	0x010C, r24
					if( (temp>= 0 && temp<= 9) )
    194e:	80 91 0c 01 	lds	r24, 0x010C
    1952:	8a 30       	cpi	r24, 0x0A	; 10
    1954:	08 f0       	brcs	.+2      	; 0x1958 <main+0x78c>
    1956:	8a c0       	rjmp	.+276    	; 0x1a6c <main+0x8a0>
					{

							pass[i]=temp;
    1958:	fe 01       	movw	r30, r28
    195a:	eb 59       	subi	r30, 0x9B	; 155
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	20 91 0c 01 	lds	r18, 0x010C
    1968:	fc 01       	movw	r30, r24
    196a:	e9 5f       	subi	r30, 0xF9	; 249
    196c:	fe 4f       	sbci	r31, 0xFE	; 254
    196e:	20 83       	st	Z, r18
//							LCD_intgerToString(pass[i]);
							LCD_displayCharacter('*');
    1970:	8a e2       	ldi	r24, 0x2A	; 42
    1972:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_displayCharacter>

							i++;
    1976:	de 01       	movw	r26, r28
    1978:	ab 59       	subi	r26, 0x9B	; 155
    197a:	bf 4f       	sbci	r27, 0xFF	; 255
    197c:	fe 01       	movw	r30, r28
    197e:	eb 59       	subi	r30, 0x9B	; 155
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	80 81       	ld	r24, Z
    1984:	8f 5f       	subi	r24, 0xFF	; 255
    1986:	8c 93       	st	X, r24
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	aa ef       	ldi	r26, 0xFA	; 250
    198e:	b3 e4       	ldi	r27, 0x43	; 67
    1990:	8f a3       	std	Y+39, r24	; 0x27
    1992:	98 a7       	std	Y+40, r25	; 0x28
    1994:	a9 a7       	std	Y+41, r26	; 0x29
    1996:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1998:	6f a1       	ldd	r22, Y+39	; 0x27
    199a:	78 a5       	ldd	r23, Y+40	; 0x28
    199c:	89 a5       	ldd	r24, Y+41	; 0x29
    199e:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a ef       	ldi	r20, 0xFA	; 250
    19a6:	54 e4       	ldi	r21, 0x44	; 68
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8b a3       	std	Y+35, r24	; 0x23
    19b2:	9c a3       	std	Y+36, r25	; 0x24
    19b4:	ad a3       	std	Y+37, r26	; 0x25
    19b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19b8:	6b a1       	ldd	r22, Y+35	; 0x23
    19ba:	7c a1       	ldd	r23, Y+36	; 0x24
    19bc:	8d a1       	ldd	r24, Y+37	; 0x25
    19be:	9e a1       	ldd	r25, Y+38	; 0x26
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f e3       	ldi	r21, 0x3F	; 63
    19c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	2c f4       	brge	.+10     	; 0x19da <main+0x80e>
		__ticks = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9a a3       	std	Y+34, r25	; 0x22
    19d6:	89 a3       	std	Y+33, r24	; 0x21
    19d8:	3f c0       	rjmp	.+126    	; 0x1a58 <main+0x88c>
	else if (__tmp > 65535)
    19da:	6b a1       	ldd	r22, Y+35	; 0x23
    19dc:	7c a1       	ldd	r23, Y+36	; 0x24
    19de:	8d a1       	ldd	r24, Y+37	; 0x25
    19e0:	9e a1       	ldd	r25, Y+38	; 0x26
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	4c f5       	brge	.+82     	; 0x1a44 <main+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f2:	6f a1       	ldd	r22, Y+39	; 0x27
    19f4:	78 a5       	ldd	r23, Y+40	; 0x28
    19f6:	89 a5       	ldd	r24, Y+41	; 0x29
    19f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	51 e4       	ldi	r21, 0x41	; 65
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9a a3       	std	Y+34, r25	; 0x22
    1a18:	89 a3       	std	Y+33, r24	; 0x21
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <main+0x86e>
    1a1c:	88 ec       	ldi	r24, 0xC8	; 200
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	98 a3       	std	Y+32, r25	; 0x20
    1a22:	8f 8f       	std	Y+31, r24	; 0x1f
    1a24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a26:	98 a1       	ldd	r25, Y+32	; 0x20
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <main+0x85c>
    1a2c:	98 a3       	std	Y+32, r25	; 0x20
    1a2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a30:	89 a1       	ldd	r24, Y+33	; 0x21
    1a32:	9a a1       	ldd	r25, Y+34	; 0x22
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	9a a3       	std	Y+34, r25	; 0x22
    1a38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <main+0x850>
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <main+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a44:	6b a1       	ldd	r22, Y+35	; 0x23
    1a46:	7c a1       	ldd	r23, Y+36	; 0x24
    1a48:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9a a3       	std	Y+34, r25	; 0x22
    1a56:	89 a3       	std	Y+33, r24	; 0x21
    1a58:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <main+0x898>
    1a68:	9e 8f       	std	Y+30, r25	; 0x1e
    1a6a:	8d 8f       	std	Y+29, r24	; 0x1d
				LCD_clearScreen();
				_delay_ms(200);
				LCD_displayString("plz enter Pass: ");
				LCD_moveCursor(1, 0);

				for( i=0;i<5;)
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	eb 59       	subi	r30, 0x9B	; 155
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	85 30       	cpi	r24, 0x05	; 5
    1a76:	08 f4       	brcc	.+2      	; 0x1a7a <main+0x8ae>
    1a78:	66 cf       	rjmp	.-308    	; 0x1946 <main+0x77a>

							i++;

						_delay_ms(500);
					}
				}while(KEYPAD_getPressedKey()!='=');
    1a7a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <KEYPAD_getPressedKey>
    1a7e:	8d 33       	cpi	r24, 0x3D	; 61
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <main+0x8ae>
		//		c=0;


				check_password(pass);
    1a82:	87 e0       	ldi	r24, 0x07	; 7
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	0e 94 1f 08 	call	0x103e	; 0x103e <check_password>
				statx = UART_recieveByte();
    1a8a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <UART_recieveByte>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ec 59       	subi	r30, 0x9C	; 156
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 83       	st	Z, r24
				if (statx == right_pass )
    1a96:	fe 01       	movw	r30, r28
    1a98:	ec 59       	subi	r30, 0x9C	; 156
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	83 30       	cpi	r24, 0x03	; 3
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <main+0x8d8>
    1aa2:	17 c1       	rjmp	.+558    	; 0x1cd2 <main+0xb06>
    1aa4:	0a c1       	rjmp	.+532    	; 0x1cba <main+0xaee>

				{
//					staty=failed;

					while(staty== failed){
						LCD_clearScreen();
    1aa6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a8 e4       	ldi	r26, 0x48	; 72
    1ab0:	b3 e4       	ldi	r27, 0x43	; 67
    1ab2:	89 8f       	std	Y+25, r24	; 0x19
    1ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	69 8d       	ldd	r22, Y+25	; 0x19
    1abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a ef       	ldi	r20, 0xFA	; 250
    1ac8:	54 e4       	ldi	r21, 0x44	; 68
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8d 8b       	std	Y+21, r24	; 0x15
    1ad4:	9e 8b       	std	Y+22, r25	; 0x16
    1ad6:	af 8b       	std	Y+23, r26	; 0x17
    1ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ada:	6d 89       	ldd	r22, Y+21	; 0x15
    1adc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ade:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <main+0x930>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9c 8b       	std	Y+20, r25	; 0x14
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <main+0x9ae>
	else if (__tmp > 65535)
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <main+0x99a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	69 8d       	ldd	r22, Y+25	; 0x19
    1b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <main+0x990>
    1b3e:	88 ec       	ldi	r24, 0xC8	; 200
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9a 8b       	std	Y+18, r25	; 0x12
    1b44:	89 8b       	std	Y+17, r24	; 0x11
    1b46:	89 89       	ldd	r24, Y+17	; 0x11
    1b48:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <main+0x97e>
    1b4e:	9a 8b       	std	Y+18, r25	; 0x12
    1b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8b 89       	ldd	r24, Y+19	; 0x13
    1b54:	9c 89       	ldd	r25, Y+20	; 0x14
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9c 8b       	std	Y+20, r25	; 0x14
    1b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <main+0x972>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <main+0x9c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	6d 89       	ldd	r22, Y+21	; 0x15
    1b68:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9c 8b       	std	Y+20, r25	; 0x14
    1b78:	8b 8b       	std	Y+19, r24	; 0x13
    1b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7e:	98 8b       	std	Y+16, r25	; 0x10
    1b80:	8f 87       	std	Y+15, r24	; 0x0f
    1b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b84:	98 89       	ldd	r25, Y+16	; 0x10
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <main+0x9ba>
    1b8a:	98 8b       	std	Y+16, r25	; 0x10
    1b8c:	8f 87       	std	Y+15, r24	; 0x0f

						_delay_ms(200);

						Create_password(pass, pass2);
    1b8e:	87 e0       	ldi	r24, 0x07	; 7
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	2d e0       	ldi	r18, 0x0D	; 13
    1b94:	31 e0       	ldi	r19, 0x01	; 1
    1b96:	b9 01       	movw	r22, r18
    1b98:	0e 94 a3 05 	call	0xb46	; 0xb46 <Create_password>

						UART_sendByte(save_newpass);
    1b9c:	85 e0       	ldi	r24, 0x05	; 5
    1b9e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>
						 send_password(pass, pass2);
    1ba2:	87 e0       	ldi	r24, 0x07	; 7
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	2d e0       	ldi	r18, 0x0D	; 13
    1ba8:	31 e0       	ldi	r19, 0x01	; 1
    1baa:	b9 01       	movw	r22, r18
    1bac:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <send_password>
						 staty=UART_recieveByte();
    1bb0:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <UART_recieveByte>
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	ed 59       	subi	r30, 0x9D	; 157
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	80 83       	st	Z, r24
						if (staty == failed){
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ed 59       	subi	r30, 0x9D	; 157
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	88 23       	and	r24, r24
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <main+0x9fe>
    1bc8:	78 c0       	rjmp	.+240    	; 0x1cba <main+0xaee>

							LCD_displayString("unMatched");
    1bca:	8e e9       	ldi	r24, 0x9E	; 158
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	aa e7       	ldi	r26, 0x7A	; 122
    1bd8:	b4 e4       	ldi	r27, 0x44	; 68
    1bda:	8b 87       	std	Y+11, r24	; 0x0b
    1bdc:	9c 87       	std	Y+12, r25	; 0x0c
    1bde:	ad 87       	std	Y+13, r26	; 0x0d
    1be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a ef       	ldi	r20, 0xFA	; 250
    1bf0:	54 e4       	ldi	r21, 0x44	; 68
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8f 83       	std	Y+7, r24	; 0x07
    1bfc:	98 87       	std	Y+8, r25	; 0x08
    1bfe:	a9 87       	std	Y+9, r26	; 0x09
    1c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <main+0xa58>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <main+0xad6>
	else if (__tmp > 65535)
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <main+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	51 e4       	ldi	r21, 0x41	; 65
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <main+0xab8>
    1c66:	88 ec       	ldi	r24, 0xC8	; 200
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <main+0xaa6>
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <main+0xa9a>
    1c8c:	14 c0       	rjmp	.+40     	; 0x1cb6 <main+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <main+0xae2>
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01

							_delay_ms(1000);

							LCD_clearScreen();
    1cb6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>
				if (statx == right_pass )

				{
//					staty=failed;

					while(staty== failed){
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ed 59       	subi	r30, 0x9D	; 157
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <main+0xafc>
    1cc6:	ef ce       	rjmp	.-546    	; 0x1aa6 <main+0x8da>

							LCD_clearScreen();

						}
					}
					staty=failed;
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ed 59       	subi	r30, 0x9D	; 157
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	10 82       	st	Z, r1
    1cd0:	10 c0       	rjmp	.+32     	; 0x1cf2 <main+0xb26>
					break;
				}
				else
				{
					f++;
    1cd2:	de 01       	movw	r26, r28
    1cd4:	a9 59       	subi	r26, 0x99	; 153
    1cd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e9 59       	subi	r30, 0x99	; 153
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 81       	ld	r24, Z
    1ce0:	8f 5f       	subi	r24, 0xFF	; 255
    1ce2:	8c 93       	st	X, r24

		else if(choose=='-'){
			f=0;
		// temp=KEYPAD_getPressedKey();

			while(f<3){
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e9 59       	subi	r30, 0x99	; 153
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 81       	ld	r24, Z
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	08 f4       	brcc	.+2      	; 0x1cf2 <main+0xb26>
    1cf0:	a9 cd       	rjmp	.-1198   	; 0x1844 <main+0x678>
				else
				{
					f++;
				}
			}
			if(f==3){
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e9 59       	subi	r30, 0x99	; 153
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <main+0xb34>
    1cfe:	a6 cb       	rjmp	.-2228   	; 0x144c <main+0x280>
				f=0;
    1d00:	fe 01       	movw	r30, r28
    1d02:	e9 59       	subi	r30, 0x99	; 153
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	10 82       	st	Z, r1
				LCD_clearScreen();
    1d08:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_clearScreen>

				LCD_displayString("ERROR");
    1d0c:	89 ee       	ldi	r24, 0xE9	; 233
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>

				UART_sendByte(buzzeron);
    1d14:	87 e0       	ldi	r24, 0x07	; 7
    1d16:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>

				timer1delay(60);
    1d1a:	8c e3       	ldi	r24, 0x3C	; 60
    1d1c:	0e 94 87 08 	call	0x110e	; 0x110e <timer1delay>

				while(count!=60){}
    1d20:	80 91 04 01 	lds	r24, 0x0104
    1d24:	8c 33       	cpi	r24, 0x3C	; 60
    1d26:	e1 f7       	brne	.-8      	; 0x1d20 <main+0xb54>
    1d28:	91 cb       	rjmp	.-2270   	; 0x144c <main+0x280>

00001d2a <GPIO_setupPinDirection>:
#include "common_macros.h" /* To use the macros like SET_BIT */
#include "avr/io.h" /* To use the IO Ports Registers */


void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <GPIO_setupPinDirection+0x6>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <GPIO_setupPinDirection+0x8>
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	6a 83       	std	Y+2, r22	; 0x02
    1d3c:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	88 30       	cpi	r24, 0x08	; 8
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <GPIO_setupPinDirection+0x1c>
    1d44:	d5 c0       	rjmp	.+426    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	84 30       	cpi	r24, 0x04	; 4
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <GPIO_setupPinDirection+0x24>
    1d4c:	d1 c0       	rjmp	.+418    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	3d 83       	std	Y+5, r19	; 0x05
    1d56:	2c 83       	std	Y+4, r18	; 0x04
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <GPIO_setupPinDirection+0x3a>
    1d62:	43 c0       	rjmp	.+134    	; 0x1dea <GPIO_setupPinDirection+0xc0>
    1d64:	2c 81       	ldd	r18, Y+4	; 0x04
    1d66:	3d 81       	ldd	r19, Y+5	; 0x05
    1d68:	22 30       	cpi	r18, 0x02	; 2
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <GPIO_setupPinDirection+0x4e>
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	71 f0       	breq	.+28     	; 0x1d92 <GPIO_setupPinDirection+0x68>
    1d76:	bc c0       	rjmp	.+376    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
    1d78:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7c:	22 30       	cpi	r18, 0x02	; 2
    1d7e:	31 05       	cpc	r19, r1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <GPIO_setupPinDirection+0x5a>
    1d82:	5f c0       	rjmp	.+190    	; 0x1e42 <GPIO_setupPinDirection+0x118>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <GPIO_setupPinDirection+0x66>
    1d8e:	85 c0       	rjmp	.+266    	; 0x1e9a <GPIO_setupPinDirection+0x170>
    1d90:	af c0       	rjmp	.+350    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	a1 f4       	brne	.+40     	; 0x1dc0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d98:	aa e3       	ldi	r26, 0x3A	; 58
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ea e3       	ldi	r30, 0x3A	; 58
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <GPIO_setupPinDirection+0x8c>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <GPIO_setupPinDirection+0x88>
    1dba:	84 2b       	or	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	98 c0       	rjmp	.+304    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1dc0:	aa e3       	ldi	r26, 0x3A	; 58
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ea e3       	ldi	r30, 0x3A	; 58
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <GPIO_setupPinDirection+0xb4>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <GPIO_setupPinDirection+0xb0>
    1de2:	80 95       	com	r24
    1de4:	84 23       	and	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	83 c0       	rjmp	.+262    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	a1 f4       	brne	.+40     	; 0x1e18 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1df0:	a7 e3       	ldi	r26, 0x37	; 55
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e7 e3       	ldi	r30, 0x37	; 55
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <GPIO_setupPinDirection+0xe4>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <GPIO_setupPinDirection+0xe0>
    1e12:	84 2b       	or	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	6c c0       	rjmp	.+216    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e18:	a7 e3       	ldi	r26, 0x37	; 55
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e7 e3       	ldi	r30, 0x37	; 55
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <GPIO_setupPinDirection+0x10c>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <GPIO_setupPinDirection+0x108>
    1e3a:	80 95       	com	r24
    1e3c:	84 23       	and	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	57 c0       	rjmp	.+174    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	a1 f4       	brne	.+40     	; 0x1e70 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e48:	a4 e3       	ldi	r26, 0x34	; 52
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e4 e3       	ldi	r30, 0x34	; 52
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 2e       	mov	r0, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <GPIO_setupPinDirection+0x13c>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <GPIO_setupPinDirection+0x138>
    1e6a:	84 2b       	or	r24, r20
    1e6c:	8c 93       	st	X, r24
    1e6e:	40 c0       	rjmp	.+128    	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e70:	a4 e3       	ldi	r26, 0x34	; 52
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e4 e3       	ldi	r30, 0x34	; 52
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 2e       	mov	r0, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <GPIO_setupPinDirection+0x164>
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <GPIO_setupPinDirection+0x160>
    1e92:	80 95       	com	r24
    1e94:	84 23       	and	r24, r20
    1e96:	8c 93       	st	X, r24
    1e98:	2b c0       	rjmp	.+86     	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	a1 f4       	brne	.+40     	; 0x1ec8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ea0:	a1 e3       	ldi	r26, 0x31	; 49
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e1 e3       	ldi	r30, 0x31	; 49
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <GPIO_setupPinDirection+0x194>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <GPIO_setupPinDirection+0x190>
    1ec2:	84 2b       	or	r24, r20
    1ec4:	8c 93       	st	X, r24
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ec8:	a1 e3       	ldi	r26, 0x31	; 49
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e1 e3       	ldi	r30, 0x31	; 49
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 2e       	mov	r0, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <GPIO_setupPinDirection+0x1bc>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	0a 94       	dec	r0
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <GPIO_setupPinDirection+0x1b8>
    1eea:	80 95       	com	r24
    1eec:	84 23       	and	r24, r20
    1eee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <GPIO_writePin>:


void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <GPIO_writePin+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <GPIO_writePin+0x8>
    1f08:	0f 92       	push	r0
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	6a 83       	std	Y+2, r22	; 0x02
    1f12:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	88 30       	cpi	r24, 0x08	; 8
    1f18:	08 f0       	brcs	.+2      	; 0x1f1c <GPIO_writePin+0x1c>
    1f1a:	d5 c0       	rjmp	.+426    	; 0x20c6 <GPIO_writePin+0x1c6>
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	84 30       	cpi	r24, 0x04	; 4
    1f20:	08 f0       	brcs	.+2      	; 0x1f24 <GPIO_writePin+0x24>
    1f22:	d1 c0       	rjmp	.+418    	; 0x20c6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	3d 83       	std	Y+5, r19	; 0x05
    1f2c:	2c 83       	std	Y+4, r18	; 0x04
    1f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f30:	9d 81       	ldd	r25, Y+5	; 0x05
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	91 05       	cpc	r25, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <GPIO_writePin+0x3a>
    1f38:	43 c0       	rjmp	.+134    	; 0x1fc0 <GPIO_writePin+0xc0>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <GPIO_writePin+0x4e>
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	71 f0       	breq	.+28     	; 0x1f68 <GPIO_writePin+0x68>
    1f4c:	bc c0       	rjmp	.+376    	; 0x20c6 <GPIO_writePin+0x1c6>
    1f4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f50:	3d 81       	ldd	r19, Y+5	; 0x05
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	31 05       	cpc	r19, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <GPIO_writePin+0x5a>
    1f58:	5f c0       	rjmp	.+190    	; 0x2018 <GPIO_writePin+0x118>
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5e:	83 30       	cpi	r24, 0x03	; 3
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <GPIO_writePin+0x66>
    1f64:	85 c0       	rjmp	.+266    	; 0x2070 <GPIO_writePin+0x170>
    1f66:	af c0       	rjmp	.+350    	; 0x20c6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	a1 f4       	brne	.+40     	; 0x1f96 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f6e:	ab e3       	ldi	r26, 0x3B	; 59
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	eb e3       	ldi	r30, 0x3B	; 59
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	48 2f       	mov	r20, r24
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	02 2e       	mov	r0, r18
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <GPIO_writePin+0x8c>
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	0a 94       	dec	r0
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <GPIO_writePin+0x88>
    1f90:	84 2b       	or	r24, r20
    1f92:	8c 93       	st	X, r24
    1f94:	98 c0       	rjmp	.+304    	; 0x20c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f96:	ab e3       	ldi	r26, 0x3B	; 59
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	eb e3       	ldi	r30, 0x3B	; 59
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	48 2f       	mov	r20, r24
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 2e       	mov	r0, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <GPIO_writePin+0xb4>
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	0a 94       	dec	r0
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <GPIO_writePin+0xb0>
    1fb8:	80 95       	com	r24
    1fba:	84 23       	and	r24, r20
    1fbc:	8c 93       	st	X, r24
    1fbe:	83 c0       	rjmp	.+262    	; 0x20c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	a1 f4       	brne	.+40     	; 0x1fee <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1fc6:	a8 e3       	ldi	r26, 0x38	; 56
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e8 e3       	ldi	r30, 0x38	; 56
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 2e       	mov	r0, r18
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <GPIO_writePin+0xe4>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	0a 94       	dec	r0
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <GPIO_writePin+0xe0>
    1fe8:	84 2b       	or	r24, r20
    1fea:	8c 93       	st	X, r24
    1fec:	6c c0       	rjmp	.+216    	; 0x20c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fee:	a8 e3       	ldi	r26, 0x38	; 56
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e8 e3       	ldi	r30, 0x38	; 56
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	48 2f       	mov	r20, r24
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 2e       	mov	r0, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <GPIO_writePin+0x10c>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <GPIO_writePin+0x108>
    2010:	80 95       	com	r24
    2012:	84 23       	and	r24, r20
    2014:	8c 93       	st	X, r24
    2016:	57 c0       	rjmp	.+174    	; 0x20c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	a1 f4       	brne	.+40     	; 0x2046 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    201e:	a5 e3       	ldi	r26, 0x35	; 53
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e5 e3       	ldi	r30, 0x35	; 53
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <GPIO_writePin+0x13c>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <GPIO_writePin+0x138>
    2040:	84 2b       	or	r24, r20
    2042:	8c 93       	st	X, r24
    2044:	40 c0       	rjmp	.+128    	; 0x20c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2046:	a5 e3       	ldi	r26, 0x35	; 53
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e5 e3       	ldi	r30, 0x35	; 53
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	48 2f       	mov	r20, r24
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	02 2e       	mov	r0, r18
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <GPIO_writePin+0x164>
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	0a 94       	dec	r0
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <GPIO_writePin+0x160>
    2068:	80 95       	com	r24
    206a:	84 23       	and	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	2b c0       	rjmp	.+86     	; 0x20c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	a1 f4       	brne	.+40     	; 0x209e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2076:	a2 e3       	ldi	r26, 0x32	; 50
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e2 e3       	ldi	r30, 0x32	; 50
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	48 2f       	mov	r20, r24
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 2e       	mov	r0, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <GPIO_writePin+0x194>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <GPIO_writePin+0x190>
    2098:	84 2b       	or	r24, r20
    209a:	8c 93       	st	X, r24
    209c:	14 c0       	rjmp	.+40     	; 0x20c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    209e:	a2 e3       	ldi	r26, 0x32	; 50
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e2 e3       	ldi	r30, 0x32	; 50
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	48 2f       	mov	r20, r24
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	02 2e       	mov	r0, r18
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <GPIO_writePin+0x1bc>
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	0a 94       	dec	r0
    20be:	e2 f7       	brpl	.-8      	; 0x20b8 <GPIO_writePin+0x1b8>
    20c0:	80 95       	com	r24
    20c2:	84 23       	and	r24, r20
    20c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <GPIO_readPin>:


uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <GPIO_readPin+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <GPIO_readPin+0x8>
    20de:	0f 92       	push	r0
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20e8:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	88 30       	cpi	r24, 0x08	; 8
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <GPIO_readPin+0x1c>
    20f0:	84 c0       	rjmp	.+264    	; 0x21fa <GPIO_readPin+0x124>
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	84 30       	cpi	r24, 0x04	; 4
    20f6:	08 f0       	brcs	.+2      	; 0x20fa <GPIO_readPin+0x24>
    20f8:	80 c0       	rjmp	.+256    	; 0x21fa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	3d 83       	std	Y+5, r19	; 0x05
    2102:	2c 83       	std	Y+4, r18	; 0x04
    2104:	4c 81       	ldd	r20, Y+4	; 0x04
    2106:	5d 81       	ldd	r21, Y+5	; 0x05
    2108:	41 30       	cpi	r20, 0x01	; 1
    210a:	51 05       	cpc	r21, r1
    210c:	79 f1       	breq	.+94     	; 0x216c <GPIO_readPin+0x96>
    210e:	8c 81       	ldd	r24, Y+4	; 0x04
    2110:	9d 81       	ldd	r25, Y+5	; 0x05
    2112:	82 30       	cpi	r24, 0x02	; 2
    2114:	91 05       	cpc	r25, r1
    2116:	34 f4       	brge	.+12     	; 0x2124 <GPIO_readPin+0x4e>
    2118:	2c 81       	ldd	r18, Y+4	; 0x04
    211a:	3d 81       	ldd	r19, Y+5	; 0x05
    211c:	21 15       	cp	r18, r1
    211e:	31 05       	cpc	r19, r1
    2120:	69 f0       	breq	.+26     	; 0x213c <GPIO_readPin+0x66>
    2122:	6b c0       	rjmp	.+214    	; 0x21fa <GPIO_readPin+0x124>
    2124:	4c 81       	ldd	r20, Y+4	; 0x04
    2126:	5d 81       	ldd	r21, Y+5	; 0x05
    2128:	42 30       	cpi	r20, 0x02	; 2
    212a:	51 05       	cpc	r21, r1
    212c:	b9 f1       	breq	.+110    	; 0x219c <GPIO_readPin+0xc6>
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	9d 81       	ldd	r25, Y+5	; 0x05
    2132:	83 30       	cpi	r24, 0x03	; 3
    2134:	91 05       	cpc	r25, r1
    2136:	09 f4       	brne	.+2      	; 0x213a <GPIO_readPin+0x64>
    2138:	49 c0       	rjmp	.+146    	; 0x21cc <GPIO_readPin+0xf6>
    213a:	5f c0       	rjmp	.+190    	; 0x21fa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    213c:	e9 e3       	ldi	r30, 0x39	; 57
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a9 01       	movw	r20, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <GPIO_readPin+0x7e>
    2150:	55 95       	asr	r21
    2152:	47 95       	ror	r20
    2154:	8a 95       	dec	r24
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <GPIO_readPin+0x7a>
    2158:	ca 01       	movw	r24, r20
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	90 70       	andi	r25, 0x00	; 0
    215e:	88 23       	and	r24, r24
    2160:	19 f0       	breq	.+6      	; 0x2168 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	49 c0       	rjmp	.+146    	; 0x21fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2168:	19 82       	std	Y+1, r1	; 0x01
    216a:	47 c0       	rjmp	.+142    	; 0x21fa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    216c:	e6 e3       	ldi	r30, 0x36	; 54
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a9 01       	movw	r20, r18
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <GPIO_readPin+0xae>
    2180:	55 95       	asr	r21
    2182:	47 95       	ror	r20
    2184:	8a 95       	dec	r24
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <GPIO_readPin+0xaa>
    2188:	ca 01       	movw	r24, r20
    218a:	81 70       	andi	r24, 0x01	; 1
    218c:	90 70       	andi	r25, 0x00	; 0
    218e:	88 23       	and	r24, r24
    2190:	19 f0       	breq	.+6      	; 0x2198 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	31 c0       	rjmp	.+98     	; 0x21fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	2f c0       	rjmp	.+94     	; 0x21fa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    219c:	e3 e3       	ldi	r30, 0x33	; 51
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a9 01       	movw	r20, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <GPIO_readPin+0xde>
    21b0:	55 95       	asr	r21
    21b2:	47 95       	ror	r20
    21b4:	8a 95       	dec	r24
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <GPIO_readPin+0xda>
    21b8:	ca 01       	movw	r24, r20
    21ba:	81 70       	andi	r24, 0x01	; 1
    21bc:	90 70       	andi	r25, 0x00	; 0
    21be:	88 23       	and	r24, r24
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	19 c0       	rjmp	.+50     	; 0x21fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	17 c0       	rjmp	.+46     	; 0x21fa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    21cc:	e0 e3       	ldi	r30, 0x30	; 48
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a9 01       	movw	r20, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <GPIO_readPin+0x10e>
    21e0:	55 95       	asr	r21
    21e2:	47 95       	ror	r20
    21e4:	8a 95       	dec	r24
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <GPIO_readPin+0x10a>
    21e8:	ca 01       	movw	r24, r20
    21ea:	81 70       	andi	r24, 0x01	; 1
    21ec:	90 70       	andi	r25, 0x00	; 0
    21ee:	88 23       	and	r24, r24
    21f0:	19 f0       	breq	.+6      	; 0x21f8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	01 c0       	rjmp	.+2      	; 0x21fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21f8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <GPIO_setupPortDirection>:


void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	00 d0       	rcall	.+0      	; 0x2212 <GPIO_setupPortDirection+0x6>
    2212:	00 d0       	rcall	.+0      	; 0x2214 <GPIO_setupPortDirection+0x8>
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	84 30       	cpi	r24, 0x04	; 4
    2220:	90 f5       	brcc	.+100    	; 0x2286 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	3c 83       	std	Y+4, r19	; 0x04
    222a:	2b 83       	std	Y+3, r18	; 0x03
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	91 05       	cpc	r25, r1
    2234:	d1 f0       	breq	.+52     	; 0x226a <GPIO_setupPortDirection+0x5e>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	22 30       	cpi	r18, 0x02	; 2
    223c:	31 05       	cpc	r19, r1
    223e:	2c f4       	brge	.+10     	; 0x224a <GPIO_setupPortDirection+0x3e>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	61 f0       	breq	.+24     	; 0x2260 <GPIO_setupPortDirection+0x54>
    2248:	1e c0       	rjmp	.+60     	; 0x2286 <GPIO_setupPortDirection+0x7a>
    224a:	2b 81       	ldd	r18, Y+3	; 0x03
    224c:	3c 81       	ldd	r19, Y+4	; 0x04
    224e:	22 30       	cpi	r18, 0x02	; 2
    2250:	31 05       	cpc	r19, r1
    2252:	81 f0       	breq	.+32     	; 0x2274 <GPIO_setupPortDirection+0x68>
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	83 30       	cpi	r24, 0x03	; 3
    225a:	91 05       	cpc	r25, r1
    225c:	81 f0       	breq	.+32     	; 0x227e <GPIO_setupPortDirection+0x72>
    225e:	13 c0       	rjmp	.+38     	; 0x2286 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2260:	ea e3       	ldi	r30, 0x3A	; 58
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	80 83       	st	Z, r24
    2268:	0e c0       	rjmp	.+28     	; 0x2286 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    226a:	e7 e3       	ldi	r30, 0x37	; 55
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	80 83       	st	Z, r24
    2272:	09 c0       	rjmp	.+18     	; 0x2286 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2274:	e4 e3       	ldi	r30, 0x34	; 52
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	80 83       	st	Z, r24
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    227e:	e1 e3       	ldi	r30, 0x31	; 49
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	80 83       	st	Z, r24
			break;
		}
	}
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <GPIO_writePort>:


void GPIO_writePort(uint8 port_num, uint8 value)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	00 d0       	rcall	.+0      	; 0x229a <GPIO_writePort+0x6>
    229a:	00 d0       	rcall	.+0      	; 0x229c <GPIO_writePort+0x8>
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	84 30       	cpi	r24, 0x04	; 4
    22a8:	90 f5       	brcc	.+100    	; 0x230e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3c 83       	std	Y+4, r19	; 0x04
    22b2:	2b 83       	std	Y+3, r18	; 0x03
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	91 05       	cpc	r25, r1
    22bc:	d1 f0       	breq	.+52     	; 0x22f2 <GPIO_writePort+0x5e>
    22be:	2b 81       	ldd	r18, Y+3	; 0x03
    22c0:	3c 81       	ldd	r19, Y+4	; 0x04
    22c2:	22 30       	cpi	r18, 0x02	; 2
    22c4:	31 05       	cpc	r19, r1
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <GPIO_writePort+0x3e>
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	61 f0       	breq	.+24     	; 0x22e8 <GPIO_writePort+0x54>
    22d0:	1e c0       	rjmp	.+60     	; 0x230e <GPIO_writePort+0x7a>
    22d2:	2b 81       	ldd	r18, Y+3	; 0x03
    22d4:	3c 81       	ldd	r19, Y+4	; 0x04
    22d6:	22 30       	cpi	r18, 0x02	; 2
    22d8:	31 05       	cpc	r19, r1
    22da:	81 f0       	breq	.+32     	; 0x22fc <GPIO_writePort+0x68>
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	91 05       	cpc	r25, r1
    22e4:	81 f0       	breq	.+32     	; 0x2306 <GPIO_writePort+0x72>
    22e6:	13 c0       	rjmp	.+38     	; 0x230e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22e8:	eb e3       	ldi	r30, 0x3B	; 59
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	80 83       	st	Z, r24
    22f0:	0e c0       	rjmp	.+28     	; 0x230e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22f2:	e8 e3       	ldi	r30, 0x38	; 56
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	80 83       	st	Z, r24
    22fa:	09 c0       	rjmp	.+18     	; 0x230e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22fc:	e5 e3       	ldi	r30, 0x35	; 53
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	80 83       	st	Z, r24
    2304:	04 c0       	rjmp	.+8      	; 0x230e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2306:	e2 e3       	ldi	r30, 0x32	; 50
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	80 83       	st	Z, r24
			break;
		}
	}
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <GPIO_readPort>:


uint8 GPIO_readPort(uint8 port_num)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <GPIO_readPort+0x6>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <GPIO_readPort+0x8>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    232a:	19 82       	std	Y+1, r1	; 0x01


	if(port_num >= NUM_OF_PORTS)
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	84 30       	cpi	r24, 0x04	; 4
    2330:	90 f5       	brcc	.+100    	; 0x2396 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3c 83       	std	Y+4, r19	; 0x04
    233a:	2b 83       	std	Y+3, r18	; 0x03
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	91 05       	cpc	r25, r1
    2344:	d1 f0       	breq	.+52     	; 0x237a <GPIO_readPort+0x5e>
    2346:	2b 81       	ldd	r18, Y+3	; 0x03
    2348:	3c 81       	ldd	r19, Y+4	; 0x04
    234a:	22 30       	cpi	r18, 0x02	; 2
    234c:	31 05       	cpc	r19, r1
    234e:	2c f4       	brge	.+10     	; 0x235a <GPIO_readPort+0x3e>
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	61 f0       	breq	.+24     	; 0x2370 <GPIO_readPort+0x54>
    2358:	1e c0       	rjmp	.+60     	; 0x2396 <GPIO_readPort+0x7a>
    235a:	2b 81       	ldd	r18, Y+3	; 0x03
    235c:	3c 81       	ldd	r19, Y+4	; 0x04
    235e:	22 30       	cpi	r18, 0x02	; 2
    2360:	31 05       	cpc	r19, r1
    2362:	81 f0       	breq	.+32     	; 0x2384 <GPIO_readPort+0x68>
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	83 30       	cpi	r24, 0x03	; 3
    236a:	91 05       	cpc	r25, r1
    236c:	81 f0       	breq	.+32     	; 0x238e <GPIO_readPort+0x72>
    236e:	13 c0       	rjmp	.+38     	; 0x2396 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2370:	e9 e3       	ldi	r30, 0x39	; 57
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	0e c0       	rjmp	.+28     	; 0x2396 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    237a:	e6 e3       	ldi	r30, 0x36	; 54
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	09 c0       	rjmp	.+18     	; 0x2396 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2384:	e3 e3       	ldi	r30, 0x33	; 51
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    238e:	e0 e3       	ldi	r30, 0x30	; 48
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2396:	89 81       	ldd	r24, Y+1	; 0x01
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <KEYPAD_getPressedKey>:
#endif

#endif /* STANDARD_KEYPAD */


uint8 KEYPAD_getPressedKey(void) {
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	60 97       	sbiw	r28, 0x10	; 16
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	61 e0       	ldi	r22, 0x01	; 1
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	62 e0       	ldi	r22, 0x02	; 2
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    23d8:	82 e0       	ldi	r24, 0x02	; 2
    23da:	63 e0       	ldi	r22, 0x03	; 3
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			PIN_INPUT);

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	64 e0       	ldi	r22, 0x04	; 4
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    23ec:	82 e0       	ldi	r24, 0x02	; 2
    23ee:	65 e0       	ldi	r22, 0x05	; 5
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    23f6:	82 e0       	ldi	r24, 0x02	; 2
    23f8:	66 e0       	ldi	r22, 0x06	; 6
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	67 e0       	ldi	r22, 0x07	; 7
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			PIN_INPUT);
#endif
	while (1) {
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    240a:	1f 86       	std	Y+15, r1	; 0x0f
    240c:	ab c0       	rjmp	.+342    	; 0x2564 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	6f 85       	ldd	r22, Y+15	; 0x0f
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	6f 85       	ldd	r22, Y+15	; 0x0f
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2422:	18 8a       	std	Y+16, r1	; 0x10
    2424:	22 c0       	rjmp	.+68     	; 0x246a <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    2426:	88 89       	ldd	r24, Y+16	; 0x10
    2428:	98 2f       	mov	r25, r24
    242a:	9c 5f       	subi	r25, 0xFC	; 252
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	69 2f       	mov	r22, r25
    2430:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <GPIO_readPin>
    2434:	88 23       	and	r24, r24
    2436:	b1 f4       	brne	.+44     	; 0x2464 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
					return KEYPAD_4x4_adjustKeyNumber(
    2438:	8f 85       	ldd	r24, Y+15	; 0x0f
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	98 2f       	mov	r25, r24
    2448:	88 89       	ldd	r24, Y+16	; 0x10
    244a:	89 0f       	add	r24, r25
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	0e 94 b7 12 	call	0x256e	; 0x256e <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    2452:	60 96       	adiw	r28, 0x10	; 16
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2464:	88 89       	ldd	r24, Y+16	; 0x10
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	88 8b       	std	Y+16, r24	; 0x10
    246a:	88 89       	ldd	r24, Y+16	; 0x10
    246c:	84 30       	cpi	r24, 0x04	; 4
    246e:	d8 f2       	brcs	.-74     	; 0x2426 <KEYPAD_getPressedKey+0x80>
							(row * KEYPAD_NUM_COLS) + col + 1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	6f 85       	ldd	r22, Y+15	; 0x0f
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 ea       	ldi	r26, 0xA0	; 160
    2480:	b0 e4       	ldi	r27, 0x40	; 64
    2482:	8b 87       	std	Y+11, r24	; 0x0b
    2484:	9c 87       	std	Y+12, r25	; 0x0c
    2486:	ad 87       	std	Y+13, r26	; 0x0d
    2488:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	6b 85       	ldd	r22, Y+11	; 0x0b
    248c:	7c 85       	ldd	r23, Y+12	; 0x0c
    248e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2490:	9e 85       	ldd	r25, Y+14	; 0x0e
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a ef       	ldi	r20, 0xFA	; 250
    2498:	54 e4       	ldi	r21, 0x44	; 68
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8f 83       	std	Y+7, r24	; 0x07
    24a4:	98 87       	std	Y+8, r25	; 0x08
    24a6:	a9 87       	std	Y+9, r26	; 0x09
    24a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24aa:	6f 81       	ldd	r22, Y+7	; 0x07
    24ac:	78 85       	ldd	r23, Y+8	; 0x08
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	0f c0       	rjmp	.+30     	; 0x252c <KEYPAD_getPressedKey+0x186>
    250e:	88 ec       	ldi	r24, 0xC8	; 200
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	8b 83       	std	Y+3, r24	; 0x03
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <KEYPAD_getPressedKey+0x174>
    251e:	9c 83       	std	Y+4, r25	; 0x04
    2520:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <KEYPAD_getPressedKey+0x168>
    2534:	14 c0       	rjmp	.+40     	; 0x255e <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <KEYPAD_getPressedKey+0x1b0>
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
			PIN_INPUT);
#endif
	while (1) {
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    255e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	8f 87       	std	Y+15, r24	; 0x0f
    2564:	8f 85       	ldd	r24, Y+15	; 0x0f
    2566:	84 30       	cpi	r24, 0x04	; 4
    2568:	08 f4       	brcc	.+2      	; 0x256c <KEYPAD_getPressedKey+0x1c6>
    256a:	51 cf       	rjmp	.-350    	; 0x240e <KEYPAD_getPressedKey+0x68>
    256c:	4e cf       	rjmp	.-356    	; 0x240a <KEYPAD_getPressedKey+0x64>

0000256e <KEYPAD_4x4_adjustKeyNumber>:

/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number) {
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	00 d0       	rcall	.+0      	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2574:	00 d0       	rcall	.+0      	; 0x2576 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    257c:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number) {
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	3c 83       	std	Y+4, r19	; 0x04
    2586:	2b 83       	std	Y+3, r18	; 0x03
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	88 30       	cpi	r24, 0x08	; 8
    258e:	91 05       	cpc	r25, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2592:	70 c0       	rjmp	.+224    	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2594:	2b 81       	ldd	r18, Y+3	; 0x03
    2596:	3c 81       	ldd	r19, Y+4	; 0x04
    2598:	29 30       	cpi	r18, 0x09	; 9
    259a:	31 05       	cpc	r19, r1
    259c:	5c f5       	brge	.+86     	; 0x25f4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	84 30       	cpi	r24, 0x04	; 4
    25a4:	91 05       	cpc	r25, r1
    25a6:	09 f4       	brne	.+2      	; 0x25aa <KEYPAD_4x4_adjustKeyNumber+0x3c>
    25a8:	59 c0       	rjmp	.+178    	; 0x265c <KEYPAD_4x4_adjustKeyNumber+0xee>
    25aa:	2b 81       	ldd	r18, Y+3	; 0x03
    25ac:	3c 81       	ldd	r19, Y+4	; 0x04
    25ae:	25 30       	cpi	r18, 0x05	; 5
    25b0:	31 05       	cpc	r19, r1
    25b2:	9c f4       	brge	.+38     	; 0x25da <KEYPAD_4x4_adjustKeyNumber+0x6c>
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	91 05       	cpc	r25, r1
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    25be:	48 c0       	rjmp	.+144    	; 0x2650 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    25c0:	2b 81       	ldd	r18, Y+3	; 0x03
    25c2:	3c 81       	ldd	r19, Y+4	; 0x04
    25c4:	23 30       	cpi	r18, 0x03	; 3
    25c6:	31 05       	cpc	r19, r1
    25c8:	0c f0       	brlt	.+2      	; 0x25cc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    25ca:	45 c0       	rjmp	.+138    	; 0x2656 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	81 30       	cpi	r24, 0x01	; 1
    25d2:	91 05       	cpc	r25, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    25d6:	39 c0       	rjmp	.+114    	; 0x264a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    25d8:	67 c0       	rjmp	.+206    	; 0x26a8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    25da:	2b 81       	ldd	r18, Y+3	; 0x03
    25dc:	3c 81       	ldd	r19, Y+4	; 0x04
    25de:	26 30       	cpi	r18, 0x06	; 6
    25e0:	31 05       	cpc	r19, r1
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    25e4:	41 c0       	rjmp	.+130    	; 0x2668 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	87 30       	cpi	r24, 0x07	; 7
    25ec:	91 05       	cpc	r25, r1
    25ee:	0c f0       	brlt	.+2      	; 0x25f2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    25f0:	3e c0       	rjmp	.+124    	; 0x266e <KEYPAD_4x4_adjustKeyNumber+0x100>
    25f2:	37 c0       	rjmp	.+110    	; 0x2662 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    25f4:	2b 81       	ldd	r18, Y+3	; 0x03
    25f6:	3c 81       	ldd	r19, Y+4	; 0x04
    25f8:	2c 30       	cpi	r18, 0x0C	; 12
    25fa:	31 05       	cpc	r19, r1
    25fc:	09 f4       	brne	.+2      	; 0x2600 <KEYPAD_4x4_adjustKeyNumber+0x92>
    25fe:	46 c0       	rjmp	.+140    	; 0x268c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	8d 30       	cpi	r24, 0x0D	; 13
    2606:	91 05       	cpc	r25, r1
    2608:	5c f4       	brge	.+22     	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    260a:	2b 81       	ldd	r18, Y+3	; 0x03
    260c:	3c 81       	ldd	r19, Y+4	; 0x04
    260e:	2a 30       	cpi	r18, 0x0A	; 10
    2610:	31 05       	cpc	r19, r1
    2612:	b1 f1       	breq	.+108    	; 0x2680 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	8b 30       	cpi	r24, 0x0B	; 11
    261a:	91 05       	cpc	r25, r1
    261c:	a4 f5       	brge	.+104    	; 0x2686 <KEYPAD_4x4_adjustKeyNumber+0x118>
    261e:	2d c0       	rjmp	.+90     	; 0x267a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2620:	2b 81       	ldd	r18, Y+3	; 0x03
    2622:	3c 81       	ldd	r19, Y+4	; 0x04
    2624:	2e 30       	cpi	r18, 0x0E	; 14
    2626:	31 05       	cpc	r19, r1
    2628:	b9 f1       	breq	.+110    	; 0x2698 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	8e 30       	cpi	r24, 0x0E	; 14
    2630:	91 05       	cpc	r25, r1
    2632:	7c f1       	brlt	.+94     	; 0x2692 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2634:	2b 81       	ldd	r18, Y+3	; 0x03
    2636:	3c 81       	ldd	r19, Y+4	; 0x04
    2638:	2f 30       	cpi	r18, 0x0F	; 15
    263a:	31 05       	cpc	r19, r1
    263c:	79 f1       	breq	.+94     	; 0x269c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	80 31       	cpi	r24, 0x10	; 16
    2644:	91 05       	cpc	r25, r1
    2646:	69 f1       	breq	.+90     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2648:	2f c0       	rjmp	.+94     	; 0x26a8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case 1:
		keypad_button = 7;
    264a:	87 e0       	ldi	r24, 0x07	; 7
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	2e c0       	rjmp	.+92     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    2650:	88 e0       	ldi	r24, 0x08	; 8
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	2b c0       	rjmp	.+86     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    2656:	89 e0       	ldi	r24, 0x09	; 9
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	28 c0       	rjmp	.+80     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%'; // ASCII Code of %
    265c:	85 e2       	ldi	r24, 0x25	; 37
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	25 c0       	rjmp	.+74     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    2662:	84 e0       	ldi	r24, 0x04	; 4
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	22 c0       	rjmp	.+68     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    2668:	85 e0       	ldi	r24, 0x05	; 5
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	1f c0       	rjmp	.+62     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    266e:	86 e0       	ldi	r24, 0x06	; 6
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	1c c0       	rjmp	.+56     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*'; /* ASCII Code of '*' */
    2674:	8a e2       	ldi	r24, 0x2A	; 42
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	19 c0       	rjmp	.+50     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	16 c0       	rjmp	.+44     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	13 c0       	rjmp	.+38     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    2686:	83 e0       	ldi	r24, 0x03	; 3
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	10 c0       	rjmp	.+32     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-'; /* ASCII Code of '-' */
    268c:	8d e2       	ldi	r24, 0x2D	; 45
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	0d c0       	rjmp	.+26     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 'c'; /* ASCII of Enter */
    2692:	83 e6       	ldi	r24, 0x63	; 99
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	0a c0       	rjmp	.+20     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    2698:	19 82       	std	Y+1, r1	; 0x01
    269a:	08 c0       	rjmp	.+16     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '='; /* ASCII Code of '=' */
    269c:	8d e3       	ldi	r24, 0x3D	; 61
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	05 c0       	rjmp	.+10     	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+'; /* ASCII Code of '+' */
    26a2:	8b e2       	ldi	r24, 0x2B	; 43
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <LCD_init>:
#include "lcd.h"
#include "gpio.h"


void LCD_init(void)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	2e 97       	sbiw	r28, 0x0e	; 14
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	61 e0       	ldi	r22, 0x01	; 1
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_setupPinDirection>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 ea       	ldi	r26, 0xA0	; 160
    26ea:	b1 e4       	ldi	r27, 0x41	; 65
    26ec:	8b 87       	std	Y+11, r24	; 0x0b
    26ee:	9c 87       	std	Y+12, r25	; 0x0c
    26f0:	ad 87       	std	Y+13, r26	; 0x0d
    26f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8f 83       	std	Y+7, r24	; 0x07
    270e:	98 87       	std	Y+8, r25	; 0x08
    2710:	a9 87       	std	Y+9, r26	; 0x09
    2712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <LCD_init+0x7a>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2750:	7c 85       	ldd	r23, Y+12	; 0x0c
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <LCD_init+0xda>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	9c 81       	ldd	r25, Y+4	; 0x04
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_init+0xc8>
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <LCD_init+0xbc>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_init+0x104>
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	6f ef       	ldi	r22, 0xFF	; 255
    27cc:	0e 94 06 11 	call	0x220c	; 0x220c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    27d0:	88 e3       	ldi	r24, 0x38	; 56
    27d2:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    27d6:	8c e0       	ldi	r24, 0x0C	; 12
    27d8:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <LCD_sendCommand>
}
    27e2:	2e 96       	adiw	r28, 0x0e	; 14
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	e9 97       	sbiw	r28, 0x39	; 57
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <GPIO_writePin>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e8       	ldi	r26, 0x80	; 128
    281a:	bf e3       	ldi	r27, 0x3F	; 63
    281c:	8d ab       	std	Y+53, r24	; 0x35
    281e:	9e ab       	std	Y+54, r25	; 0x36
    2820:	af ab       	std	Y+55, r26	; 0x37
    2822:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	6d a9       	ldd	r22, Y+53	; 0x35
    2826:	7e a9       	ldd	r23, Y+54	; 0x36
    2828:	8f a9       	ldd	r24, Y+55	; 0x37
    282a:	98 ad       	ldd	r25, Y+56	; 0x38
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	89 ab       	std	Y+49, r24	; 0x31
    283e:	9a ab       	std	Y+50, r25	; 0x32
    2840:	ab ab       	std	Y+51, r26	; 0x33
    2842:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2844:	69 a9       	ldd	r22, Y+49	; 0x31
    2846:	7a a9       	ldd	r23, Y+50	; 0x32
    2848:	8b a9       	ldd	r24, Y+51	; 0x33
    284a:	9c a9       	ldd	r25, Y+52	; 0x34
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <LCD_sendCommand+0x72>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	98 ab       	std	Y+48, r25	; 0x30
    2862:	8f a7       	std	Y+47, r24	; 0x2f
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2866:	69 a9       	ldd	r22, Y+49	; 0x31
    2868:	7a a9       	ldd	r23, Y+50	; 0x32
    286a:	8b a9       	ldd	r24, Y+51	; 0x33
    286c:	9c a9       	ldd	r25, Y+52	; 0x34
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	6d a9       	ldd	r22, Y+53	; 0x35
    2880:	7e a9       	ldd	r23, Y+54	; 0x36
    2882:	8f a9       	ldd	r24, Y+55	; 0x37
    2884:	98 ad       	ldd	r25, Y+56	; 0x38
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	98 ab       	std	Y+48, r25	; 0x30
    28a4:	8f a7       	std	Y+47, r24	; 0x2f
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <LCD_sendCommand+0xd2>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9e a7       	std	Y+46, r25	; 0x2e
    28ae:	8d a7       	std	Y+45, r24	; 0x2d
    28b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_sendCommand+0xc0>
    28b8:	9e a7       	std	Y+46, r25	; 0x2e
    28ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28be:	98 a9       	ldd	r25, Y+48	; 0x30
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <LCD_sendCommand+0xb4>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	69 a9       	ldd	r22, Y+49	; 0x31
    28d2:	7a a9       	ldd	r23, Y+50	; 0x32
    28d4:	8b a9       	ldd	r24, Y+51	; 0x33
    28d6:	9c a9       	ldd	r25, Y+52	; 0x34
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	98 ab       	std	Y+48, r25	; 0x30
    28e2:	8f a7       	std	Y+47, r24	; 0x2f
    28e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e6:	98 a9       	ldd	r25, Y+48	; 0x30
    28e8:	9c a7       	std	Y+44, r25	; 0x2c
    28ea:	8b a7       	std	Y+43, r24	; 0x2b
    28ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LCD_sendCommand+0xfc>
    28f4:	9c a7       	std	Y+44, r25	; 0x2c
    28f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <GPIO_writePin>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a0 e8       	ldi	r26, 0x80	; 128
    2908:	bf e3       	ldi	r27, 0x3F	; 63
    290a:	8f a3       	std	Y+39, r24	; 0x27
    290c:	98 a7       	std	Y+40, r25	; 0x28
    290e:	a9 a7       	std	Y+41, r26	; 0x29
    2910:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	6f a1       	ldd	r22, Y+39	; 0x27
    2914:	78 a5       	ldd	r23, Y+40	; 0x28
    2916:	89 a5       	ldd	r24, Y+41	; 0x29
    2918:	9a a5       	ldd	r25, Y+42	; 0x2a
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a ef       	ldi	r20, 0xFA	; 250
    2920:	54 e4       	ldi	r21, 0x44	; 68
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8b a3       	std	Y+35, r24	; 0x23
    292c:	9c a3       	std	Y+36, r25	; 0x24
    292e:	ad a3       	std	Y+37, r26	; 0x25
    2930:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2932:	6b a1       	ldd	r22, Y+35	; 0x23
    2934:	7c a1       	ldd	r23, Y+36	; 0x24
    2936:	8d a1       	ldd	r24, Y+37	; 0x25
    2938:	9e a1       	ldd	r25, Y+38	; 0x26
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <LCD_sendCommand+0x160>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9a a3       	std	Y+34, r25	; 0x22
    2950:	89 a3       	std	Y+33, r24	; 0x21
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2954:	6b a1       	ldd	r22, Y+35	; 0x23
    2956:	7c a1       	ldd	r23, Y+36	; 0x24
    2958:	8d a1       	ldd	r24, Y+37	; 0x25
    295a:	9e a1       	ldd	r25, Y+38	; 0x26
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	6f a1       	ldd	r22, Y+39	; 0x27
    296e:	78 a5       	ldd	r23, Y+40	; 0x28
    2970:	89 a5       	ldd	r24, Y+41	; 0x29
    2972:	9a a5       	ldd	r25, Y+42	; 0x2a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9a a3       	std	Y+34, r25	; 0x22
    2992:	89 a3       	std	Y+33, r24	; 0x21
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <LCD_sendCommand+0x1c0>
    2996:	88 ec       	ldi	r24, 0xC8	; 200
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	98 a3       	std	Y+32, r25	; 0x20
    299c:	8f 8f       	std	Y+31, r24	; 0x1f
    299e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29a0:	98 a1       	ldd	r25, Y+32	; 0x20
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <LCD_sendCommand+0x1ae>
    29a6:	98 a3       	std	Y+32, r25	; 0x20
    29a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	89 a1       	ldd	r24, Y+33	; 0x21
    29ac:	9a a1       	ldd	r25, Y+34	; 0x22
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	9a a3       	std	Y+34, r25	; 0x22
    29b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	89 a1       	ldd	r24, Y+33	; 0x21
    29b6:	9a a1       	ldd	r25, Y+34	; 0x22
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	69 f7       	brne	.-38     	; 0x2996 <LCD_sendCommand+0x1a2>
    29bc:	14 c0       	rjmp	.+40     	; 0x29e6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	6b a1       	ldd	r22, Y+35	; 0x23
    29c0:	7c a1       	ldd	r23, Y+36	; 0x24
    29c2:	8d a1       	ldd	r24, Y+37	; 0x25
    29c4:	9e a1       	ldd	r25, Y+38	; 0x26
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9a a3       	std	Y+34, r25	; 0x22
    29d0:	89 a3       	std	Y+33, r24	; 0x21
    29d2:	89 a1       	ldd	r24, Y+33	; 0x21
    29d4:	9a a1       	ldd	r25, Y+34	; 0x22
    29d6:	9e 8f       	std	Y+30, r25	; 0x1e
    29d8:	8d 8f       	std	Y+29, r24	; 0x1d
    29da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <LCD_sendCommand+0x1ea>
    29e2:	9e 8f       	std	Y+30, r25	; 0x1e
    29e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	69 ad       	ldd	r22, Y+57	; 0x39
    29ea:	0e 94 4a 11 	call	0x2294	; 0x2294 <GPIO_writePort>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 e8       	ldi	r26, 0x80	; 128
    29f4:	bf e3       	ldi	r27, 0x3F	; 63
    29f6:	89 8f       	std	Y+25, r24	; 0x19
    29f8:	9a 8f       	std	Y+26, r25	; 0x1a
    29fa:	ab 8f       	std	Y+27, r26	; 0x1b
    29fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a ef       	ldi	r20, 0xFA	; 250
    2a0c:	54 e4       	ldi	r21, 0x44	; 68
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8d 8b       	std	Y+21, r24	; 0x15
    2a18:	9e 8b       	std	Y+22, r25	; 0x16
    2a1a:	af 8b       	std	Y+23, r26	; 0x17
    2a1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a20:	7e 89       	ldd	r23, Y+22	; 0x16
    2a22:	8f 89       	ldd	r24, Y+23	; 0x17
    2a24:	98 8d       	ldd	r25, Y+24	; 0x18
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	5f e3       	ldi	r21, 0x3F	; 63
    2a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a32:	88 23       	and	r24, r24
    2a34:	2c f4       	brge	.+10     	; 0x2a40 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
    2a3e:	3f c0       	rjmp	.+126    	; 0x2abe <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2a40:	6d 89       	ldd	r22, Y+21	; 0x15
    2a42:	7e 89       	ldd	r23, Y+22	; 0x16
    2a44:	8f 89       	ldd	r24, Y+23	; 0x17
    2a46:	98 8d       	ldd	r25, Y+24	; 0x18
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	3f ef       	ldi	r19, 0xFF	; 255
    2a4c:	4f e7       	ldi	r20, 0x7F	; 127
    2a4e:	57 e4       	ldi	r21, 0x47	; 71
    2a50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a54:	18 16       	cp	r1, r24
    2a56:	4c f5       	brge	.+82     	; 0x2aaa <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a58:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e2       	ldi	r20, 0x20	; 32
    2a66:	51 e4       	ldi	r21, 0x41	; 65
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9c 8b       	std	Y+20, r25	; 0x14
    2a7e:	8b 8b       	std	Y+19, r24	; 0x13
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <LCD_sendCommand+0x2ac>
    2a82:	88 ec       	ldi	r24, 0xC8	; 200
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9a 8b       	std	Y+18, r25	; 0x12
    2a88:	89 8b       	std	Y+17, r24	; 0x11
    2a8a:	89 89       	ldd	r24, Y+17	; 0x11
    2a8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_sendCommand+0x29a>
    2a92:	9a 8b       	std	Y+18, r25	; 0x12
    2a94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a96:	8b 89       	ldd	r24, Y+19	; 0x13
    2a98:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	9c 8b       	std	Y+20, r25	; 0x14
    2a9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	69 f7       	brne	.-38     	; 0x2a82 <LCD_sendCommand+0x28e>
    2aa8:	14 c0       	rjmp	.+40     	; 0x2ad2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2aac:	7e 89       	ldd	r23, Y+22	; 0x16
    2aae:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9c 8b       	std	Y+20, r25	; 0x14
    2abc:	8b 8b       	std	Y+19, r24	; 0x13
    2abe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac2:	98 8b       	std	Y+16, r25	; 0x10
    2ac4:	8f 87       	std	Y+15, r24	; 0x0f
    2ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ac8:	98 89       	ldd	r25, Y+16	; 0x10
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_sendCommand+0x2d6>
    2ace:	98 8b       	std	Y+16, r25	; 0x10
    2ad0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <GPIO_writePin>
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	a0 e8       	ldi	r26, 0x80	; 128
    2ae2:	bf e3       	ldi	r27, 0x3F	; 63
    2ae4:	8b 87       	std	Y+11, r24	; 0x0b
    2ae6:	9c 87       	std	Y+12, r25	; 0x0c
    2ae8:	ad 87       	std	Y+13, r26	; 0x0d
    2aea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a ef       	ldi	r20, 0xFA	; 250
    2afa:	54 e4       	ldi	r21, 0x44	; 68
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	8f 83       	std	Y+7, r24	; 0x07
    2b06:	98 87       	std	Y+8, r25	; 0x08
    2b08:	a9 87       	std	Y+9, r26	; 0x09
    2b0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0e:	78 85       	ldd	r23, Y+8	; 0x08
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	2c f4       	brge	.+10     	; 0x2b2e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9e 83       	std	Y+6, r25	; 0x06
    2b2a:	8d 83       	std	Y+5, r24	; 0x05
    2b2c:	3f c0       	rjmp	.+126    	; 0x2bac <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b30:	78 85       	ldd	r23, Y+8	; 0x08
    2b32:	89 85       	ldd	r24, Y+9	; 0x09
    2b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	3f ef       	ldi	r19, 0xFF	; 255
    2b3a:	4f e7       	ldi	r20, 0x7F	; 127
    2b3c:	57 e4       	ldi	r21, 0x47	; 71
    2b3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b42:	18 16       	cp	r1, r24
    2b44:	4c f5       	brge	.+82     	; 0x2b98 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e2       	ldi	r20, 0x20	; 32
    2b54:	51 e4       	ldi	r21, 0x41	; 65
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9e 83       	std	Y+6, r25	; 0x06
    2b6c:	8d 83       	std	Y+5, r24	; 0x05
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <LCD_sendCommand+0x39a>
    2b70:	88 ec       	ldi	r24, 0xC8	; 200
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9c 83       	std	Y+4, r25	; 0x04
    2b76:	8b 83       	std	Y+3, r24	; 0x03
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_sendCommand+0x388>
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	69 f7       	brne	.-38     	; 0x2b70 <LCD_sendCommand+0x37c>
    2b96:	14 c0       	rjmp	.+40     	; 0x2bc0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9e 83       	std	Y+6, r25	; 0x06
    2baa:	8d 83       	std	Y+5, r24	; 0x05
    2bac:	8d 81       	ldd	r24, Y+5	; 0x05
    2bae:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_sendCommand+0x3c4>
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2bc0:	e9 96       	adiw	r28, 0x39	; 57
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	e9 97       	sbiw	r28, 0x39	; 57
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <GPIO_writePin>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a0 e8       	ldi	r26, 0x80	; 128
    2bf8:	bf e3       	ldi	r27, 0x3F	; 63
    2bfa:	8d ab       	std	Y+53, r24	; 0x35
    2bfc:	9e ab       	std	Y+54, r25	; 0x36
    2bfe:	af ab       	std	Y+55, r26	; 0x37
    2c00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c02:	6d a9       	ldd	r22, Y+53	; 0x35
    2c04:	7e a9       	ldd	r23, Y+54	; 0x36
    2c06:	8f a9       	ldd	r24, Y+55	; 0x37
    2c08:	98 ad       	ldd	r25, Y+56	; 0x38
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	4a ef       	ldi	r20, 0xFA	; 250
    2c10:	54 e4       	ldi	r21, 0x44	; 68
    2c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	89 ab       	std	Y+49, r24	; 0x31
    2c1c:	9a ab       	std	Y+50, r25	; 0x32
    2c1e:	ab ab       	std	Y+51, r26	; 0x33
    2c20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c22:	69 a9       	ldd	r22, Y+49	; 0x31
    2c24:	7a a9       	ldd	r23, Y+50	; 0x32
    2c26:	8b a9       	ldd	r24, Y+51	; 0x33
    2c28:	9c a9       	ldd	r25, Y+52	; 0x34
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e8       	ldi	r20, 0x80	; 128
    2c30:	5f e3       	ldi	r21, 0x3F	; 63
    2c32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c36:	88 23       	and	r24, r24
    2c38:	2c f4       	brge	.+10     	; 0x2c44 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	98 ab       	std	Y+48, r25	; 0x30
    2c40:	8f a7       	std	Y+47, r24	; 0x2f
    2c42:	3f c0       	rjmp	.+126    	; 0x2cc2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2c44:	69 a9       	ldd	r22, Y+49	; 0x31
    2c46:	7a a9       	ldd	r23, Y+50	; 0x32
    2c48:	8b a9       	ldd	r24, Y+51	; 0x33
    2c4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	3f ef       	ldi	r19, 0xFF	; 255
    2c50:	4f e7       	ldi	r20, 0x7F	; 127
    2c52:	57 e4       	ldi	r21, 0x47	; 71
    2c54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c58:	18 16       	cp	r1, r24
    2c5a:	4c f5       	brge	.+82     	; 0x2cae <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c5e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c60:	8f a9       	ldd	r24, Y+55	; 0x37
    2c62:	98 ad       	ldd	r25, Y+56	; 0x38
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e2       	ldi	r20, 0x20	; 32
    2c6a:	51 e4       	ldi	r21, 0x41	; 65
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	98 ab       	std	Y+48, r25	; 0x30
    2c82:	8f a7       	std	Y+47, r24	; 0x2f
    2c84:	0f c0       	rjmp	.+30     	; 0x2ca4 <LCD_displayCharacter+0xd2>
    2c86:	88 ec       	ldi	r24, 0xC8	; 200
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9e a7       	std	Y+46, r25	; 0x2e
    2c8c:	8d a7       	std	Y+45, r24	; 0x2d
    2c8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c90:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <LCD_displayCharacter+0xc0>
    2c96:	9e a7       	std	Y+46, r25	; 0x2e
    2c98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	98 ab       	std	Y+48, r25	; 0x30
    2ca2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	69 f7       	brne	.-38     	; 0x2c86 <LCD_displayCharacter+0xb4>
    2cac:	14 c0       	rjmp	.+40     	; 0x2cd6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cae:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb0:	7a a9       	ldd	r23, Y+50	; 0x32
    2cb2:	8b a9       	ldd	r24, Y+51	; 0x33
    2cb4:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	98 ab       	std	Y+48, r25	; 0x30
    2cc0:	8f a7       	std	Y+47, r24	; 0x2f
    2cc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc6:	9c a7       	std	Y+44, r25	; 0x2c
    2cc8:	8b a7       	std	Y+43, r24	; 0x2b
    2cca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ccc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <LCD_displayCharacter+0xfc>
    2cd2:	9c a7       	std	Y+44, r25	; 0x2c
    2cd4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	61 e0       	ldi	r22, 0x01	; 1
    2cda:	41 e0       	ldi	r20, 0x01	; 1
    2cdc:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <GPIO_writePin>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	a0 e8       	ldi	r26, 0x80	; 128
    2ce6:	bf e3       	ldi	r27, 0x3F	; 63
    2ce8:	8f a3       	std	Y+39, r24	; 0x27
    2cea:	98 a7       	std	Y+40, r25	; 0x28
    2cec:	a9 a7       	std	Y+41, r26	; 0x29
    2cee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf0:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf2:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf4:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a ef       	ldi	r20, 0xFA	; 250
    2cfe:	54 e4       	ldi	r21, 0x44	; 68
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	8b a3       	std	Y+35, r24	; 0x23
    2d0a:	9c a3       	std	Y+36, r25	; 0x24
    2d0c:	ad a3       	std	Y+37, r26	; 0x25
    2d0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d10:	6b a1       	ldd	r22, Y+35	; 0x23
    2d12:	7c a1       	ldd	r23, Y+36	; 0x24
    2d14:	8d a1       	ldd	r24, Y+37	; 0x25
    2d16:	9e a1       	ldd	r25, Y+38	; 0x26
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e8       	ldi	r20, 0x80	; 128
    2d1e:	5f e3       	ldi	r21, 0x3F	; 63
    2d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d24:	88 23       	and	r24, r24
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9a a3       	std	Y+34, r25	; 0x22
    2d2e:	89 a3       	std	Y+33, r24	; 0x21
    2d30:	3f c0       	rjmp	.+126    	; 0x2db0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2d32:	6b a1       	ldd	r22, Y+35	; 0x23
    2d34:	7c a1       	ldd	r23, Y+36	; 0x24
    2d36:	8d a1       	ldd	r24, Y+37	; 0x25
    2d38:	9e a1       	ldd	r25, Y+38	; 0x26
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	3f ef       	ldi	r19, 0xFF	; 255
    2d3e:	4f e7       	ldi	r20, 0x7F	; 127
    2d40:	57 e4       	ldi	r21, 0x47	; 71
    2d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d46:	18 16       	cp	r1, r24
    2d48:	4c f5       	brge	.+82     	; 0x2d9c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	51 e4       	ldi	r21, 0x41	; 65
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9a a3       	std	Y+34, r25	; 0x22
    2d70:	89 a3       	std	Y+33, r24	; 0x21
    2d72:	0f c0       	rjmp	.+30     	; 0x2d92 <LCD_displayCharacter+0x1c0>
    2d74:	88 ec       	ldi	r24, 0xC8	; 200
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	98 a3       	std	Y+32, r25	; 0x20
    2d7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <LCD_displayCharacter+0x1ae>
    2d84:	98 a3       	std	Y+32, r25	; 0x20
    2d86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d88:	89 a1       	ldd	r24, Y+33	; 0x21
    2d8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	9a a3       	std	Y+34, r25	; 0x22
    2d90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d92:	89 a1       	ldd	r24, Y+33	; 0x21
    2d94:	9a a1       	ldd	r25, Y+34	; 0x22
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	69 f7       	brne	.-38     	; 0x2d74 <LCD_displayCharacter+0x1a2>
    2d9a:	14 c0       	rjmp	.+40     	; 0x2dc4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2da0:	8d a1       	ldd	r24, Y+37	; 0x25
    2da2:	9e a1       	ldd	r25, Y+38	; 0x26
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	9a a3       	std	Y+34, r25	; 0x22
    2dae:	89 a3       	std	Y+33, r24	; 0x21
    2db0:	89 a1       	ldd	r24, Y+33	; 0x21
    2db2:	9a a1       	ldd	r25, Y+34	; 0x22
    2db4:	9e 8f       	std	Y+30, r25	; 0x1e
    2db6:	8d 8f       	std	Y+29, r24	; 0x1d
    2db8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <LCD_displayCharacter+0x1ea>
    2dc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	69 ad       	ldd	r22, Y+57	; 0x39
    2dc8:	0e 94 4a 11 	call	0x2294	; 0x2294 <GPIO_writePort>
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	a0 e8       	ldi	r26, 0x80	; 128
    2dd2:	bf e3       	ldi	r27, 0x3F	; 63
    2dd4:	89 8f       	std	Y+25, r24	; 0x19
    2dd6:	9a 8f       	std	Y+26, r25	; 0x1a
    2dd8:	ab 8f       	std	Y+27, r26	; 0x1b
    2dda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ddc:	69 8d       	ldd	r22, Y+25	; 0x19
    2dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	4a ef       	ldi	r20, 0xFA	; 250
    2dea:	54 e4       	ldi	r21, 0x44	; 68
    2dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	8d 8b       	std	Y+21, r24	; 0x15
    2df6:	9e 8b       	std	Y+22, r25	; 0x16
    2df8:	af 8b       	std	Y+23, r26	; 0x17
    2dfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2e00:	8f 89       	ldd	r24, Y+23	; 0x17
    2e02:	98 8d       	ldd	r25, Y+24	; 0x18
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e8       	ldi	r20, 0x80	; 128
    2e0a:	5f e3       	ldi	r21, 0x3F	; 63
    2e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e10:	88 23       	and	r24, r24
    2e12:	2c f4       	brge	.+10     	; 0x2e1e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	9c 8b       	std	Y+20, r25	; 0x14
    2e1a:	8b 8b       	std	Y+19, r24	; 0x13
    2e1c:	3f c0       	rjmp	.+126    	; 0x2e9c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e20:	7e 89       	ldd	r23, Y+22	; 0x16
    2e22:	8f 89       	ldd	r24, Y+23	; 0x17
    2e24:	98 8d       	ldd	r25, Y+24	; 0x18
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	3f ef       	ldi	r19, 0xFF	; 255
    2e2a:	4f e7       	ldi	r20, 0x7F	; 127
    2e2c:	57 e4       	ldi	r21, 0x47	; 71
    2e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e32:	18 16       	cp	r1, r24
    2e34:	4c f5       	brge	.+82     	; 0x2e88 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e36:	69 8d       	ldd	r22, Y+25	; 0x19
    2e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	40 e2       	ldi	r20, 0x20	; 32
    2e44:	51 e4       	ldi	r21, 0x41	; 65
    2e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	9c 8b       	std	Y+20, r25	; 0x14
    2e5c:	8b 8b       	std	Y+19, r24	; 0x13
    2e5e:	0f c0       	rjmp	.+30     	; 0x2e7e <LCD_displayCharacter+0x2ac>
    2e60:	88 ec       	ldi	r24, 0xC8	; 200
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9a 8b       	std	Y+18, r25	; 0x12
    2e66:	89 8b       	std	Y+17, r24	; 0x11
    2e68:	89 89       	ldd	r24, Y+17	; 0x11
    2e6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <LCD_displayCharacter+0x29a>
    2e70:	9a 8b       	std	Y+18, r25	; 0x12
    2e72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e74:	8b 89       	ldd	r24, Y+19	; 0x13
    2e76:	9c 89       	ldd	r25, Y+20	; 0x14
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	9c 8b       	std	Y+20, r25	; 0x14
    2e7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e80:	9c 89       	ldd	r25, Y+20	; 0x14
    2e82:	00 97       	sbiw	r24, 0x00	; 0
    2e84:	69 f7       	brne	.-38     	; 0x2e60 <LCD_displayCharacter+0x28e>
    2e86:	14 c0       	rjmp	.+40     	; 0x2eb0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e88:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	9c 8b       	std	Y+20, r25	; 0x14
    2e9a:	8b 8b       	std	Y+19, r24	; 0x13
    2e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea0:	98 8b       	std	Y+16, r25	; 0x10
    2ea2:	8f 87       	std	Y+15, r24	; 0x0f
    2ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea6:	98 89       	ldd	r25, Y+16	; 0x10
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <LCD_displayCharacter+0x2d6>
    2eac:	98 8b       	std	Y+16, r25	; 0x10
    2eae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	61 e0       	ldi	r22, 0x01	; 1
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <GPIO_writePin>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 e8       	ldi	r26, 0x80	; 128
    2ec0:	bf e3       	ldi	r27, 0x3F	; 63
    2ec2:	8b 87       	std	Y+11, r24	; 0x0b
    2ec4:	9c 87       	std	Y+12, r25	; 0x0c
    2ec6:	ad 87       	std	Y+13, r26	; 0x0d
    2ec8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a ef       	ldi	r20, 0xFA	; 250
    2ed8:	54 e4       	ldi	r21, 0x44	; 68
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8f 83       	std	Y+7, r24	; 0x07
    2ee4:	98 87       	std	Y+8, r25	; 0x08
    2ee6:	a9 87       	std	Y+9, r26	; 0x09
    2ee8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
    2f0a:	3f c0       	rjmp	.+126    	; 0x2f8a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	4f e7       	ldi	r20, 0x7F	; 127
    2f1a:	57 e4       	ldi	r21, 0x47	; 71
    2f1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f20:	18 16       	cp	r1, r24
    2f22:	4c f5       	brge	.+82     	; 0x2f76 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <LCD_displayCharacter+0x39a>
    2f4e:	88 ec       	ldi	r24, 0xC8	; 200
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	9c 83       	std	Y+4, r25	; 0x04
    2f54:	8b 83       	std	Y+3, r24	; 0x03
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <LCD_displayCharacter+0x388>
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <LCD_displayCharacter+0x37c>
    2f74:	14 c0       	rjmp	.+40     	; 0x2f9e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <LCD_displayCharacter+0x3c4>
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f9e:	e9 96       	adiw	r28, 0x39	; 57
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	00 d0       	rcall	.+0      	; 0x2fb6 <LCD_displayString+0x6>
    2fb6:	0f 92       	push	r0
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	9b 83       	std	Y+3, r25	; 0x03
    2fbe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fc0:	19 82       	std	Y+1, r1	; 0x01
    2fc2:	0e c0       	rjmp	.+28     	; 0x2fe0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	8a 81       	ldd	r24, Y+2	; 0x02
    2fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fce:	fc 01       	movw	r30, r24
    2fd0:	e2 0f       	add	r30, r18
    2fd2:	f3 1f       	adc	r31, r19
    2fd4:	80 81       	ld	r24, Z
    2fd6:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_displayCharacter>
		i++;
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fea:	fc 01       	movw	r30, r24
    2fec:	e2 0f       	add	r30, r18
    2fee:	f3 1f       	adc	r31, r19
    2ff0:	80 81       	ld	r24, Z
    2ff2:	88 23       	and	r24, r24
    2ff4:	39 f7       	brne	.-50     	; 0x2fc4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	cf 91       	pop	r28
    2ffe:	df 91       	pop	r29
    3000:	08 95       	ret

00003002 <LCD_moveCursor>:


void LCD_moveCursor(uint8 row,uint8 col)
{
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	00 d0       	rcall	.+0      	; 0x3008 <LCD_moveCursor+0x6>
    3008:	00 d0       	rcall	.+0      	; 0x300a <LCD_moveCursor+0x8>
    300a:	0f 92       	push	r0
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	8a 83       	std	Y+2, r24	; 0x02
    3012:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	28 2f       	mov	r18, r24
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	3d 83       	std	Y+5, r19	; 0x05
    301c:	2c 83       	std	Y+4, r18	; 0x04
    301e:	8c 81       	ldd	r24, Y+4	; 0x04
    3020:	9d 81       	ldd	r25, Y+5	; 0x05
    3022:	81 30       	cpi	r24, 0x01	; 1
    3024:	91 05       	cpc	r25, r1
    3026:	c1 f0       	breq	.+48     	; 0x3058 <LCD_moveCursor+0x56>
    3028:	2c 81       	ldd	r18, Y+4	; 0x04
    302a:	3d 81       	ldd	r19, Y+5	; 0x05
    302c:	22 30       	cpi	r18, 0x02	; 2
    302e:	31 05       	cpc	r19, r1
    3030:	2c f4       	brge	.+10     	; 0x303c <LCD_moveCursor+0x3a>
    3032:	8c 81       	ldd	r24, Y+4	; 0x04
    3034:	9d 81       	ldd	r25, Y+5	; 0x05
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	61 f0       	breq	.+24     	; 0x3052 <LCD_moveCursor+0x50>
    303a:	19 c0       	rjmp	.+50     	; 0x306e <LCD_moveCursor+0x6c>
    303c:	2c 81       	ldd	r18, Y+4	; 0x04
    303e:	3d 81       	ldd	r19, Y+5	; 0x05
    3040:	22 30       	cpi	r18, 0x02	; 2
    3042:	31 05       	cpc	r19, r1
    3044:	69 f0       	breq	.+26     	; 0x3060 <LCD_moveCursor+0x5e>
    3046:	8c 81       	ldd	r24, Y+4	; 0x04
    3048:	9d 81       	ldd	r25, Y+5	; 0x05
    304a:	83 30       	cpi	r24, 0x03	; 3
    304c:	91 05       	cpc	r25, r1
    304e:	61 f0       	breq	.+24     	; 0x3068 <LCD_moveCursor+0x66>
    3050:	0e c0       	rjmp	.+28     	; 0x306e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	0b c0       	rjmp	.+22     	; 0x306e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	80 5c       	subi	r24, 0xC0	; 192
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	07 c0       	rjmp	.+14     	; 0x306e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	80 5f       	subi	r24, 0xF0	; 240
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	03 c0       	rjmp	.+6      	; 0x306e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	80 5b       	subi	r24, 0xB0	; 176
    306c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	80 68       	ori	r24, 0x80	; 128
    3072:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <LCD_sendCommand>
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	00 d0       	rcall	.+0      	; 0x308c <LCD_displayStringRowColumn+0x6>
    308c:	00 d0       	rcall	.+0      	; 0x308e <LCD_displayStringRowColumn+0x8>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	6a 83       	std	Y+2, r22	; 0x02
    3096:	5c 83       	std	Y+4, r21	; 0x04
    3098:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	6a 81       	ldd	r22, Y+2	; 0x02
    309e:	0e 94 01 18 	call	0x3002	; 0x3002 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	9c 81       	ldd	r25, Y+4	; 0x04
    30a6:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
}
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	62 97       	sbiw	r28, 0x12	; 18
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	9a 8b       	std	Y+18, r25	; 0x12
    30ce:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    30d0:	89 89       	ldd	r24, Y+17	; 0x11
    30d2:	9a 89       	ldd	r25, Y+18	; 0x12
    30d4:	9e 01       	movw	r18, r28
    30d6:	2f 5f       	subi	r18, 0xFF	; 255
    30d8:	3f 4f       	sbci	r19, 0xFF	; 255
    30da:	b9 01       	movw	r22, r18
    30dc:	4a e0       	ldi	r20, 0x0A	; 10
    30de:	50 e0       	ldi	r21, 0x00	; 0
    30e0:	0e 94 be 1a 	call	0x357c	; 0x357c <itoa>
   LCD_displayString(buff); /* Display the string */
    30e4:	ce 01       	movw	r24, r28
    30e6:	01 96       	adiw	r24, 0x01	; 1
    30e8:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_displayString>
}
    30ec:	62 96       	adiw	r28, 0x12	; 18
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <LCD_sendCommand>
}
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <__vector_9>:
#include <avr/io.h>
#include "common_macros.h"
#include <avr/interrupt.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect) {
    3112:	1f 92       	push	r1
    3114:	0f 92       	push	r0
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	0f 92       	push	r0
    311a:	11 24       	eor	r1, r1
    311c:	2f 93       	push	r18
    311e:	3f 93       	push	r19
    3120:	4f 93       	push	r20
    3122:	5f 93       	push	r21
    3124:	6f 93       	push	r22
    3126:	7f 93       	push	r23
    3128:	8f 93       	push	r24
    312a:	9f 93       	push	r25
    312c:	af 93       	push	r26
    312e:	bf 93       	push	r27
    3130:	ef 93       	push	r30
    3132:	ff 93       	push	r31
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    313c:	80 91 05 01 	lds	r24, 0x0105
    3140:	90 91 06 01 	lds	r25, 0x0106
    3144:	00 97       	sbiw	r24, 0x00	; 0
    3146:	29 f0       	breq	.+10     	; 0x3152 <__vector_9+0x40>

		(*g_callBackPtr)();
    3148:	e0 91 05 01 	lds	r30, 0x0105
    314c:	f0 91 06 01 	lds	r31, 0x0106
    3150:	09 95       	icall
	}
}
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	ff 91       	pop	r31
    3158:	ef 91       	pop	r30
    315a:	bf 91       	pop	r27
    315c:	af 91       	pop	r26
    315e:	9f 91       	pop	r25
    3160:	8f 91       	pop	r24
    3162:	7f 91       	pop	r23
    3164:	6f 91       	pop	r22
    3166:	5f 91       	pop	r21
    3168:	4f 91       	pop	r20
    316a:	3f 91       	pop	r19
    316c:	2f 91       	pop	r18
    316e:	0f 90       	pop	r0
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	0f 90       	pop	r0
    3174:	1f 90       	pop	r1
    3176:	18 95       	reti

00003178 <__vector_7>:
ISR(TIMER1_COMPA_vect) {
    3178:	1f 92       	push	r1
    317a:	0f 92       	push	r0
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	0f 92       	push	r0
    3180:	11 24       	eor	r1, r1
    3182:	2f 93       	push	r18
    3184:	3f 93       	push	r19
    3186:	4f 93       	push	r20
    3188:	5f 93       	push	r21
    318a:	6f 93       	push	r22
    318c:	7f 93       	push	r23
    318e:	8f 93       	push	r24
    3190:	9f 93       	push	r25
    3192:	af 93       	push	r26
    3194:	bf 93       	push	r27
    3196:	ef 93       	push	r30
    3198:	ff 93       	push	r31
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    31a2:	80 91 05 01 	lds	r24, 0x0105
    31a6:	90 91 06 01 	lds	r25, 0x0106
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	29 f0       	breq	.+10     	; 0x31b8 <__vector_7+0x40>

		(*g_callBackPtr)();
    31ae:	e0 91 05 01 	lds	r30, 0x0105
    31b2:	f0 91 06 01 	lds	r31, 0x0106
    31b6:	09 95       	icall
	}
}
    31b8:	cf 91       	pop	r28
    31ba:	df 91       	pop	r29
    31bc:	ff 91       	pop	r31
    31be:	ef 91       	pop	r30
    31c0:	bf 91       	pop	r27
    31c2:	af 91       	pop	r26
    31c4:	9f 91       	pop	r25
    31c6:	8f 91       	pop	r24
    31c8:	7f 91       	pop	r23
    31ca:	6f 91       	pop	r22
    31cc:	5f 91       	pop	r21
    31ce:	4f 91       	pop	r20
    31d0:	3f 91       	pop	r19
    31d2:	2f 91       	pop	r18
    31d4:	0f 90       	pop	r0
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	0f 90       	pop	r0
    31da:	1f 90       	pop	r1
    31dc:	18 95       	reti

000031de <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <Timer1_init+0x6>
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    31ec:	ac e4       	ldi	r26, 0x4C	; 76
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e9 81       	ldd	r30, Y+1	; 0x01
    31f2:	fa 81       	ldd	r31, Y+2	; 0x02
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	11 96       	adiw	r26, 0x01	; 1
    31fa:	9c 93       	st	X, r25
    31fc:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;
    31fe:	aa e4       	ldi	r26, 0x4A	; 74
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e9 81       	ldd	r30, Y+1	; 0x01
    3204:	fa 81       	ldd	r31, Y+2	; 0x02
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	11 96       	adiw	r26, 0x01	; 1
    320c:	9c 93       	st	X, r25
    320e:	8e 93       	st	-X, r24
	if (Config_Ptr->mode == Normal) {
    3210:	e9 81       	ldd	r30, Y+1	; 0x01
    3212:	fa 81       	ldd	r31, Y+2	; 0x02
    3214:	85 81       	ldd	r24, Z+5	; 0x05
    3216:	88 23       	and	r24, r24
    3218:	29 f4       	brne	.+10     	; 0x3224 <Timer1_init+0x46>
		TIMSK = 1 << TOIE1;
    321a:	e9 e5       	ldi	r30, 0x59	; 89
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	84 e0       	ldi	r24, 0x04	; 4
    3220:	80 83       	st	Z, r24
    3222:	29 c0       	rjmp	.+82     	; 0x3276 <Timer1_init+0x98>
	} else {
		TIMSK = 1 << OCIE1A;
    3224:	e9 e5       	ldi	r30, 0x59	; 89
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 e1       	ldi	r24, 0x10	; 16
    322a:	80 83       	st	Z, r24
		TCCR1A = (1 << FOC1A) | (1 << FOC1B)
    322c:	af e4       	ldi	r26, 0x4F	; 79
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	ef e4       	ldi	r30, 0x4F	; 79
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	98 2f       	mov	r25, r24
    3238:	9c 7f       	andi	r25, 0xFC	; 252
    323a:	e9 81       	ldd	r30, Y+1	; 0x01
    323c:	fa 81       	ldd	r31, Y+2	; 0x02
    323e:	85 81       	ldd	r24, Z+5	; 0x05
    3240:	83 70       	andi	r24, 0x03	; 3
    3242:	89 2b       	or	r24, r25
    3244:	8c 60       	ori	r24, 0x0C	; 12
    3246:	8c 93       	st	X, r24
				| ((TCCR1A & 0XFC) | (Config_Ptr->mode & 0x3));
		TCCR1B = ((TCCR1B & 0XE7) | ((Config_Ptr->mode & 0xC) << 1))
    3248:	ae e4       	ldi	r26, 0x4E	; 78
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	ee e4       	ldi	r30, 0x4E	; 78
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	28 2f       	mov	r18, r24
    3254:	27 7e       	andi	r18, 0xE7	; 231
    3256:	e9 81       	ldd	r30, Y+1	; 0x01
    3258:	fa 81       	ldd	r31, Y+2	; 0x02
    325a:	85 81       	ldd	r24, Z+5	; 0x05
    325c:	88 2f       	mov	r24, r24
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	8c 70       	andi	r24, 0x0C	; 12
    3262:	90 70       	andi	r25, 0x00	; 0
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	92 2f       	mov	r25, r18
    326a:	98 2b       	or	r25, r24
    326c:	e9 81       	ldd	r30, Y+1	; 0x01
    326e:	fa 81       	ldd	r31, Y+2	; 0x02
    3270:	84 81       	ldd	r24, Z+4	; 0x04
    3272:	89 2b       	or	r24, r25
    3274:	8c 93       	st	X, r24
				| (Config_Ptr->prescaler);
	}
}
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	cf 91       	pop	r28
    327c:	df 91       	pop	r29
    327e:	08 95       	ret

00003280 <Timer1_deInit>:
void Timer1_deInit(void) {
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    3288:	ef e4       	ldi	r30, 0x4F	; 79
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	10 82       	st	Z, r1
	TCCR1B = 0;
    328e:	ee e4       	ldi	r30, 0x4E	; 78
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	10 82       	st	Z, r1
	TCNT1 = 0;
    3294:	ec e4       	ldi	r30, 0x4C	; 76
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	11 82       	std	Z+1, r1	; 0x01
    329a:	10 82       	st	Z, r1
	OCR1A = 0;
    329c:	ea e4       	ldi	r30, 0x4A	; 74
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	11 82       	std	Z+1, r1	; 0x01
    32a2:	10 82       	st	Z, r1
	TIMSK = 0;
    32a4:	e9 e5       	ldi	r30, 0x59	; 89
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	10 82       	st	Z, r1
}
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void)) {
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <Timer1_setCallBack+0x6>
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	9a 83       	std	Y+2, r25	; 0x02
    32bc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	9a 81       	ldd	r25, Y+2	; 0x02
    32c2:	90 93 06 01 	sts	0x0106, r25
    32c6:	80 93 05 01 	sts	0x0105, r24

}
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <UART_init>:
 *******************************************************************************/
#include "uart.h"
#include "avr/io.h" /* To use the UART Registers */
#include "common_macros.h" /* To use the macros like SET_BIT */

void UART_init(const UART_ConfigType *Config_Ptr) {
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	00 d0       	rcall	.+0      	; 0x32da <UART_init+0x6>
    32da:	00 d0       	rcall	.+0      	; 0x32dc <UART_init+0x8>
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	9c 83       	std	Y+4, r25	; 0x04
    32e2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    32e4:	1a 82       	std	Y+2, r1	; 0x02
    32e6:	19 82       	std	Y+1, r1	; 0x01
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    32e8:	eb 81       	ldd	r30, Y+3	; 0x03
    32ea:	fc 81       	ldd	r31, Y+4	; 0x04
    32ec:	83 81       	ldd	r24, Z+3	; 0x03
    32ee:	94 81       	ldd	r25, Z+4	; 0x04
    32f0:	a5 81       	ldd	r26, Z+5	; 0x05
    32f2:	b6 81       	ldd	r27, Z+6	; 0x06
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	aa 1f       	adc	r26, r26
    32fa:	bb 1f       	adc	r27, r27
    32fc:	88 0f       	add	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	aa 1f       	adc	r26, r26
    3302:	bb 1f       	adc	r27, r27
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	aa 1f       	adc	r26, r26
    330a:	bb 1f       	adc	r27, r27
    330c:	9c 01       	movw	r18, r24
    330e:	ad 01       	movw	r20, r26
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	92 e1       	ldi	r25, 0x12	; 18
    3314:	aa e7       	ldi	r26, 0x7A	; 122
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	bc 01       	movw	r22, r24
    331a:	cd 01       	movw	r24, r26
    331c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    3320:	da 01       	movw	r26, r20
    3322:	c9 01       	movw	r24, r18
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	9a 83       	std	Y+2, r25	; 0x02
    3328:	89 83       	std	Y+1, r24	; 0x01
	UCSRA =(1<<U2X);
    332a:	eb e2       	ldi	r30, 0x2B	; 43
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN);
    3332:	ea e2       	ldi	r30, 0x2A	; 42
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	88 e1       	ldi	r24, 0x18	; 24
    3338:	80 83       	st	Z, r24
	UCSRC=(1<<URSEL)|((Config_Ptr->numdata)<<1)|((Config_Ptr->Stopbit)<<3)|((Config_Ptr->parity)<<4);
    333a:	a0 e4       	ldi	r26, 0x40	; 64
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	eb 81       	ldd	r30, Y+3	; 0x03
    3340:	fc 81       	ldd	r31, Y+4	; 0x04
    3342:	80 81       	ld	r24, Z
    3344:	88 2f       	mov	r24, r24
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	28 2f       	mov	r18, r24
    334e:	20 68       	ori	r18, 0x80	; 128
    3350:	eb 81       	ldd	r30, Y+3	; 0x03
    3352:	fc 81       	ldd	r31, Y+4	; 0x04
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	88 2f       	mov	r24, r24
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	28 2b       	or	r18, r24
    3368:	eb 81       	ldd	r30, Y+3	; 0x03
    336a:	fc 81       	ldd	r31, Y+4	; 0x04
    336c:	81 81       	ldd	r24, Z+1	; 0x01
    336e:	88 2f       	mov	r24, r24
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	82 95       	swap	r24
    3374:	92 95       	swap	r25
    3376:	90 7f       	andi	r25, 0xF0	; 240
    3378:	98 27       	eor	r25, r24
    337a:	80 7f       	andi	r24, 0xF0	; 240
    337c:	98 27       	eor	r25, r24
    337e:	82 2b       	or	r24, r18
    3380:	8c 93       	st	X, r24
	UBRRH=(ubrr_value>>8);
    3382:	e0 e4       	ldi	r30, 0x40	; 64
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	9a 81       	ldd	r25, Y+2	; 0x02
    338a:	89 2f       	mov	r24, r25
    338c:	99 27       	eor	r25, r25
    338e:	80 83       	st	Z, r24
	UBRRL=(ubrr_value);
    3390:	e9 e2       	ldi	r30, 0x29	; 41
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	80 83       	st	Z, r24
}
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	08 95       	ret

000033a6 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	0f 92       	push	r0
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    33b2:	eb e2       	ldi	r30, 0x2B	; 43
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	88 2f       	mov	r24, r24
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	80 72       	andi	r24, 0x20	; 32
    33be:	90 70       	andi	r25, 0x00	; 0
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	b9 f3       	breq	.-18     	; 0x33b2 <UART_sendByte+0xc>
	UDR=data;
    33c4:	ec e2       	ldi	r30, 0x2C	; 44
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	80 83       	st	Z, r24
}
    33cc:	0f 90       	pop	r0
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    33dc:	eb e2       	ldi	r30, 0x2B	; 43
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	88 23       	and	r24, r24
    33e4:	dc f7       	brge	.-10     	; 0x33dc <UART_recieveByte+0x8>
	return UDR;
    33e6:	ec e2       	ldi	r30, 0x2C	; 44
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
}
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <UART_sendString+0x6>
    33f8:	0f 92       	push	r0
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	9b 83       	std	Y+3, r25	; 0x03
    3400:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3402:	19 82       	std	Y+1, r1	; 0x01
    3404:	0e c0       	rjmp	.+28     	; 0x3422 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	9b 81       	ldd	r25, Y+3	; 0x03
    3410:	fc 01       	movw	r30, r24
    3412:	e2 0f       	add	r30, r18
    3414:	f3 1f       	adc	r31, r19
    3416:	80 81       	ld	r24, Z
    3418:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <UART_sendByte>
		i++;
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	8f 5f       	subi	r24, 0xFF	; 255
    3420:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	9b 81       	ldd	r25, Y+3	; 0x03
    342c:	fc 01       	movw	r30, r24
    342e:	e2 0f       	add	r30, r18
    3430:	f3 1f       	adc	r31, r19
    3432:	80 81       	ld	r24, Z
    3434:	88 23       	and	r24, r24
    3436:	39 f7       	brne	.-50     	; 0x3406 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	00 d0       	rcall	.+0      	; 0x344e <UART_receiveString+0xa>
    344e:	0f 92       	push	r0
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	9b 83       	std	Y+3, r25	; 0x03
    3456:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3458:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	28 2f       	mov	r18, r24
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	9b 81       	ldd	r25, Y+3	; 0x03
    3464:	8c 01       	movw	r16, r24
    3466:	02 0f       	add	r16, r18
    3468:	13 1f       	adc	r17, r19
    346a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <UART_recieveByte>
    346e:	f8 01       	movw	r30, r16
    3470:	80 83       	st	Z, r24
    3472:	0f c0       	rjmp	.+30     	; 0x3492 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	8f 5f       	subi	r24, 0xFF	; 255
    3478:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	28 2f       	mov	r18, r24
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	9b 81       	ldd	r25, Y+3	; 0x03
    3484:	8c 01       	movw	r16, r24
    3486:	02 0f       	add	r16, r18
    3488:	13 1f       	adc	r17, r19
    348a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <UART_recieveByte>
    348e:	f8 01       	movw	r30, r16
    3490:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	28 2f       	mov	r18, r24
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	8a 81       	ldd	r24, Y+2	; 0x02
    349a:	9b 81       	ldd	r25, Y+3	; 0x03
    349c:	fc 01       	movw	r30, r24
    349e:	e2 0f       	add	r30, r18
    34a0:	f3 1f       	adc	r31, r19
    34a2:	80 81       	ld	r24, Z
    34a4:	83 32       	cpi	r24, 0x23	; 35
    34a6:	31 f7       	brne	.-52     	; 0x3474 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	28 2f       	mov	r18, r24
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	8a 81       	ldd	r24, Y+2	; 0x02
    34b0:	9b 81       	ldd	r25, Y+3	; 0x03
    34b2:	fc 01       	movw	r30, r24
    34b4:	e2 0f       	add	r30, r18
    34b6:	f3 1f       	adc	r31, r19
    34b8:	10 82       	st	Z, r1
}
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	1f 91       	pop	r17
    34c6:	0f 91       	pop	r16
    34c8:	08 95       	ret

000034ca <__udivmodsi4>:
    34ca:	a1 e2       	ldi	r26, 0x21	; 33
    34cc:	1a 2e       	mov	r1, r26
    34ce:	aa 1b       	sub	r26, r26
    34d0:	bb 1b       	sub	r27, r27
    34d2:	fd 01       	movw	r30, r26
    34d4:	0d c0       	rjmp	.+26     	; 0x34f0 <__udivmodsi4_ep>

000034d6 <__udivmodsi4_loop>:
    34d6:	aa 1f       	adc	r26, r26
    34d8:	bb 1f       	adc	r27, r27
    34da:	ee 1f       	adc	r30, r30
    34dc:	ff 1f       	adc	r31, r31
    34de:	a2 17       	cp	r26, r18
    34e0:	b3 07       	cpc	r27, r19
    34e2:	e4 07       	cpc	r30, r20
    34e4:	f5 07       	cpc	r31, r21
    34e6:	20 f0       	brcs	.+8      	; 0x34f0 <__udivmodsi4_ep>
    34e8:	a2 1b       	sub	r26, r18
    34ea:	b3 0b       	sbc	r27, r19
    34ec:	e4 0b       	sbc	r30, r20
    34ee:	f5 0b       	sbc	r31, r21

000034f0 <__udivmodsi4_ep>:
    34f0:	66 1f       	adc	r22, r22
    34f2:	77 1f       	adc	r23, r23
    34f4:	88 1f       	adc	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	1a 94       	dec	r1
    34fa:	69 f7       	brne	.-38     	; 0x34d6 <__udivmodsi4_loop>
    34fc:	60 95       	com	r22
    34fe:	70 95       	com	r23
    3500:	80 95       	com	r24
    3502:	90 95       	com	r25
    3504:	9b 01       	movw	r18, r22
    3506:	ac 01       	movw	r20, r24
    3508:	bd 01       	movw	r22, r26
    350a:	cf 01       	movw	r24, r30
    350c:	08 95       	ret

0000350e <__prologue_saves__>:
    350e:	2f 92       	push	r2
    3510:	3f 92       	push	r3
    3512:	4f 92       	push	r4
    3514:	5f 92       	push	r5
    3516:	6f 92       	push	r6
    3518:	7f 92       	push	r7
    351a:	8f 92       	push	r8
    351c:	9f 92       	push	r9
    351e:	af 92       	push	r10
    3520:	bf 92       	push	r11
    3522:	cf 92       	push	r12
    3524:	df 92       	push	r13
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	ca 1b       	sub	r28, r26
    3538:	db 0b       	sbc	r29, r27
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	09 94       	ijmp

00003546 <__epilogue_restores__>:
    3546:	2a 88       	ldd	r2, Y+18	; 0x12
    3548:	39 88       	ldd	r3, Y+17	; 0x11
    354a:	48 88       	ldd	r4, Y+16	; 0x10
    354c:	5f 84       	ldd	r5, Y+15	; 0x0f
    354e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3550:	7d 84       	ldd	r7, Y+13	; 0x0d
    3552:	8c 84       	ldd	r8, Y+12	; 0x0c
    3554:	9b 84       	ldd	r9, Y+11	; 0x0b
    3556:	aa 84       	ldd	r10, Y+10	; 0x0a
    3558:	b9 84       	ldd	r11, Y+9	; 0x09
    355a:	c8 84       	ldd	r12, Y+8	; 0x08
    355c:	df 80       	ldd	r13, Y+7	; 0x07
    355e:	ee 80       	ldd	r14, Y+6	; 0x06
    3560:	fd 80       	ldd	r15, Y+5	; 0x05
    3562:	0c 81       	ldd	r16, Y+4	; 0x04
    3564:	1b 81       	ldd	r17, Y+3	; 0x03
    3566:	aa 81       	ldd	r26, Y+2	; 0x02
    3568:	b9 81       	ldd	r27, Y+1	; 0x01
    356a:	ce 0f       	add	r28, r30
    356c:	d1 1d       	adc	r29, r1
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	ed 01       	movw	r28, r26
    357a:	08 95       	ret

0000357c <itoa>:
    357c:	fb 01       	movw	r30, r22
    357e:	9f 01       	movw	r18, r30
    3580:	e8 94       	clt
    3582:	42 30       	cpi	r20, 0x02	; 2
    3584:	c4 f0       	brlt	.+48     	; 0x35b6 <itoa+0x3a>
    3586:	45 32       	cpi	r20, 0x25	; 37
    3588:	b4 f4       	brge	.+44     	; 0x35b6 <itoa+0x3a>
    358a:	4a 30       	cpi	r20, 0x0A	; 10
    358c:	29 f4       	brne	.+10     	; 0x3598 <itoa+0x1c>
    358e:	97 fb       	bst	r25, 7
    3590:	1e f4       	brtc	.+6      	; 0x3598 <itoa+0x1c>
    3592:	90 95       	com	r25
    3594:	81 95       	neg	r24
    3596:	9f 4f       	sbci	r25, 0xFF	; 255
    3598:	64 2f       	mov	r22, r20
    359a:	77 27       	eor	r23, r23
    359c:	0e 94 ef 1a 	call	0x35de	; 0x35de <__udivmodhi4>
    35a0:	80 5d       	subi	r24, 0xD0	; 208
    35a2:	8a 33       	cpi	r24, 0x3A	; 58
    35a4:	0c f0       	brlt	.+2      	; 0x35a8 <itoa+0x2c>
    35a6:	89 5d       	subi	r24, 0xD9	; 217
    35a8:	81 93       	st	Z+, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	00 97       	sbiw	r24, 0x00	; 0
    35ae:	a1 f7       	brne	.-24     	; 0x3598 <itoa+0x1c>
    35b0:	16 f4       	brtc	.+4      	; 0x35b6 <itoa+0x3a>
    35b2:	5d e2       	ldi	r21, 0x2D	; 45
    35b4:	51 93       	st	Z+, r21
    35b6:	10 82       	st	Z, r1
    35b8:	c9 01       	movw	r24, r18
    35ba:	0c 94 df 1a 	jmp	0x35be	; 0x35be <strrev>

000035be <strrev>:
    35be:	dc 01       	movw	r26, r24
    35c0:	fc 01       	movw	r30, r24
    35c2:	67 2f       	mov	r22, r23
    35c4:	71 91       	ld	r23, Z+
    35c6:	77 23       	and	r23, r23
    35c8:	e1 f7       	brne	.-8      	; 0x35c2 <strrev+0x4>
    35ca:	32 97       	sbiw	r30, 0x02	; 2
    35cc:	04 c0       	rjmp	.+8      	; 0x35d6 <strrev+0x18>
    35ce:	7c 91       	ld	r23, X
    35d0:	6d 93       	st	X+, r22
    35d2:	70 83       	st	Z, r23
    35d4:	62 91       	ld	r22, -Z
    35d6:	ae 17       	cp	r26, r30
    35d8:	bf 07       	cpc	r27, r31
    35da:	c8 f3       	brcs	.-14     	; 0x35ce <strrev+0x10>
    35dc:	08 95       	ret

000035de <__udivmodhi4>:
    35de:	aa 1b       	sub	r26, r26
    35e0:	bb 1b       	sub	r27, r27
    35e2:	51 e1       	ldi	r21, 0x11	; 17
    35e4:	07 c0       	rjmp	.+14     	; 0x35f4 <__udivmodhi4_ep>

000035e6 <__udivmodhi4_loop>:
    35e6:	aa 1f       	adc	r26, r26
    35e8:	bb 1f       	adc	r27, r27
    35ea:	a6 17       	cp	r26, r22
    35ec:	b7 07       	cpc	r27, r23
    35ee:	10 f0       	brcs	.+4      	; 0x35f4 <__udivmodhi4_ep>
    35f0:	a6 1b       	sub	r26, r22
    35f2:	b7 0b       	sbc	r27, r23

000035f4 <__udivmodhi4_ep>:
    35f4:	88 1f       	adc	r24, r24
    35f6:	99 1f       	adc	r25, r25
    35f8:	5a 95       	dec	r21
    35fa:	a9 f7       	brne	.-22     	; 0x35e6 <__udivmodhi4_loop>
    35fc:	80 95       	com	r24
    35fe:	90 95       	com	r25
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	08 95       	ret

00003606 <_exit>:
    3606:	f8 94       	cli

00003608 <__stop_program>:
    3608:	ff cf       	rjmp	.-2      	; 0x3608 <__stop_program>
