
control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000021ce  00002262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080007c  0080007c  0000227e  2**0
                  ALLOC
  3 .stab         000023b8  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121b  00000000  00000000  00004638  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005853  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005993  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000774c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008637  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000093e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000097d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 08 	call	0x10ba	; 0x10ba <main>
      8a:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *
 *******************************************************************************/
#include "Buzzer.h"
#include "gpio.h"

void Buzzer_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 3f 0a 	call	0x147e	; 0x147e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>

}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

void Buzzer_on(){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

void Buzzer_off(){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_Init>:
#include "DcMotor.h"
#include "gpio.h"
#include "pwm.h"

void DcMotor_Init(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DcMotor_IN1_PORT_ID, DcMotor_IN1_Pin_ID, PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 3f 0a 	call	0x147e	; 0x147e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_IN2_PORT_ID, DcMotor_IN2_Pin_ID, PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 3f 0a 	call	0x147e	; 0x147e <GPIO_setupPinDirection>
	GPIO_writePin(DcMotor_IN2_PORT_ID, DcMotor_IN2_Pin_ID, LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
	GPIO_writePin(DcMotor_IN1_PORT_ID, DcMotor_IN1_Pin_ID, LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DcMotor_Rotate+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DcMotor_Rotate+0x8>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	6a 83       	std	Y+2, r22	; 0x02

	switch(state)
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	3c 83       	std	Y+4, r19	; 0x04
     be6:	2b 83       	std	Y+3, r18	; 0x03
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	91 05       	cpc	r25, r1
     bf0:	a1 f0       	breq	.+40     	; 0xc1a <DcMotor_Rotate+0x4c>
     bf2:	2b 81       	ldd	r18, Y+3	; 0x03
     bf4:	3c 81       	ldd	r19, Y+4	; 0x04
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	d1 f0       	breq	.+52     	; 0xc30 <DcMotor_Rotate+0x62>
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	01 f5       	brne	.+64     	; 0xc44 <DcMotor_Rotate+0x76>
	{
	case Clockwise:
		GPIO_writePin(DcMotor_IN2_PORT_ID, DcMotor_IN2_Pin_ID, LOGIC_LOW);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
		GPIO_writePin(DcMotor_IN1_PORT_ID, DcMotor_IN1_Pin_ID, LOGIC_HIGH);
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
     c18:	15 c0       	rjmp	.+42     	; 0xc44 <DcMotor_Rotate+0x76>
		break;
	case Anti_Clockwise:
		GPIO_writePin(DcMotor_IN1_PORT_ID, DcMotor_IN1_Pin_ID, LOGIC_LOW);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
		GPIO_writePin(DcMotor_IN2_PORT_ID, DcMotor_IN2_Pin_ID, LOGIC_HIGH);
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
     c2e:	0a c0       	rjmp	.+20     	; 0xc44 <DcMotor_Rotate+0x76>
		break;
	case Stop:
		GPIO_writePin(DcMotor_IN2_PORT_ID, DcMotor_IN2_Pin_ID, LOGIC_LOW);
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
		GPIO_writePin(DcMotor_IN1_PORT_ID, DcMotor_IN1_Pin_ID, LOGIC_LOW);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	0e 94 2a 0b 	call	0x1654	; 0x1654 <GPIO_writePin>
		break;
	}

	PWM_Timer0_Start(speed);
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <PWM_Timer0_Start>

}
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <check_pass>:
uint8 count =0;
uint8 pass[5], pass2[5],pass_memory[5];
uint8 i=0;
/*
 * if two pass are same it will save it*/
uint8 check_pass(uint8 pass[], uint8 pass2[]){
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <check_pass+0x6>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <check_pass+0x8>
     c60:	0f 92       	push	r0
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	7c 83       	std	Y+4, r23	; 0x04
     c6c:	6b 83       	std	Y+3, r22	; 0x03
	for ( i=0; i<5; i++){
     c6e:	10 92 7d 00 	sts	0x007D, r1
     c72:	1d c0       	rjmp	.+58     	; 0xcae <check_pass+0x56>
		if(pass[i]!=pass2[i])
     c74:	80 91 7d 00 	lds	r24, 0x007D
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	fc 01       	movw	r30, r24
     c82:	e2 0f       	add	r30, r18
     c84:	f3 1f       	adc	r31, r19
     c86:	40 81       	ld	r20, Z
     c88:	80 91 7d 00 	lds	r24, 0x007D
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	fc 01       	movw	r30, r24
     c96:	e2 0f       	add	r30, r18
     c98:	f3 1f       	adc	r31, r19
     c9a:	80 81       	ld	r24, Z
     c9c:	48 17       	cp	r20, r24
     c9e:	11 f0       	breq	.+4      	; 0xca4 <check_pass+0x4c>
			return failed;
     ca0:	1d 82       	std	Y+5, r1	; 0x05
     ca2:	0b c0       	rjmp	.+22     	; 0xcba <check_pass+0x62>
uint8 pass[5], pass2[5],pass_memory[5];
uint8 i=0;
/*
 * if two pass are same it will save it*/
uint8 check_pass(uint8 pass[], uint8 pass2[]){
	for ( i=0; i<5; i++){
     ca4:	80 91 7d 00 	lds	r24, 0x007D
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	80 93 7d 00 	sts	0x007D, r24
     cae:	80 91 7d 00 	lds	r24, 0x007D
     cb2:	85 30       	cpi	r24, 0x05	; 5
     cb4:	f8 f2       	brcs	.-66     	; 0xc74 <check_pass+0x1c>
		if(pass[i]!=pass2[i])
			return failed;

	}
	return succeeded;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	8d 83       	std	Y+5, r24	; 0x05
     cba:	8d 81       	ldd	r24, Y+5	; 0x05


}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <write_memory>:
void write_memory(uint8 pass[]){
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	60 97       	sbiw	r28, 0x10	; 16
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	98 8b       	std	Y+16, r25	; 0x10
     ce2:	8f 87       	std	Y+15, r24	; 0x0f

	for( i =0;i<5;i++){
     ce4:	10 92 7d 00 	sts	0x007D, r1
     ce8:	8c c0       	rjmp	.+280    	; 0xe02 <write_memory+0x136>

		EEPROM_writeByte(0x0311+i, pass[i]);
     cea:	80 91 7d 00 	lds	r24, 0x007D
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	8f 5e       	subi	r24, 0xEF	; 239
     cf4:	9c 4f       	sbci	r25, 0xFC	; 252
     cf6:	ac 01       	movw	r20, r24
     cf8:	80 91 7d 00 	lds	r24, 0x007D
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	8f 85       	ldd	r24, Y+15	; 0x0f
     d02:	98 89       	ldd	r25, Y+16	; 0x10
     d04:	fc 01       	movw	r30, r24
     d06:	e2 0f       	add	r30, r18
     d08:	f3 1f       	adc	r31, r19
     d0a:	20 81       	ld	r18, Z
     d0c:	ca 01       	movw	r24, r20
     d0e:	62 2f       	mov	r22, r18
     d10:	0e 94 9e 09 	call	0x133c	; 0x133c <EEPROM_writeByte>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e2       	ldi	r26, 0x20	; 32
     d1a:	b1 e4       	ldi	r27, 0x41	; 65
     d1c:	8b 87       	std	Y+11, r24	; 0x0b
     d1e:	9c 87       	std	Y+12, r25	; 0x0c
     d20:	ad 87       	std	Y+13, r26	; 0x0d
     d22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d24:	6b 85       	ldd	r22, Y+11	; 0x0b
     d26:	7c 85       	ldd	r23, Y+12	; 0x0c
     d28:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	4a ef       	ldi	r20, 0xFA	; 250
     d32:	54 e4       	ldi	r21, 0x44	; 68
     d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	8f 83       	std	Y+7, r24	; 0x07
     d3e:	98 87       	std	Y+8, r25	; 0x08
     d40:	a9 87       	std	Y+9, r26	; 0x09
     d42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d44:	6f 81       	ldd	r22, Y+7	; 0x07
     d46:	78 85       	ldd	r23, Y+8	; 0x08
     d48:	89 85       	ldd	r24, Y+9	; 0x09
     d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d58:	88 23       	and	r24, r24
     d5a:	2c f4       	brge	.+10     	; 0xd66 <write_memory+0x9a>
		__ticks = 1;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	9e 83       	std	Y+6, r25	; 0x06
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	3f c0       	rjmp	.+126    	; 0xde4 <write_memory+0x118>
	else if (__tmp > 65535)
     d66:	6f 81       	ldd	r22, Y+7	; 0x07
     d68:	78 85       	ldd	r23, Y+8	; 0x08
     d6a:	89 85       	ldd	r24, Y+9	; 0x09
     d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	4f e7       	ldi	r20, 0x7F	; 127
     d74:	57 e4       	ldi	r21, 0x47	; 71
     d76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	4c f5       	brge	.+82     	; 0xdd0 <write_memory+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d80:	7c 85       	ldd	r23, Y+12	; 0x0c
     d82:	8d 85       	ldd	r24, Y+13	; 0x0d
     d84:	9e 85       	ldd	r25, Y+14	; 0x0e
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e2       	ldi	r20, 0x20	; 32
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	bc 01       	movw	r22, r24
     d98:	cd 01       	movw	r24, r26
     d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
     da6:	0f c0       	rjmp	.+30     	; 0xdc6 <write_memory+0xfa>
     da8:	88 ec       	ldi	r24, 0xC8	; 200
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9c 83       	std	Y+4, r25	; 0x04
     dae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <write_memory+0xe8>
     db8:	9c 83       	std	Y+4, r25	; 0x04
     dba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	9e 83       	std	Y+6, r25	; 0x06
     dc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	69 f7       	brne	.-38     	; 0xda8 <write_memory+0xdc>
     dce:	14 c0       	rjmp	.+40     	; 0xdf8 <write_memory+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd0:	6f 81       	ldd	r22, Y+7	; 0x07
     dd2:	78 85       	ldd	r23, Y+8	; 0x08
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	9e 83       	std	Y+6, r25	; 0x06
     de2:	8d 83       	std	Y+5, r24	; 0x05
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <write_memory+0x124>
     df4:	9a 83       	std	Y+2, r25	; 0x02
     df6:	89 83       	std	Y+1, r24	; 0x01


}
void write_memory(uint8 pass[]){

	for( i =0;i<5;i++){
     df8:	80 91 7d 00 	lds	r24, 0x007D
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 93 7d 00 	sts	0x007D, r24
     e02:	80 91 7d 00 	lds	r24, 0x007D
     e06:	85 30       	cpi	r24, 0x05	; 5
     e08:	08 f4       	brcc	.+2      	; 0xe0c <write_memory+0x140>
     e0a:	6f cf       	rjmp	.-290    	; 0xcea <write_memory+0x1e>
		EEPROM_writeByte(0x0311+i, pass[i]);
		_delay_ms(10);
/* delay required to save in eeprom*/

}
}
     e0c:	60 96       	adiw	r28, 0x10	; 16
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <verfiy_memory_pass>:
/*used to check the pass eneter in open and chane func*/
uint8 verfiy_memory_pass(uint8 pass[]){
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	61 97       	sbiw	r28, 0x11	; 17
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	98 8b       	std	Y+16, r25	; 0x10
     e34:	8f 87       	std	Y+15, r24	; 0x0f

	for ( i = 0;i<5;i++){
     e36:	10 92 7d 00 	sts	0x007D, r1
     e3a:	89 c0       	rjmp	.+274    	; 0xf4e <verfiy_memory_pass+0x130>

		EEPROM_readByte(0x0311+i, pass_memory+i);
     e3c:	80 91 7d 00 	lds	r24, 0x007D
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	8f 5e       	subi	r24, 0xEF	; 239
     e46:	9c 4f       	sbci	r25, 0xFC	; 252
     e48:	ac 01       	movw	r20, r24
     e4a:	80 91 7d 00 	lds	r24, 0x007D
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9c 01       	movw	r18, r24
     e54:	26 57       	subi	r18, 0x76	; 118
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	ca 01       	movw	r24, r20
     e5a:	b9 01       	movw	r22, r18
     e5c:	0e 94 df 09 	call	0x13be	; 0x13be <EEPROM_readByte>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 e2       	ldi	r26, 0x20	; 32
     e66:	b1 e4       	ldi	r27, 0x41	; 65
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	9c 87       	std	Y+12, r25	; 0x0c
     e6c:	ad 87       	std	Y+13, r26	; 0x0d
     e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a ef       	ldi	r20, 0xFA	; 250
     e7e:	54 e4       	ldi	r21, 0x44	; 68
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	98 87       	std	Y+8, r25	; 0x08
     e8c:	a9 87       	std	Y+9, r26	; 0x09
     e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <verfiy_memory_pass+0x94>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9e 83       	std	Y+6, r25	; 0x06
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <verfiy_memory_pass+0x112>
	else if (__tmp > 65535)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <verfiy_memory_pass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	6b 85       	ldd	r22, Y+11	; 0x0b
     ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <verfiy_memory_pass+0xf4>
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <verfiy_memory_pass+0xe2>
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <verfiy_memory_pass+0xd6>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <verfiy_memory_pass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <verfiy_memory_pass+0x11e>
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
}
}
/*used to check the pass eneter in open and chane func*/
uint8 verfiy_memory_pass(uint8 pass[]){

	for ( i = 0;i<5;i++){
     f44:	80 91 7d 00 	lds	r24, 0x007D
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	80 93 7d 00 	sts	0x007D, r24
     f4e:	80 91 7d 00 	lds	r24, 0x007D
     f52:	85 30       	cpi	r24, 0x05	; 5
     f54:	08 f4       	brcc	.+2      	; 0xf58 <verfiy_memory_pass+0x13a>
     f56:	72 cf       	rjmp	.-284    	; 0xe3c <verfiy_memory_pass+0x1e>

		EEPROM_readByte(0x0311+i, pass_memory+i);
		_delay_ms(10);
	}
	for( i =0;i<5;i++){
     f58:	10 92 7d 00 	sts	0x007D, r1
     f5c:	1c c0       	rjmp	.+56     	; 0xf96 <verfiy_memory_pass+0x178>

		if(pass[i]!=pass_memory[i])
     f5e:	80 91 7d 00 	lds	r24, 0x007D
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	8f 85       	ldd	r24, Y+15	; 0x0f
     f68:	98 89       	ldd	r25, Y+16	; 0x10
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	20 81       	ld	r18, Z
     f72:	80 91 7d 00 	lds	r24, 0x007D
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	fc 01       	movw	r30, r24
     f7c:	e6 57       	subi	r30, 0x76	; 118
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	28 17       	cp	r18, r24
     f84:	19 f0       	breq	.+6      	; 0xf8c <verfiy_memory_pass+0x16e>
			return wrong_pass;
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	89 8b       	std	Y+17, r24	; 0x11
     f8a:	0b c0       	rjmp	.+22     	; 0xfa2 <verfiy_memory_pass+0x184>
	for ( i = 0;i<5;i++){

		EEPROM_readByte(0x0311+i, pass_memory+i);
		_delay_ms(10);
	}
	for( i =0;i<5;i++){
     f8c:	80 91 7d 00 	lds	r24, 0x007D
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	80 93 7d 00 	sts	0x007D, r24
     f96:	80 91 7d 00 	lds	r24, 0x007D
     f9a:	85 30       	cpi	r24, 0x05	; 5
     f9c:	00 f3       	brcs	.-64     	; 0xf5e <verfiy_memory_pass+0x140>

		if(pass[i]!=pass_memory[i])
			return wrong_pass;

	}
	return right_pass;
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	89 8b       	std	Y+17, r24	; 0x11
     fa2:	89 89       	ldd	r24, Y+17	; 0x11
}
     fa4:	61 96       	adiw	r28, 0x11	; 17
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <sec_3>:


void sec_3(){
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	count++;
     fbe:	80 91 7c 00 	lds	r24, 0x007C
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	80 93 7c 00 	sts	0x007C, r24
	if (count == 3){
     fc8:	80 91 7c 00 	lds	r24, 0x007C
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	31 f4       	brne	.+12     	; 0xfdc <sec_3+0x26>

		Timer1_deInit();
     fd0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Timer1_deInit>
		DcMotor_Rotate(Anti_Clockwise, 100);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	64 e6       	ldi	r22, 0x64	; 100
     fd8:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>

	}

}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <sec_15>:

void sec_15(){
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	count++;
     fea:	80 91 7c 00 	lds	r24, 0x007C
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	80 93 7c 00 	sts	0x007C, r24
	if(count==15){
     ff4:	80 91 7c 00 	lds	r24, 0x007C
     ff8:	8f 30       	cpi	r24, 0x0F	; 15
     ffa:	31 f4       	brne	.+12     	; 0x1008 <sec_15+0x26>

		Timer1_deInit();
     ffc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Timer1_deInit>
		DcMotor_Rotate(Stop, 100);
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	64 e6       	ldi	r22, 0x64	; 100
    1004:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>

	}
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <timer1delay>:
/*
 * set the call bace func of timer1
 * */
void timer1delay(uint8 sec){
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	2e 97       	sbiw	r28, 0x0e	; 14
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	8f 83       	std	Y+7, r24	; 0x07

	count =0;
    1024:	10 92 7c 00 	sts	0x007C, r1
	Timer1_ConfigType config_t1={0,31250,FCPU_256,CTC};
    1028:	9e 01       	movw	r18, r28
    102a:	2f 5f       	subi	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	3b 87       	std	Y+11, r19	; 0x0b
    1030:	2a 87       	std	Y+10, r18	; 0x0a
    1032:	88 e6       	ldi	r24, 0x68	; 104
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9d 87       	std	Y+13, r25	; 0x0d
    1038:	8c 87       	std	Y+12, r24	; 0x0c
    103a:	96 e0       	ldi	r25, 0x06	; 6
    103c:	9e 87       	std	Y+14, r25	; 0x0e
    103e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1040:	fd 85       	ldd	r31, Y+13	; 0x0d
    1042:	00 80       	ld	r0, Z
    1044:	2c 85       	ldd	r18, Y+12	; 0x0c
    1046:	3d 85       	ldd	r19, Y+13	; 0x0d
    1048:	2f 5f       	subi	r18, 0xFF	; 255
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	3d 87       	std	Y+13, r19	; 0x0d
    104e:	2c 87       	std	Y+12, r18	; 0x0c
    1050:	ea 85       	ldd	r30, Y+10	; 0x0a
    1052:	fb 85       	ldd	r31, Y+11	; 0x0b
    1054:	00 82       	st	Z, r0
    1056:	2a 85       	ldd	r18, Y+10	; 0x0a
    1058:	3b 85       	ldd	r19, Y+11	; 0x0b
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	3b 87       	std	Y+11, r19	; 0x0b
    1060:	2a 87       	std	Y+10, r18	; 0x0a
    1062:	3e 85       	ldd	r19, Y+14	; 0x0e
    1064:	31 50       	subi	r19, 0x01	; 1
    1066:	3e 87       	std	Y+14, r19	; 0x0e
    1068:	8e 85       	ldd	r24, Y+14	; 0x0e
    106a:	88 23       	and	r24, r24
    106c:	41 f7       	brne	.-48     	; 0x103e <timer1delay+0x30>
	Timer1_init(&config_t1);
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Timer1_init>

	switch (sec){
    1076:	8f 81       	ldd	r24, Y+7	; 0x07
    1078:	e8 2f       	mov	r30, r24
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	f9 87       	std	Y+9, r31	; 0x09
    107e:	e8 87       	std	Y+8, r30	; 0x08
    1080:	28 85       	ldd	r18, Y+8	; 0x08
    1082:	39 85       	ldd	r19, Y+9	; 0x09
    1084:	23 30       	cpi	r18, 0x03	; 3
    1086:	31 05       	cpc	r19, r1
    1088:	31 f0       	breq	.+12     	; 0x1096 <timer1delay+0x88>
    108a:	88 85       	ldd	r24, Y+8	; 0x08
    108c:	99 85       	ldd	r25, Y+9	; 0x09
    108e:	8f 30       	cpi	r24, 0x0F	; 15
    1090:	91 05       	cpc	r25, r1
    1092:	31 f0       	breq	.+12     	; 0x10a0 <timer1delay+0x92>
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <timer1delay+0x9a>
	case 3 :

		Timer1_setCallBack(sec_3);
    1096:	8b ed       	ldi	r24, 0xDB	; 219
    1098:	97 e0       	ldi	r25, 0x07	; 7
    109a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <Timer1_setCallBack>
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <timer1delay+0x9a>
		break;
	case 15:

		Timer1_setCallBack(sec_15);
    10a0:	81 ef       	ldi	r24, 0xF1	; 241
    10a2:	97 e0       	ldi	r25, 0x07	; 7
    10a4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <Timer1_setCallBack>
		break;
	}

}
    10a8:	2e 96       	adiw	r28, 0x0e	; 14
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <main>:

int main(){
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	6a 97       	sbiw	r28, 0x1a	; 26
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61

	TWI_ConfigType configt ={0b00000010,400000,1};
    10d2:	ce 01       	movw	r24, r28
    10d4:	04 96       	adiw	r24, 0x04	; 4
    10d6:	9a 8b       	std	Y+18, r25	; 0x12
    10d8:	89 8b       	std	Y+17, r24	; 0x11
    10da:	e5 e7       	ldi	r30, 0x75	; 117
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	fc 8b       	std	Y+20, r31	; 0x14
    10e0:	eb 8b       	std	Y+19, r30	; 0x13
    10e2:	f6 e0       	ldi	r31, 0x06	; 6
    10e4:	fd 8b       	std	Y+21, r31	; 0x15
    10e6:	eb 89       	ldd	r30, Y+19	; 0x13
    10e8:	fc 89       	ldd	r31, Y+20	; 0x14
    10ea:	00 80       	ld	r0, Z
    10ec:	8b 89       	ldd	r24, Y+19	; 0x13
    10ee:	9c 89       	ldd	r25, Y+20	; 0x14
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	9c 8b       	std	Y+20, r25	; 0x14
    10f4:	8b 8b       	std	Y+19, r24	; 0x13
    10f6:	e9 89       	ldd	r30, Y+17	; 0x11
    10f8:	fa 89       	ldd	r31, Y+18	; 0x12
    10fa:	00 82       	st	Z, r0
    10fc:	89 89       	ldd	r24, Y+17	; 0x11
    10fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	9a 8b       	std	Y+18, r25	; 0x12
    1104:	89 8b       	std	Y+17, r24	; 0x11
    1106:	9d 89       	ldd	r25, Y+21	; 0x15
    1108:	91 50       	subi	r25, 0x01	; 1
    110a:	9d 8b       	std	Y+21, r25	; 0x15
    110c:	ed 89       	ldd	r30, Y+21	; 0x15
    110e:	ee 23       	and	r30, r30
    1110:	51 f7       	brne	.-44     	; 0x10e6 <main+0x2c>
	TWI_init( & configt);/* to set configration of twi*/
    1112:	ce 01       	movw	r24, r28
    1114:	04 96       	adiw	r24, 0x04	; 4
    1116:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <TWI_init>
	UART_ConfigType configx ={d_8bit,disable,one_bit,9600};/* to set configration of uart*/
    111a:	ce 01       	movw	r24, r28
    111c:	0a 96       	adiw	r24, 0x0a	; 10
    111e:	9f 8b       	std	Y+23, r25	; 0x17
    1120:	8e 8b       	std	Y+22, r24	; 0x16
    1122:	ee e6       	ldi	r30, 0x6E	; 110
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	f9 8f       	std	Y+25, r31	; 0x19
    1128:	e8 8f       	std	Y+24, r30	; 0x18
    112a:	f7 e0       	ldi	r31, 0x07	; 7
    112c:	fa 8f       	std	Y+26, r31	; 0x1a
    112e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1130:	f9 8d       	ldd	r31, Y+25	; 0x19
    1132:	00 80       	ld	r0, Z
    1134:	88 8d       	ldd	r24, Y+24	; 0x18
    1136:	99 8d       	ldd	r25, Y+25	; 0x19
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	99 8f       	std	Y+25, r25	; 0x19
    113c:	88 8f       	std	Y+24, r24	; 0x18
    113e:	ee 89       	ldd	r30, Y+22	; 0x16
    1140:	ff 89       	ldd	r31, Y+23	; 0x17
    1142:	00 82       	st	Z, r0
    1144:	8e 89       	ldd	r24, Y+22	; 0x16
    1146:	9f 89       	ldd	r25, Y+23	; 0x17
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	9f 8b       	std	Y+23, r25	; 0x17
    114c:	8e 8b       	std	Y+22, r24	; 0x16
    114e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1150:	91 50       	subi	r25, 0x01	; 1
    1152:	9a 8f       	std	Y+26, r25	; 0x1a
    1154:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1156:	ee 23       	and	r30, r30
    1158:	51 f7       	brne	.-44     	; 0x112e <main+0x74>
	UART_init(& configx);
    115a:	ce 01       	movw	r24, r28
    115c:	0a 96       	adiw	r24, 0x0a	; 10
    115e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <UART_init>
	DcMotor_Init();
    1162:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_Init>
	Buzzer_init();
    1166:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	SREG|=1<<7;
    116a:	af e5       	ldi	r26, 0x5F	; 95
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ef e5       	ldi	r30, 0x5F	; 95
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 68       	ori	r24, 0x80	; 128
    1176:	8c 93       	st	X, r24
	uint8 status=failed;
    1178:	1b 82       	std	Y+3, r1	; 0x03
	uint8 state=failed;
    117a:	1a 82       	std	Y+2, r1	; 0x02
    117c:	42 c0       	rjmp	.+132    	; 0x1202 <main+0x148>

	uint8 choose;

	while(status == failed){

		for ( i=0; i<5;i++)
    117e:	10 92 7d 00 	sts	0x007D, r1
    1182:	0f c0       	rjmp	.+30     	; 0x11a2 <main+0xe8>
			pass[i]=UART_recieveByte();
    1184:	80 91 7d 00 	lds	r24, 0x007D
    1188:	08 2f       	mov	r16, r24
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_recieveByte>
    1190:	f8 01       	movw	r30, r16
    1192:	e0 58       	subi	r30, 0x80	; 128
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	80 83       	st	Z, r24

	uint8 choose;

	while(status == failed){

		for ( i=0; i<5;i++)
    1198:	80 91 7d 00 	lds	r24, 0x007D
    119c:	8f 5f       	subi	r24, 0xFF	; 255
    119e:	80 93 7d 00 	sts	0x007D, r24
    11a2:	80 91 7d 00 	lds	r24, 0x007D
    11a6:	85 30       	cpi	r24, 0x05	; 5
    11a8:	68 f3       	brcs	.-38     	; 0x1184 <main+0xca>
			pass[i]=UART_recieveByte();

		for ( i=0; i<5;i++)
    11aa:	10 92 7d 00 	sts	0x007D, r1
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <main+0x114>
			pass2[i]=UART_recieveByte();
    11b0:	80 91 7d 00 	lds	r24, 0x007D
    11b4:	08 2f       	mov	r16, r24
    11b6:	10 e0       	ldi	r17, 0x00	; 0
    11b8:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_recieveByte>
    11bc:	f8 01       	movw	r30, r16
    11be:	eb 57       	subi	r30, 0x7B	; 123
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 83       	st	Z, r24
	while(status == failed){

		for ( i=0; i<5;i++)
			pass[i]=UART_recieveByte();

		for ( i=0; i<5;i++)
    11c4:	80 91 7d 00 	lds	r24, 0x007D
    11c8:	8f 5f       	subi	r24, 0xFF	; 255
    11ca:	80 93 7d 00 	sts	0x007D, r24
    11ce:	80 91 7d 00 	lds	r24, 0x007D
    11d2:	85 30       	cpi	r24, 0x05	; 5
    11d4:	68 f3       	brcs	.-38     	; 0x11b0 <main+0xf6>
			pass2[i]=UART_recieveByte();

		status = check_pass(pass, pass2);
    11d6:	80 e8       	ldi	r24, 0x80	; 128
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	25 e8       	ldi	r18, 0x85	; 133
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	b9 01       	movw	r22, r18
    11e0:	0e 94 2c 06 	call	0xc58	; 0xc58 <check_pass>
    11e4:	8b 83       	std	Y+3, r24	; 0x03
              if(status==succeeded){
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	41 f4       	brne	.+16     	; 0x11fc <main+0x142>
            	  write_memory(pass);
    11ec:	80 e8       	ldi	r24, 0x80	; 128
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 66 06 	call	0xccc	; 0xccc <write_memory>
		       UART_sendByte(succeeded);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <UART_sendByte>
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <main+0x148>
              }
             else{
       		   UART_sendByte(failed);
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <UART_sendByte>
	uint8 status=failed;
	uint8 state=failed;

	uint8 choose;

	while(status == failed){
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 23       	and	r24, r24
    1206:	09 f4       	brne	.+2      	; 0x120a <main+0x150>
    1208:	ba cf       	rjmp	.-140    	; 0x117e <main+0xc4>

	}


	while(1){
		choose = UART_recieveByte();
    120a:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_recieveByte>
    120e:	89 83       	std	Y+1, r24	; 0x01


		if(choose==Checkpass)
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	f9 f4       	brne	.+62     	; 0x1254 <main+0x19a>
		{
			for( i=0;i<5;i++){
    1216:	10 92 7d 00 	sts	0x007D, r1
    121a:	0f c0       	rjmp	.+30     	; 0x123a <main+0x180>
				pass[i]= UART_recieveByte();
    121c:	80 91 7d 00 	lds	r24, 0x007D
    1220:	08 2f       	mov	r16, r24
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_recieveByte>
    1228:	f8 01       	movw	r30, r16
    122a:	e0 58       	subi	r30, 0x80	; 128
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 83       	st	Z, r24
		choose = UART_recieveByte();


		if(choose==Checkpass)
		{
			for( i=0;i<5;i++){
    1230:	80 91 7d 00 	lds	r24, 0x007D
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 7d 00 	sts	0x007D, r24
    123a:	80 91 7d 00 	lds	r24, 0x007D
    123e:	85 30       	cpi	r24, 0x05	; 5
    1240:	68 f3       	brcs	.-38     	; 0x121c <main+0x162>
				pass[i]= UART_recieveByte();
			}
			status = verfiy_memory_pass(pass);
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 0f 07 	call	0xe1e	; 0xe1e <verfiy_memory_pass>
    124a:	8b 83       	std	Y+3, r24	; 0x03
			UART_sendByte(status);
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <UART_sendByte>
    1252:	db cf       	rjmp	.-74     	; 0x120a <main+0x150>
		}



		else if(choose==save_newpass)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	85 30       	cpi	r24, 0x05	; 5
    1258:	09 f0       	breq	.+2      	; 0x125c <main+0x1a2>
    125a:	46 c0       	rjmp	.+140    	; 0x12e8 <main+0x22e>
		{
               if(state==failed){
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 23       	and	r24, r24
    1260:	a1 f6       	brne	.-88     	; 0x120a <main+0x150>
				for ( i=0; i<5;i++){
    1262:	10 92 7d 00 	sts	0x007D, r1
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <main+0x1cc>
					pass[i]=UART_recieveByte();
    1268:	80 91 7d 00 	lds	r24, 0x007D
    126c:	08 2f       	mov	r16, r24
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_recieveByte>
    1274:	f8 01       	movw	r30, r16
    1276:	e0 58       	subi	r30, 0x80	; 128
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 83       	st	Z, r24


		else if(choose==save_newpass)
		{
               if(state==failed){
				for ( i=0; i<5;i++){
    127c:	80 91 7d 00 	lds	r24, 0x007D
    1280:	8f 5f       	subi	r24, 0xFF	; 255
    1282:	80 93 7d 00 	sts	0x007D, r24
    1286:	80 91 7d 00 	lds	r24, 0x007D
    128a:	85 30       	cpi	r24, 0x05	; 5
    128c:	68 f3       	brcs	.-38     	; 0x1268 <main+0x1ae>
					pass[i]=UART_recieveByte();
				}
				for ( i=0; i<5;i++){
    128e:	10 92 7d 00 	sts	0x007D, r1
    1292:	0f c0       	rjmp	.+30     	; 0x12b2 <main+0x1f8>
					pass2[i]=UART_recieveByte();
    1294:	80 91 7d 00 	lds	r24, 0x007D
    1298:	08 2f       	mov	r16, r24
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_recieveByte>
    12a0:	f8 01       	movw	r30, r16
    12a2:	eb 57       	subi	r30, 0x7B	; 123
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	80 83       	st	Z, r24
		{
               if(state==failed){
				for ( i=0; i<5;i++){
					pass[i]=UART_recieveByte();
				}
				for ( i=0; i<5;i++){
    12a8:	80 91 7d 00 	lds	r24, 0x007D
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	80 93 7d 00 	sts	0x007D, r24
    12b2:	80 91 7d 00 	lds	r24, 0x007D
    12b6:	85 30       	cpi	r24, 0x05	; 5
    12b8:	68 f3       	brcs	.-38     	; 0x1294 <main+0x1da>
					pass2[i]=UART_recieveByte();
				}
				state = check_pass(pass, pass2);
    12ba:	80 e8       	ldi	r24, 0x80	; 128
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	25 e8       	ldi	r18, 0x85	; 133
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	b9 01       	movw	r22, r18
    12c4:	0e 94 2c 06 	call	0xc58	; 0xc58 <check_pass>
    12c8:	8a 83       	std	Y+2, r24	; 0x02
			      if(state==succeeded){
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	41 f4       	brne	.+16     	; 0x12e0 <main+0x226>

			            	  write_memory(pass);
    12d0:	80 e8       	ldi	r24, 0x80	; 128
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 66 06 	call	0xccc	; 0xccc <write_memory>

				          UART_sendByte(succeeded);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <UART_sendByte>
    12de:	95 cf       	rjmp	.-214    	; 0x120a <main+0x150>

			              }
			      else{
			    	  UART_sendByte(failed);
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <UART_sendByte>
    12e6:	91 cf       	rjmp	.-222    	; 0x120a <main+0x150>


		}


		else if(choose==open)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	86 30       	cpi	r24, 0x06	; 6
    12ec:	d1 f4       	brne	.+52     	; 0x1322 <main+0x268>
		{
			DcMotor_Rotate(Clockwise, 100);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	64 e6       	ldi	r22, 0x64	; 100
    12f2:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
			timer1delay(15);
    12f6:	8f e0       	ldi	r24, 0x0F	; 15
    12f8:	0e 94 07 08 	call	0x100e	; 0x100e <timer1delay>
			while(count!=15){}
    12fc:	80 91 7c 00 	lds	r24, 0x007C
    1300:	8f 30       	cpi	r24, 0x0F	; 15
    1302:	e1 f7       	brne	.-8      	; 0x12fc <main+0x242>
			timer1delay(3);
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	0e 94 07 08 	call	0x100e	; 0x100e <timer1delay>
			while(count!=3){}
    130a:	80 91 7c 00 	lds	r24, 0x007C
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	e1 f7       	brne	.-8      	; 0x130a <main+0x250>
			timer1delay(15);
    1312:	8f e0       	ldi	r24, 0x0F	; 15
    1314:	0e 94 07 08 	call	0x100e	; 0x100e <timer1delay>
			while(count!=15){}
    1318:	80 91 7c 00 	lds	r24, 0x007C
    131c:	8f 30       	cpi	r24, 0x0F	; 15
    131e:	e1 f7       	brne	.-8      	; 0x1318 <main+0x25e>
    1320:	74 cf       	rjmp	.-280    	; 0x120a <main+0x150>
	     }


		else if(choose==buzzeron)
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	87 30       	cpi	r24, 0x07	; 7
    1326:	19 f4       	brne	.+6      	; 0x132e <main+0x274>
		{
			Buzzer_on();
    1328:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
    132c:	6e cf       	rjmp	.-292    	; 0x120a <main+0x150>
		}


		else if(choose== buzzerOff){
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	88 30       	cpi	r24, 0x08	; 8
    1332:	09 f0       	breq	.+2      	; 0x1336 <main+0x27c>
    1334:	6a cf       	rjmp	.-300    	; 0x120a <main+0x150>

			Buzzer_off();
    1336:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
    133a:	67 cf       	rjmp	.-306    	; 0x120a <main+0x150>

0000133c <EEPROM_writeByte>:
#include "external_eeprom.h"

#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <EEPROM_writeByte+0x6>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <EEPROM_writeByte+0x8>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	6b 83       	std	Y+3, r22	; 0x03

    TWI_start();
    134e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1352:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    1356:	88 30       	cpi	r24, 0x08	; 8
    1358:	11 f0       	breq	.+4      	; 0x135e <EEPROM_writeByte+0x22>
        return ERROR;
    135a:	1c 82       	std	Y+4, r1	; 0x04
    135c:	28 c0       	rjmp	.+80     	; 0x13ae <EEPROM_writeByte+0x72>
		

    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	80 70       	andi	r24, 0x00	; 0
    1364:	97 70       	andi	r25, 0x07	; 7
    1366:	88 0f       	add	r24, r24
    1368:	89 2f       	mov	r24, r25
    136a:	88 1f       	adc	r24, r24
    136c:	99 0b       	sbc	r25, r25
    136e:	91 95       	neg	r25
    1370:	80 6a       	ori	r24, 0xA0	; 160
    1372:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1376:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    137a:	88 31       	cpi	r24, 0x18	; 24
    137c:	11 f0       	breq	.+4      	; 0x1382 <EEPROM_writeByte+0x46>
        return ERROR; 
    137e:	1c 82       	std	Y+4, r1	; 0x04
    1380:	16 c0       	rjmp	.+44     	; 0x13ae <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1388:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    138c:	88 32       	cpi	r24, 0x28	; 40
    138e:	11 f0       	breq	.+4      	; 0x1394 <EEPROM_writeByte+0x58>
        return ERROR;
    1390:	1c 82       	std	Y+4, r1	; 0x04
    1392:	0d c0       	rjmp	.+26     	; 0x13ae <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    139a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    139e:	88 32       	cpi	r24, 0x28	; 40
    13a0:	11 f0       	breq	.+4      	; 0x13a6 <EEPROM_writeByte+0x6a>
        return ERROR;
    13a2:	1c 82       	std	Y+4, r1	; 0x04
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    13a6:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <TWI_stop>
	
    return SUCCESS;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	8c 83       	std	Y+4, r24	; 0x04
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <EEPROM_readByte+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <EEPROM_readByte+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	7c 83       	std	Y+4, r23	; 0x04
    13d2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13d4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13d8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    13dc:	88 30       	cpi	r24, 0x08	; 8
    13de:	11 f0       	breq	.+4      	; 0x13e4 <EEPROM_readByte+0x26>
        return ERROR;
    13e0:	1d 82       	std	Y+5, r1	; 0x05
    13e2:	44 c0       	rjmp	.+136    	; 0x146c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	80 70       	andi	r24, 0x00	; 0
    13ea:	97 70       	andi	r25, 0x07	; 7
    13ec:	88 0f       	add	r24, r24
    13ee:	89 2f       	mov	r24, r25
    13f0:	88 1f       	adc	r24, r24
    13f2:	99 0b       	sbc	r25, r25
    13f4:	91 95       	neg	r25
    13f6:	80 6a       	ori	r24, 0xA0	; 160
    13f8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13fc:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    1400:	88 31       	cpi	r24, 0x18	; 24
    1402:	11 f0       	breq	.+4      	; 0x1408 <EEPROM_readByte+0x4a>
        return ERROR;
    1404:	1d 82       	std	Y+5, r1	; 0x05
    1406:	32 c0       	rjmp	.+100    	; 0x146c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    140e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    1412:	88 32       	cpi	r24, 0x28	; 40
    1414:	11 f0       	breq	.+4      	; 0x141a <EEPROM_readByte+0x5c>
        return ERROR;
    1416:	1d 82       	std	Y+5, r1	; 0x05
    1418:	29 c0       	rjmp	.+82     	; 0x146c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    141a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    141e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    1422:	80 31       	cpi	r24, 0x10	; 16
    1424:	11 f0       	breq	.+4      	; 0x142a <EEPROM_readByte+0x6c>
        return ERROR;
    1426:	1d 82       	std	Y+5, r1	; 0x05
    1428:	21 c0       	rjmp	.+66     	; 0x146c <EEPROM_readByte+0xae>
		

    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	80 70       	andi	r24, 0x00	; 0
    1430:	97 70       	andi	r25, 0x07	; 7
    1432:	88 0f       	add	r24, r24
    1434:	89 2f       	mov	r24, r25
    1436:	88 1f       	adc	r24, r24
    1438:	99 0b       	sbc	r25, r25
    143a:	91 95       	neg	r25
    143c:	81 6a       	ori	r24, 0xA1	; 161
    143e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1442:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    1446:	80 34       	cpi	r24, 0x40	; 64
    1448:	11 f0       	breq	.+4      	; 0x144e <EEPROM_readByte+0x90>
        return ERROR;
    144a:	1d 82       	std	Y+5, r1	; 0x05
    144c:	0f c0       	rjmp	.+30     	; 0x146c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    144e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <TWI_readByteWithNACK>
    1452:	eb 81       	ldd	r30, Y+3	; 0x03
    1454:	fc 81       	ldd	r31, Y+4	; 0x04
    1456:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1458:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_getStatus>
    145c:	88 35       	cpi	r24, 0x58	; 88
    145e:	11 f0       	breq	.+4      	; 0x1464 <EEPROM_readByte+0xa6>
        return ERROR;
    1460:	1d 82       	std	Y+5, r1	; 0x05
    1462:	04 c0       	rjmp	.+8      	; 0x146c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1464:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <TWI_stop>

    return SUCCESS;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <GPIO_setupPinDirection>:
#include "common_macros.h" /* To use the macros like SET_BIT */
#include "avr/io.h" /* To use the IO Ports Registers */


void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <GPIO_setupPinDirection+0x6>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <GPIO_setupPinDirection+0x8>
    1486:	0f 92       	push	r0
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	6a 83       	std	Y+2, r22	; 0x02
    1490:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	88 30       	cpi	r24, 0x08	; 8
    1496:	08 f0       	brcs	.+2      	; 0x149a <GPIO_setupPinDirection+0x1c>
    1498:	d5 c0       	rjmp	.+426    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <GPIO_setupPinDirection+0x24>
    14a0:	d1 c0       	rjmp	.+418    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3d 83       	std	Y+5, r19	; 0x05
    14aa:	2c 83       	std	Y+4, r18	; 0x04
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <GPIO_setupPinDirection+0x3a>
    14b6:	43 c0       	rjmp	.+134    	; 0x153e <GPIO_setupPinDirection+0xc0>
    14b8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ba:	3d 81       	ldd	r19, Y+5	; 0x05
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	2c f4       	brge	.+10     	; 0x14cc <GPIO_setupPinDirection+0x4e>
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	9d 81       	ldd	r25, Y+5	; 0x05
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	71 f0       	breq	.+28     	; 0x14e6 <GPIO_setupPinDirection+0x68>
    14ca:	bc c0       	rjmp	.+376    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
    14cc:	2c 81       	ldd	r18, Y+4	; 0x04
    14ce:	3d 81       	ldd	r19, Y+5	; 0x05
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <GPIO_setupPinDirection+0x5a>
    14d6:	5f c0       	rjmp	.+190    	; 0x1596 <GPIO_setupPinDirection+0x118>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <GPIO_setupPinDirection+0x66>
    14e2:	85 c0       	rjmp	.+266    	; 0x15ee <GPIO_setupPinDirection+0x170>
    14e4:	af c0       	rjmp	.+350    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	a1 f4       	brne	.+40     	; 0x1514 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14ec:	aa e3       	ldi	r26, 0x3A	; 58
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ea e3       	ldi	r30, 0x3A	; 58
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <GPIO_setupPinDirection+0x8c>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <GPIO_setupPinDirection+0x88>
    150e:	84 2b       	or	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	98 c0       	rjmp	.+304    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1514:	aa e3       	ldi	r26, 0x3A	; 58
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ea e3       	ldi	r30, 0x3A	; 58
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <GPIO_setupPinDirection+0xb4>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <GPIO_setupPinDirection+0xb0>
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	83 c0       	rjmp	.+262    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	a1 f4       	brne	.+40     	; 0x156c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1544:	a7 e3       	ldi	r26, 0x37	; 55
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e7 e3       	ldi	r30, 0x37	; 55
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <GPIO_setupPinDirection+0xe4>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <GPIO_setupPinDirection+0xe0>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	6c c0       	rjmp	.+216    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    156c:	a7 e3       	ldi	r26, 0x37	; 55
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e7 e3       	ldi	r30, 0x37	; 55
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_setupPinDirection+0x10c>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_setupPinDirection+0x108>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	57 c0       	rjmp	.+174    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	a1 f4       	brne	.+40     	; 0x15c4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    159c:	a4 e3       	ldi	r26, 0x34	; 52
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e4 e3       	ldi	r30, 0x34	; 52
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_setupPinDirection+0x13c>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_setupPinDirection+0x138>
    15be:	84 2b       	or	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	40 c0       	rjmp	.+128    	; 0x1644 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15c4:	a4 e3       	ldi	r26, 0x34	; 52
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e4 e3       	ldi	r30, 0x34	; 52
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <GPIO_setupPinDirection+0x164>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <GPIO_setupPinDirection+0x160>
    15e6:	80 95       	com	r24
    15e8:	84 23       	and	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	2b c0       	rjmp	.+86     	; 0x1644 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	a1 f4       	brne	.+40     	; 0x161c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15f4:	a1 e3       	ldi	r26, 0x31	; 49
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e1 e3       	ldi	r30, 0x31	; 49
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_setupPinDirection+0x194>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_setupPinDirection+0x190>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    161c:	a1 e3       	ldi	r26, 0x31	; 49
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e1 e3       	ldi	r30, 0x31	; 49
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <GPIO_setupPinDirection+0x1bc>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <GPIO_setupPinDirection+0x1b8>
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <GPIO_writePin>:


void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <GPIO_writePin+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <GPIO_writePin+0x8>
    165c:	0f 92       	push	r0
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	6a 83       	std	Y+2, r22	; 0x02
    1666:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	88 30       	cpi	r24, 0x08	; 8
    166c:	08 f0       	brcs	.+2      	; 0x1670 <GPIO_writePin+0x1c>
    166e:	d5 c0       	rjmp	.+426    	; 0x181a <GPIO_writePin+0x1c6>
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	08 f0       	brcs	.+2      	; 0x1678 <GPIO_writePin+0x24>
    1676:	d1 c0       	rjmp	.+418    	; 0x181a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3d 83       	std	Y+5, r19	; 0x05
    1680:	2c 83       	std	Y+4, r18	; 0x04
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	91 05       	cpc	r25, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <GPIO_writePin+0x3a>
    168c:	43 c0       	rjmp	.+134    	; 0x1714 <GPIO_writePin+0xc0>
    168e:	2c 81       	ldd	r18, Y+4	; 0x04
    1690:	3d 81       	ldd	r19, Y+5	; 0x05
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	2c f4       	brge	.+10     	; 0x16a2 <GPIO_writePin+0x4e>
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	9d 81       	ldd	r25, Y+5	; 0x05
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	71 f0       	breq	.+28     	; 0x16bc <GPIO_writePin+0x68>
    16a0:	bc c0       	rjmp	.+376    	; 0x181a <GPIO_writePin+0x1c6>
    16a2:	2c 81       	ldd	r18, Y+4	; 0x04
    16a4:	3d 81       	ldd	r19, Y+5	; 0x05
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <GPIO_writePin+0x5a>
    16ac:	5f c0       	rjmp	.+190    	; 0x176c <GPIO_writePin+0x118>
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	9d 81       	ldd	r25, Y+5	; 0x05
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <GPIO_writePin+0x66>
    16b8:	85 c0       	rjmp	.+266    	; 0x17c4 <GPIO_writePin+0x170>
    16ba:	af c0       	rjmp	.+350    	; 0x181a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	a1 f4       	brne	.+40     	; 0x16ea <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16c2:	ab e3       	ldi	r26, 0x3B	; 59
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	eb e3       	ldi	r30, 0x3B	; 59
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <GPIO_writePin+0x8c>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <GPIO_writePin+0x88>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	98 c0       	rjmp	.+304    	; 0x181a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16ea:	ab e3       	ldi	r26, 0x3B	; 59
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e3       	ldi	r30, 0x3B	; 59
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_writePin+0xb4>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <GPIO_writePin+0xb0>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	83 c0       	rjmp	.+262    	; 0x181a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	a1 f4       	brne	.+40     	; 0x1742 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    171a:	a8 e3       	ldi	r26, 0x38	; 56
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e8 e3       	ldi	r30, 0x38	; 56
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_writePin+0xe4>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_writePin+0xe0>
    173c:	84 2b       	or	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	6c c0       	rjmp	.+216    	; 0x181a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1742:	a8 e3       	ldi	r26, 0x38	; 56
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e8 e3       	ldi	r30, 0x38	; 56
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_writePin+0x10c>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_writePin+0x108>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	57 c0       	rjmp	.+174    	; 0x181a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	a1 f4       	brne	.+40     	; 0x179a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1772:	a5 e3       	ldi	r26, 0x35	; 53
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e5 e3       	ldi	r30, 0x35	; 53
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_writePin+0x13c>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_writePin+0x138>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	40 c0       	rjmp	.+128    	; 0x181a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    179a:	a5 e3       	ldi	r26, 0x35	; 53
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e3       	ldi	r30, 0x35	; 53
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <GPIO_writePin+0x164>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <GPIO_writePin+0x160>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	2b c0       	rjmp	.+86     	; 0x181a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	a1 f4       	brne	.+40     	; 0x17f2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17ca:	a2 e3       	ldi	r26, 0x32	; 50
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e2 e3       	ldi	r30, 0x32	; 50
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_writePin+0x194>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_writePin+0x190>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	14 c0       	rjmp	.+40     	; 0x181a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17f2:	a2 e3       	ldi	r26, 0x32	; 50
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e2 e3       	ldi	r30, 0x32	; 50
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_writePin+0x1bc>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_writePin+0x1b8>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <GPIO_readPin>:


uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <GPIO_readPin+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <GPIO_readPin+0x8>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	8a 83       	std	Y+2, r24	; 0x02
    183a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    183c:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	88 30       	cpi	r24, 0x08	; 8
    1842:	08 f0       	brcs	.+2      	; 0x1846 <GPIO_readPin+0x1c>
    1844:	84 c0       	rjmp	.+264    	; 0x194e <GPIO_readPin+0x124>
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	08 f0       	brcs	.+2      	; 0x184e <GPIO_readPin+0x24>
    184c:	80 c0       	rjmp	.+256    	; 0x194e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3d 83       	std	Y+5, r19	; 0x05
    1856:	2c 83       	std	Y+4, r18	; 0x04
    1858:	4c 81       	ldd	r20, Y+4	; 0x04
    185a:	5d 81       	ldd	r21, Y+5	; 0x05
    185c:	41 30       	cpi	r20, 0x01	; 1
    185e:	51 05       	cpc	r21, r1
    1860:	79 f1       	breq	.+94     	; 0x18c0 <GPIO_readPin+0x96>
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	9d 81       	ldd	r25, Y+5	; 0x05
    1866:	82 30       	cpi	r24, 0x02	; 2
    1868:	91 05       	cpc	r25, r1
    186a:	34 f4       	brge	.+12     	; 0x1878 <GPIO_readPin+0x4e>
    186c:	2c 81       	ldd	r18, Y+4	; 0x04
    186e:	3d 81       	ldd	r19, Y+5	; 0x05
    1870:	21 15       	cp	r18, r1
    1872:	31 05       	cpc	r19, r1
    1874:	69 f0       	breq	.+26     	; 0x1890 <GPIO_readPin+0x66>
    1876:	6b c0       	rjmp	.+214    	; 0x194e <GPIO_readPin+0x124>
    1878:	4c 81       	ldd	r20, Y+4	; 0x04
    187a:	5d 81       	ldd	r21, Y+5	; 0x05
    187c:	42 30       	cpi	r20, 0x02	; 2
    187e:	51 05       	cpc	r21, r1
    1880:	b9 f1       	breq	.+110    	; 0x18f0 <GPIO_readPin+0xc6>
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <GPIO_readPin+0x64>
    188c:	49 c0       	rjmp	.+146    	; 0x1920 <GPIO_readPin+0xf6>
    188e:	5f c0       	rjmp	.+190    	; 0x194e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1890:	e9 e3       	ldi	r30, 0x39	; 57
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <GPIO_readPin+0x7e>
    18a4:	55 95       	asr	r21
    18a6:	47 95       	ror	r20
    18a8:	8a 95       	dec	r24
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <GPIO_readPin+0x7a>
    18ac:	ca 01       	movw	r24, r20
    18ae:	81 70       	andi	r24, 0x01	; 1
    18b0:	90 70       	andi	r25, 0x00	; 0
    18b2:	88 23       	and	r24, r24
    18b4:	19 f0       	breq	.+6      	; 0x18bc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	49 c0       	rjmp	.+146    	; 0x194e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18bc:	19 82       	std	Y+1, r1	; 0x01
    18be:	47 c0       	rjmp	.+142    	; 0x194e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18c0:	e6 e3       	ldi	r30, 0x36	; 54
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a9 01       	movw	r20, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <GPIO_readPin+0xae>
    18d4:	55 95       	asr	r21
    18d6:	47 95       	ror	r20
    18d8:	8a 95       	dec	r24
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <GPIO_readPin+0xaa>
    18dc:	ca 01       	movw	r24, r20
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	90 70       	andi	r25, 0x00	; 0
    18e2:	88 23       	and	r24, r24
    18e4:	19 f0       	breq	.+6      	; 0x18ec <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	31 c0       	rjmp	.+98     	; 0x194e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ec:	19 82       	std	Y+1, r1	; 0x01
    18ee:	2f c0       	rjmp	.+94     	; 0x194e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18f0:	e3 e3       	ldi	r30, 0x33	; 51
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a9 01       	movw	r20, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_readPin+0xde>
    1904:	55 95       	asr	r21
    1906:	47 95       	ror	r20
    1908:	8a 95       	dec	r24
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_readPin+0xda>
    190c:	ca 01       	movw	r24, r20
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	90 70       	andi	r25, 0x00	; 0
    1912:	88 23       	and	r24, r24
    1914:	19 f0       	breq	.+6      	; 0x191c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	19 c0       	rjmp	.+50     	; 0x194e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    191c:	19 82       	std	Y+1, r1	; 0x01
    191e:	17 c0       	rjmp	.+46     	; 0x194e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1920:	e0 e3       	ldi	r30, 0x30	; 48
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a9 01       	movw	r20, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_readPin+0x10e>
    1934:	55 95       	asr	r21
    1936:	47 95       	ror	r20
    1938:	8a 95       	dec	r24
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_readPin+0x10a>
    193c:	ca 01       	movw	r24, r20
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	88 23       	and	r24, r24
    1944:	19 f0       	breq	.+6      	; 0x194c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	01 c0       	rjmp	.+2      	; 0x194e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    194c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    194e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <GPIO_setupPortDirection>:


void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <GPIO_setupPortDirection+0x6>
    1966:	00 d0       	rcall	.+0      	; 0x1968 <GPIO_setupPortDirection+0x8>
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	90 f5       	brcc	.+100    	; 0x19da <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	3c 83       	std	Y+4, r19	; 0x04
    197e:	2b 83       	std	Y+3, r18	; 0x03
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	91 05       	cpc	r25, r1
    1988:	d1 f0       	breq	.+52     	; 0x19be <GPIO_setupPortDirection+0x5e>
    198a:	2b 81       	ldd	r18, Y+3	; 0x03
    198c:	3c 81       	ldd	r19, Y+4	; 0x04
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	2c f4       	brge	.+10     	; 0x199e <GPIO_setupPortDirection+0x3e>
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	61 f0       	breq	.+24     	; 0x19b4 <GPIO_setupPortDirection+0x54>
    199c:	1e c0       	rjmp	.+60     	; 0x19da <GPIO_setupPortDirection+0x7a>
    199e:	2b 81       	ldd	r18, Y+3	; 0x03
    19a0:	3c 81       	ldd	r19, Y+4	; 0x04
    19a2:	22 30       	cpi	r18, 0x02	; 2
    19a4:	31 05       	cpc	r19, r1
    19a6:	81 f0       	breq	.+32     	; 0x19c8 <GPIO_setupPortDirection+0x68>
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	83 30       	cpi	r24, 0x03	; 3
    19ae:	91 05       	cpc	r25, r1
    19b0:	81 f0       	breq	.+32     	; 0x19d2 <GPIO_setupPortDirection+0x72>
    19b2:	13 c0       	rjmp	.+38     	; 0x19da <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19b4:	ea e3       	ldi	r30, 0x3A	; 58
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	80 83       	st	Z, r24
    19bc:	0e c0       	rjmp	.+28     	; 0x19da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19be:	e7 e3       	ldi	r30, 0x37	; 55
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	80 83       	st	Z, r24
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19c8:	e4 e3       	ldi	r30, 0x34	; 52
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	80 83       	st	Z, r24
    19d0:	04 c0       	rjmp	.+8      	; 0x19da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19d2:	e1 e3       	ldi	r30, 0x31	; 49
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <GPIO_writePort>:


void GPIO_writePort(uint8 port_num, uint8 value)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_writePort+0x6>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <GPIO_writePort+0x8>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	84 30       	cpi	r24, 0x04	; 4
    19fc:	90 f5       	brcc	.+100    	; 0x1a62 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3c 83       	std	Y+4, r19	; 0x04
    1a06:	2b 83       	std	Y+3, r18	; 0x03
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	d1 f0       	breq	.+52     	; 0x1a46 <GPIO_writePort+0x5e>
    1a12:	2b 81       	ldd	r18, Y+3	; 0x03
    1a14:	3c 81       	ldd	r19, Y+4	; 0x04
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <GPIO_writePort+0x3e>
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	61 f0       	breq	.+24     	; 0x1a3c <GPIO_writePort+0x54>
    1a24:	1e c0       	rjmp	.+60     	; 0x1a62 <GPIO_writePort+0x7a>
    1a26:	2b 81       	ldd	r18, Y+3	; 0x03
    1a28:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	81 f0       	breq	.+32     	; 0x1a50 <GPIO_writePort+0x68>
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	81 f0       	breq	.+32     	; 0x1a5a <GPIO_writePort+0x72>
    1a3a:	13 c0       	rjmp	.+38     	; 0x1a62 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a3c:	eb e3       	ldi	r30, 0x3B	; 59
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	80 83       	st	Z, r24
    1a44:	0e c0       	rjmp	.+28     	; 0x1a62 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a46:	e8 e3       	ldi	r30, 0x38	; 56
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	80 83       	st	Z, r24
    1a4e:	09 c0       	rjmp	.+18     	; 0x1a62 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a50:	e5 e3       	ldi	r30, 0x35	; 53
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	80 83       	st	Z, r24
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a5a:	e2 e3       	ldi	r30, 0x32	; 50
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <GPIO_readPort>:


uint8 GPIO_readPort(uint8 port_num)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <GPIO_readPort+0x6>
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <GPIO_readPort+0x8>
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a7e:	19 82       	std	Y+1, r1	; 0x01


	if(port_num >= NUM_OF_PORTS)
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	84 30       	cpi	r24, 0x04	; 4
    1a84:	90 f5       	brcc	.+100    	; 0x1aea <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	3c 83       	std	Y+4, r19	; 0x04
    1a8e:	2b 83       	std	Y+3, r18	; 0x03
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	d1 f0       	breq	.+52     	; 0x1ace <GPIO_readPort+0x5e>
    1a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <GPIO_readPort+0x3e>
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	61 f0       	breq	.+24     	; 0x1ac4 <GPIO_readPort+0x54>
    1aac:	1e c0       	rjmp	.+60     	; 0x1aea <GPIO_readPort+0x7a>
    1aae:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	81 f0       	breq	.+32     	; 0x1ad8 <GPIO_readPort+0x68>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	81 f0       	breq	.+32     	; 0x1ae2 <GPIO_readPort+0x72>
    1ac2:	13 c0       	rjmp	.+38     	; 0x1aea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ac4:	e9 e3       	ldi	r30, 0x39	; 57
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	0e c0       	rjmp	.+28     	; 0x1aea <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ace:	e6 e3       	ldi	r30, 0x36	; 54
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ad8:	e3 e3       	ldi	r30, 0x33	; 51
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ae2:	e0 e3       	ldi	r30, 0x30	; 48
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <PWM_Timer0_Start>:
 *      Author: abdo
 */
#include "pwm.h"
#include <avr/io.h>
#include "gpio.h"
void PWM_Timer0_Start(uint8 duty_cycle) {
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	63 e0       	ldi	r22, 0x03	; 3
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 3f 0a 	call	0x147e	; 0x147e <GPIO_setupPinDirection>
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
    1b14:	e3 e5       	ldi	r30, 0x53	; 83
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8a e6       	ldi	r24, 0x6A	; 106
    1b1a:	80 83       	st	Z, r24
	TCNT0 = 0;
    1b1c:	e2 e5       	ldi	r30, 0x52	; 82
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	10 82       	st	Z, r1
	OCR0 = (uint8)(((uint32)(duty_cycle*255))/100);
    1b22:	0c e5       	ldi	r16, 0x5C	; 92
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	48 2f       	mov	r20, r24
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	ca 01       	movw	r24, r20
    1b2e:	9c 01       	movw	r18, r24
    1b30:	22 0f       	add	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	c9 01       	movw	r24, r18
    1b36:	96 95       	lsr	r25
    1b38:	98 2f       	mov	r25, r24
    1b3a:	88 27       	eor	r24, r24
    1b3c:	97 95       	ror	r25
    1b3e:	87 95       	ror	r24
    1b40:	82 1b       	sub	r24, r18
    1b42:	93 0b       	sbc	r25, r19
    1b44:	84 0f       	add	r24, r20
    1b46:	95 1f       	adc	r25, r21
    1b48:	aa 27       	eor	r26, r26
    1b4a:	97 fd       	sbrc	r25, 7
    1b4c:	a0 95       	com	r26
    1b4e:	ba 2f       	mov	r27, r26
    1b50:	24 e6       	ldi	r18, 0x64	; 100
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 8c 10 	call	0x2118	; 0x2118 <__udivmodsi4>
    1b60:	da 01       	movw	r26, r20
    1b62:	c9 01       	movw	r24, r18
    1b64:	f8 01       	movw	r30, r16
    1b66:	80 83       	st	Z, r24

}
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	08 95       	ret

00001b74 <__vector_9>:
#include <avr/io.h>
#include "common_macros.h"
#include <avr/interrupt.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect) {
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	4f 93       	push	r20
    1b84:	5f 93       	push	r21
    1b86:	6f 93       	push	r22
    1b88:	7f 93       	push	r23
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	af 93       	push	r26
    1b90:	bf 93       	push	r27
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1b9e:	80 91 7e 00 	lds	r24, 0x007E
    1ba2:	90 91 7f 00 	lds	r25, 0x007F
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	29 f0       	breq	.+10     	; 0x1bb4 <__vector_9+0x40>

		(*g_callBackPtr)();
    1baa:	e0 91 7e 00 	lds	r30, 0x007E
    1bae:	f0 91 7f 00 	lds	r31, 0x007F
    1bb2:	09 95       	icall
	}
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	ff 91       	pop	r31
    1bba:	ef 91       	pop	r30
    1bbc:	bf 91       	pop	r27
    1bbe:	af 91       	pop	r26
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	7f 91       	pop	r23
    1bc6:	6f 91       	pop	r22
    1bc8:	5f 91       	pop	r21
    1bca:	4f 91       	pop	r20
    1bcc:	3f 91       	pop	r19
    1bce:	2f 91       	pop	r18
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 90       	pop	r1
    1bd8:	18 95       	reti

00001bda <__vector_7>:
ISR(TIMER1_COMPA_vect) {
    1bda:	1f 92       	push	r1
    1bdc:	0f 92       	push	r0
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	0f 92       	push	r0
    1be2:	11 24       	eor	r1, r1
    1be4:	2f 93       	push	r18
    1be6:	3f 93       	push	r19
    1be8:	4f 93       	push	r20
    1bea:	5f 93       	push	r21
    1bec:	6f 93       	push	r22
    1bee:	7f 93       	push	r23
    1bf0:	8f 93       	push	r24
    1bf2:	9f 93       	push	r25
    1bf4:	af 93       	push	r26
    1bf6:	bf 93       	push	r27
    1bf8:	ef 93       	push	r30
    1bfa:	ff 93       	push	r31
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1c04:	80 91 7e 00 	lds	r24, 0x007E
    1c08:	90 91 7f 00 	lds	r25, 0x007F
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	29 f0       	breq	.+10     	; 0x1c1a <__vector_7+0x40>

		(*g_callBackPtr)();
    1c10:	e0 91 7e 00 	lds	r30, 0x007E
    1c14:	f0 91 7f 00 	lds	r31, 0x007F
    1c18:	09 95       	icall
	}
}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	ff 91       	pop	r31
    1c20:	ef 91       	pop	r30
    1c22:	bf 91       	pop	r27
    1c24:	af 91       	pop	r26
    1c26:	9f 91       	pop	r25
    1c28:	8f 91       	pop	r24
    1c2a:	7f 91       	pop	r23
    1c2c:	6f 91       	pop	r22
    1c2e:	5f 91       	pop	r21
    1c30:	4f 91       	pop	r20
    1c32:	3f 91       	pop	r19
    1c34:	2f 91       	pop	r18
    1c36:	0f 90       	pop	r0
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	0f 90       	pop	r0
    1c3c:	1f 90       	pop	r1
    1c3e:	18 95       	reti

00001c40 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <Timer1_init+0x6>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    1c4e:	ac e4       	ldi	r26, 0x4C	; 76
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e9 81       	ldd	r30, Y+1	; 0x01
    1c54:	fa 81       	ldd	r31, Y+2	; 0x02
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	9c 93       	st	X, r25
    1c5e:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;
    1c60:	aa e4       	ldi	r26, 0x4A	; 74
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e9 81       	ldd	r30, Y+1	; 0x01
    1c66:	fa 81       	ldd	r31, Y+2	; 0x02
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	11 96       	adiw	r26, 0x01	; 1
    1c6e:	9c 93       	st	X, r25
    1c70:	8e 93       	st	-X, r24
	if (Config_Ptr->mode == Normal) {
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	85 81       	ldd	r24, Z+5	; 0x05
    1c78:	88 23       	and	r24, r24
    1c7a:	29 f4       	brne	.+10     	; 0x1c86 <Timer1_init+0x46>
		TIMSK = 1 << TOIE1;
    1c7c:	e9 e5       	ldi	r30, 0x59	; 89
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	80 83       	st	Z, r24
    1c84:	29 c0       	rjmp	.+82     	; 0x1cd8 <Timer1_init+0x98>
	} else {
		TIMSK = 1 << OCIE1A;
    1c86:	e9 e5       	ldi	r30, 0x59	; 89
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 e1       	ldi	r24, 0x10	; 16
    1c8c:	80 83       	st	Z, r24
		TCCR1A = (1 << FOC1A) | (1 << FOC1B)
    1c8e:	af e4       	ldi	r26, 0x4F	; 79
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ef e4       	ldi	r30, 0x4F	; 79
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	98 2f       	mov	r25, r24
    1c9a:	9c 7f       	andi	r25, 0xFC	; 252
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	85 81       	ldd	r24, Z+5	; 0x05
    1ca2:	83 70       	andi	r24, 0x03	; 3
    1ca4:	89 2b       	or	r24, r25
    1ca6:	8c 60       	ori	r24, 0x0C	; 12
    1ca8:	8c 93       	st	X, r24
				| ((TCCR1A & 0XFC) | (Config_Ptr->mode & 0x3));
		TCCR1B = ((TCCR1B & 0XE7) | ((Config_Ptr->mode & 0xC) << 1))
    1caa:	ae e4       	ldi	r26, 0x4E	; 78
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ee e4       	ldi	r30, 0x4E	; 78
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	27 7e       	andi	r18, 0xE7	; 231
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	85 81       	ldd	r24, Z+5	; 0x05
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	8c 70       	andi	r24, 0x0C	; 12
    1cc4:	90 70       	andi	r25, 0x00	; 0
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	92 2f       	mov	r25, r18
    1ccc:	98 2b       	or	r25, r24
    1cce:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd2:	84 81       	ldd	r24, Z+4	; 0x04
    1cd4:	89 2b       	or	r24, r25
    1cd6:	8c 93       	st	X, r24
				| (Config_Ptr->prescaler);
	}
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <Timer1_deInit>:
void Timer1_deInit(void) {
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1cea:	ef e4       	ldi	r30, 0x4F	; 79
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	10 82       	st	Z, r1
	TCCR1B = 0;
    1cf0:	ee e4       	ldi	r30, 0x4E	; 78
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	10 82       	st	Z, r1
	TCNT1 = 0;
    1cf6:	ec e4       	ldi	r30, 0x4C	; 76
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	11 82       	std	Z+1, r1	; 0x01
    1cfc:	10 82       	st	Z, r1
	OCR1A = 0;
    1cfe:	ea e4       	ldi	r30, 0x4A	; 74
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	11 82       	std	Z+1, r1	; 0x01
    1d04:	10 82       	st	Z, r1
	TIMSK = 0;
    1d06:	e9 e5       	ldi	r30, 0x59	; 89
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	10 82       	st	Z, r1
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void)) {
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <Timer1_setCallBack+0x6>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	90 93 7f 00 	sts	0x007F, r25
    1d28:	80 93 7e 00 	sts	0x007E, r24

}
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <TWI_init>:
 *
 *******************************************************************************/
#include "twi.h"
#include "avr/io.h"
#include "common_macros.h"
void TWI_init(TWI_ConfigType * config){
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <TWI_init+0x12>
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <TWI_init+0x14>
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01


	TWAR= config->address;
    1d52:	a2 e2       	ldi	r26, 0x22	; 34
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8c 93       	st	X, r24
	TWBR = ((((F_CPU)/(config->bit_rate))-16)/(2*config->prescale));
    1d5e:	cc 24       	eor	r12, r12
    1d60:	dd 24       	eor	r13, r13
    1d62:	68 94       	set
    1d64:	c5 f8       	bld	r12, 5
    1d66:	e9 81       	ldd	r30, Y+1	; 0x01
    1d68:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6a:	21 81       	ldd	r18, Z+1	; 0x01
    1d6c:	32 81       	ldd	r19, Z+2	; 0x02
    1d6e:	43 81       	ldd	r20, Z+3	; 0x03
    1d70:	54 81       	ldd	r21, Z+4	; 0x04
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	92 e1       	ldi	r25, 0x12	; 18
    1d76:	aa e7       	ldi	r26, 0x7A	; 122
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 8c 10 	call	0x2118	; 0x2118 <__udivmodsi4>
    1d82:	da 01       	movw	r26, r20
    1d84:	c9 01       	movw	r24, r18
    1d86:	0f 2e       	mov	r0, r31
    1d88:	f0 ef       	ldi	r31, 0xF0	; 240
    1d8a:	ef 2e       	mov	r14, r31
    1d8c:	ff ef       	ldi	r31, 0xFF	; 255
    1d8e:	ff 2e       	mov	r15, r31
    1d90:	ff ef       	ldi	r31, 0xFF	; 255
    1d92:	0f 2f       	mov	r16, r31
    1d94:	ff ef       	ldi	r31, 0xFF	; 255
    1d96:	1f 2f       	mov	r17, r31
    1d98:	f0 2d       	mov	r31, r0
    1d9a:	e8 0e       	add	r14, r24
    1d9c:	f9 1e       	adc	r15, r25
    1d9e:	0a 1f       	adc	r16, r26
    1da0:	1b 1f       	adc	r17, r27
    1da2:	e9 81       	ldd	r30, Y+1	; 0x01
    1da4:	fa 81       	ldd	r31, Y+2	; 0x02
    1da6:	85 81       	ldd	r24, Z+5	; 0x05
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	9c 01       	movw	r18, r24
    1db2:	44 27       	eor	r20, r20
    1db4:	37 fd       	sbrc	r19, 7
    1db6:	40 95       	com	r20
    1db8:	54 2f       	mov	r21, r20
    1dba:	c8 01       	movw	r24, r16
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	0e 94 8c 10 	call	0x2118	; 0x2118 <__udivmodsi4>
    1dc2:	da 01       	movw	r26, r20
    1dc4:	c9 01       	movw	r24, r18
    1dc6:	f6 01       	movw	r30, r12
    1dc8:	80 83       	st	Z, r24
//	TWSR = 0x00;
	TWCR =(1<<TWEN);
    1dca:	e6 e5       	ldi	r30, 0x56	; 86
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	84 e0       	ldi	r24, 0x04	; 4
    1dd0:	80 83       	st	Z, r24
	switch(config->prescale){
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	85 81       	ldd	r24, Z+5	; 0x05
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	3c 83       	std	Y+4, r19	; 0x04
    1dde:	2b 83       	std	Y+3, r18	; 0x03
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	84 30       	cpi	r24, 0x04	; 4
    1de6:	91 05       	cpc	r25, r1
    1de8:	d1 f0       	breq	.+52     	; 0x1e1e <TWI_init+0xe8>
    1dea:	eb 81       	ldd	r30, Y+3	; 0x03
    1dec:	fc 81       	ldd	r31, Y+4	; 0x04
    1dee:	e5 30       	cpi	r30, 0x05	; 5
    1df0:	f1 05       	cpc	r31, r1
    1df2:	34 f4       	brge	.+12     	; 0x1e00 <TWI_init+0xca>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	21 30       	cpi	r18, 0x01	; 1
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	61 f0       	breq	.+24     	; 0x1e16 <TWI_init+0xe0>
    1dfe:	1e c0       	rjmp	.+60     	; 0x1e3c <TWI_init+0x106>
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	80 31       	cpi	r24, 0x10	; 16
    1e06:	91 05       	cpc	r25, r1
    1e08:	79 f0       	breq	.+30     	; 0x1e28 <TWI_init+0xf2>
    1e0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e0e:	e0 34       	cpi	r30, 0x40	; 64
    1e10:	f1 05       	cpc	r31, r1
    1e12:	79 f0       	breq	.+30     	; 0x1e32 <TWI_init+0xfc>
    1e14:	13 c0       	rjmp	.+38     	; 0x1e3c <TWI_init+0x106>

	case 1:
		TWSR=0x00;
    1e16:	e1 e2       	ldi	r30, 0x21	; 33
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	10 82       	st	Z, r1
    1e1c:	12 c0       	rjmp	.+36     	; 0x1e42 <TWI_init+0x10c>
		break;

	case 4:
		TWSR=0x01;
    1e1e:	e1 e2       	ldi	r30, 0x21	; 33
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	80 83       	st	Z, r24
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <TWI_init+0x10c>
		break;

	case 16:
		TWSR=0x02;
    1e28:	e1 e2       	ldi	r30, 0x21	; 33
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	80 83       	st	Z, r24
    1e30:	08 c0       	rjmp	.+16     	; 0x1e42 <TWI_init+0x10c>
		break;

	case 64:
	 TWSR=0x03;
    1e32:	e1 e2       	ldi	r30, 0x21	; 33
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	80 83       	st	Z, r24
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <TWI_init+0x10c>
	   break;

	default:
		 TWSR=0x00;
    1e3c:	e1 e2       	ldi	r30, 0x21	; 33
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	10 82       	st	Z, r1
	}

}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	df 90       	pop	r13
    1e58:	cf 90       	pop	r12
    1e5a:	08 95       	ret

00001e5c <TWI_start>:

void TWI_start(void){
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62

	TWCR =(1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1e64:	e6 e5       	ldi	r30, 0x56	; 86
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	84 ea       	ldi	r24, 0xA4	; 164
    1e6a:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    1e6c:	e6 e5       	ldi	r30, 0x56	; 86
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	88 23       	and	r24, r24
    1e74:	dc f7       	brge	.-10     	; 0x1e6c <TWI_start+0x10>

}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <TWI_stop>:


void TWI_stop(void){
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62

	TWCR =(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
    1e84:	e6 e5       	ldi	r30, 0x56	; 86
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	84 e9       	ldi	r24, 0x94	; 148
    1e8a:	80 83       	st	Z, r24


}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <TWI_writeByte>:

void TWI_writeByte(uint8 data){
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	0f 92       	push	r0
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    1e9e:	e3 e2       	ldi	r30, 0x23	; 35
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	80 83       	st	Z, r24
	TWCR =(1<<TWEN)|(1<<TWINT);
    1ea6:	e6 e5       	ldi	r30, 0x56	; 86
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	84 e8       	ldi	r24, 0x84	; 132
    1eac:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1eae:	e6 e5       	ldi	r30, 0x56	; 86
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 23       	and	r24, r24
    1eb6:	dc f7       	brge	.-10     	; 0x1eae <TWI_writeByte+0x1c>
}
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void){
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62

	TWCR =(1<<TWEN)|(1<<TWEA)|(1<<TWINT);
    1ec8:	e6 e5       	ldi	r30, 0x56	; 86
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	84 ec       	ldi	r24, 0xC4	; 196
    1ece:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1ed0:	e6 e5       	ldi	r30, 0x56	; 86
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	88 23       	and	r24, r24
    1ed8:	dc f7       	brge	.-10     	; 0x1ed0 <TWI_readByteWithACK+0x10>
	return TWDR;
    1eda:	e3 e2       	ldi	r30, 0x23	; 35
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
}
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void){
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	TWCR =(1<<TWEN)|(1<<TWINT);
    1eee:	e6 e5       	ldi	r30, 0x56	; 86
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	84 e8       	ldi	r24, 0x84	; 132
    1ef4:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1ef6:	e6 e5       	ldi	r30, 0x56	; 86
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	88 23       	and	r24, r24
    1efe:	dc f7       	brge	.-10     	; 0x1ef6 <TWI_readByteWithNACK+0x10>
	return TWDR;
    1f00:	e3 e2       	ldi	r30, 0x23	; 35
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <TWI_getStatus>:

uint8 TWI_getStatus(void){
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62

	return TWSR & 0XF8;
    1f14:	e1 e2       	ldi	r30, 0x21	; 33
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 7f       	andi	r24, 0xF8	; 248
}
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <UART_init>:
 *******************************************************************************/
#include "uart.h"
#include "avr/io.h" /* To use the UART Registers */
#include "common_macros.h" /* To use the macros like SET_BIT */

void UART_init(const UART_ConfigType *Config_Ptr) {
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <UART_init+0x6>
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <UART_init+0x8>
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1f32:	1a 82       	std	Y+2, r1	; 0x02
    1f34:	19 82       	std	Y+1, r1	; 0x01
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1f36:	eb 81       	ldd	r30, Y+3	; 0x03
    1f38:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3a:	83 81       	ldd	r24, Z+3	; 0x03
    1f3c:	94 81       	ldd	r25, Z+4	; 0x04
    1f3e:	a5 81       	ldd	r26, Z+5	; 0x05
    1f40:	b6 81       	ldd	r27, Z+6	; 0x06
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	aa 1f       	adc	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	aa 1f       	adc	r26, r26
    1f50:	bb 1f       	adc	r27, r27
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	aa 1f       	adc	r26, r26
    1f58:	bb 1f       	adc	r27, r27
    1f5a:	9c 01       	movw	r18, r24
    1f5c:	ad 01       	movw	r20, r26
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	92 e1       	ldi	r25, 0x12	; 18
    1f62:	aa e7       	ldi	r26, 0x7A	; 122
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 8c 10 	call	0x2118	; 0x2118 <__udivmodsi4>
    1f6e:	da 01       	movw	r26, r20
    1f70:	c9 01       	movw	r24, r18
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
	UCSRA =(1<<U2X);
    1f78:	eb e2       	ldi	r30, 0x2B	; 43
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN);
    1f80:	ea e2       	ldi	r30, 0x2A	; 42
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	88 e1       	ldi	r24, 0x18	; 24
    1f86:	80 83       	st	Z, r24
	UCSRC=(1<<URSEL)|((Config_Ptr->numdata)<<1)|((Config_Ptr->Stopbit)<<3)|((Config_Ptr->parity)<<4);
    1f88:	a0 e4       	ldi	r26, 0x40	; 64
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f90:	80 81       	ld	r24, Z
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	20 68       	ori	r18, 0x80	; 128
    1f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	28 2b       	or	r18, r24
    1fb6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fba:	81 81       	ldd	r24, Z+1	; 0x01
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	82 95       	swap	r24
    1fc2:	92 95       	swap	r25
    1fc4:	90 7f       	andi	r25, 0xF0	; 240
    1fc6:	98 27       	eor	r25, r24
    1fc8:	80 7f       	andi	r24, 0xF0	; 240
    1fca:	98 27       	eor	r25, r24
    1fcc:	82 2b       	or	r24, r18
    1fce:	8c 93       	st	X, r24
	UBRRH=(ubrr_value>>8);
    1fd0:	e0 e4       	ldi	r30, 0x40	; 64
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	89 2f       	mov	r24, r25
    1fda:	99 27       	eor	r25, r25
    1fdc:	80 83       	st	Z, r24
	UBRRL=(ubrr_value);
    1fde:	e9 e2       	ldi	r30, 0x29	; 41
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	80 83       	st	Z, r24
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2000:	eb e2       	ldi	r30, 0x2B	; 43
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	80 72       	andi	r24, 0x20	; 32
    200c:	90 70       	andi	r25, 0x00	; 0
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	b9 f3       	breq	.-18     	; 0x2000 <UART_sendByte+0xc>
	UDR=data;
    2012:	ec e2       	ldi	r30, 0x2C	; 44
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	80 83       	st	Z, r24
}
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    202a:	eb e2       	ldi	r30, 0x2B	; 43
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	88 23       	and	r24, r24
    2032:	dc f7       	brge	.-10     	; 0x202a <UART_recieveByte+0x8>
	return UDR;
    2034:	ec e2       	ldi	r30, 0x2C	; 44
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
}
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <UART_sendString+0x6>
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	9b 83       	std	Y+3, r25	; 0x03
    204e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2050:	19 82       	std	Y+1, r1	; 0x01
    2052:	0e c0       	rjmp	.+28     	; 0x2070 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	fc 01       	movw	r30, r24
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	80 81       	ld	r24, Z
    2066:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <UART_sendByte>
		i++;
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	8f 5f       	subi	r24, 0xFF	; 255
    206e:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	80 81       	ld	r24, Z
    2082:	88 23       	and	r24, r24
    2084:	39 f7       	brne	.-50     	; 0x2054 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    2092:	0f 93       	push	r16
    2094:	1f 93       	push	r17
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <UART_receiveString+0xa>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	9b 83       	std	Y+3, r25	; 0x03
    20a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20a6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	8c 01       	movw	r16, r24
    20b4:	02 0f       	add	r16, r18
    20b6:	13 1f       	adc	r17, r19
    20b8:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_recieveByte>
    20bc:	f8 01       	movw	r30, r16
    20be:	80 83       	st	Z, r24
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	8f 5f       	subi	r24, 0xFF	; 255
    20c6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	9b 81       	ldd	r25, Y+3	; 0x03
    20d2:	8c 01       	movw	r16, r24
    20d4:	02 0f       	add	r16, r18
    20d6:	13 1f       	adc	r17, r19
    20d8:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_recieveByte>
    20dc:	f8 01       	movw	r30, r16
    20de:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ea:	fc 01       	movw	r30, r24
    20ec:	e2 0f       	add	r30, r18
    20ee:	f3 1f       	adc	r31, r19
    20f0:	80 81       	ld	r24, Z
    20f2:	83 32       	cpi	r24, 0x23	; 35
    20f4:	31 f7       	brne	.-52     	; 0x20c2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	fc 01       	movw	r30, r24
    2102:	e2 0f       	add	r30, r18
    2104:	f3 1f       	adc	r31, r19
    2106:	10 82       	st	Z, r1
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	08 95       	ret

00002118 <__udivmodsi4>:
    2118:	a1 e2       	ldi	r26, 0x21	; 33
    211a:	1a 2e       	mov	r1, r26
    211c:	aa 1b       	sub	r26, r26
    211e:	bb 1b       	sub	r27, r27
    2120:	fd 01       	movw	r30, r26
    2122:	0d c0       	rjmp	.+26     	; 0x213e <__udivmodsi4_ep>

00002124 <__udivmodsi4_loop>:
    2124:	aa 1f       	adc	r26, r26
    2126:	bb 1f       	adc	r27, r27
    2128:	ee 1f       	adc	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	a2 17       	cp	r26, r18
    212e:	b3 07       	cpc	r27, r19
    2130:	e4 07       	cpc	r30, r20
    2132:	f5 07       	cpc	r31, r21
    2134:	20 f0       	brcs	.+8      	; 0x213e <__udivmodsi4_ep>
    2136:	a2 1b       	sub	r26, r18
    2138:	b3 0b       	sbc	r27, r19
    213a:	e4 0b       	sbc	r30, r20
    213c:	f5 0b       	sbc	r31, r21

0000213e <__udivmodsi4_ep>:
    213e:	66 1f       	adc	r22, r22
    2140:	77 1f       	adc	r23, r23
    2142:	88 1f       	adc	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	1a 94       	dec	r1
    2148:	69 f7       	brne	.-38     	; 0x2124 <__udivmodsi4_loop>
    214a:	60 95       	com	r22
    214c:	70 95       	com	r23
    214e:	80 95       	com	r24
    2150:	90 95       	com	r25
    2152:	9b 01       	movw	r18, r22
    2154:	ac 01       	movw	r20, r24
    2156:	bd 01       	movw	r22, r26
    2158:	cf 01       	movw	r24, r30
    215a:	08 95       	ret

0000215c <__prologue_saves__>:
    215c:	2f 92       	push	r2
    215e:	3f 92       	push	r3
    2160:	4f 92       	push	r4
    2162:	5f 92       	push	r5
    2164:	6f 92       	push	r6
    2166:	7f 92       	push	r7
    2168:	8f 92       	push	r8
    216a:	9f 92       	push	r9
    216c:	af 92       	push	r10
    216e:	bf 92       	push	r11
    2170:	cf 92       	push	r12
    2172:	df 92       	push	r13
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	ca 1b       	sub	r28, r26
    2186:	db 0b       	sbc	r29, r27
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	09 94       	ijmp

00002194 <__epilogue_restores__>:
    2194:	2a 88       	ldd	r2, Y+18	; 0x12
    2196:	39 88       	ldd	r3, Y+17	; 0x11
    2198:	48 88       	ldd	r4, Y+16	; 0x10
    219a:	5f 84       	ldd	r5, Y+15	; 0x0f
    219c:	6e 84       	ldd	r6, Y+14	; 0x0e
    219e:	7d 84       	ldd	r7, Y+13	; 0x0d
    21a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    21a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    21a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    21a6:	b9 84       	ldd	r11, Y+9	; 0x09
    21a8:	c8 84       	ldd	r12, Y+8	; 0x08
    21aa:	df 80       	ldd	r13, Y+7	; 0x07
    21ac:	ee 80       	ldd	r14, Y+6	; 0x06
    21ae:	fd 80       	ldd	r15, Y+5	; 0x05
    21b0:	0c 81       	ldd	r16, Y+4	; 0x04
    21b2:	1b 81       	ldd	r17, Y+3	; 0x03
    21b4:	aa 81       	ldd	r26, Y+2	; 0x02
    21b6:	b9 81       	ldd	r27, Y+1	; 0x01
    21b8:	ce 0f       	add	r28, r30
    21ba:	d1 1d       	adc	r29, r1
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	ed 01       	movw	r28, r26
    21c8:	08 95       	ret

000021ca <_exit>:
    21ca:	f8 94       	cli

000021cc <__stop_program>:
    21cc:	ff cf       	rjmp	.-2      	; 0x21cc <__stop_program>
